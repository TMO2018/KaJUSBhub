

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 16 16:00:46 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	dabs	1,0x613,7,_joystick_input_j1
    67                           	dabs	1,0x400,64,_BDT
    68                           	dabs	1,0x500,8,_SetupPkt
    69                           	dabs	1,0x520,8,_CtrlTrfData
    70                           	dabs	1,0x530,64,_hid_report_out_j1
    71                           	dabs	1,0x5F0,64,_hid_report_in_j2
    72                           	dabs	1,0x5B0,64,_hid_report_out_j2
    73                           	dabs	1,0x570,64,_hid_report_in_j1
    74                           	dabs	1,0x656,7,_joystick_input_j2
    75                           	dabs	1,0x67A,1,_hid_report_out_k1
    76                           	dabs	1,0x67B,8,_hid_report_in_k1
    77  0000                     
    78                           ; Version 1.45
    79                           ; Generated 16/11/2017 GMT
    80                           ; 
    81                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F4550 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	mediumconst
   114  007DC2                     __pmediumconst:
   115                           	opt stack 0
   116  007DC2  00                 	db	0
   117  007DC3                     _keymap:
   118                           	opt stack 0
   119  007DC3  1E                 	db	30
   120  007DC4  35                 	db	53
   121  007DC5  2B                 	db	43
   122  007DC6  29                 	db	41
   123  007DC7  2C                 	db	44
   124  007DC8  E0                 	db	224
   125  007DC9  14                 	db	20
   126  007DCA  1F                 	db	31
   127  007DCB  20                 	db	32
   128  007DCC  1A                 	db	26
   129  007DCD  04                 	db	4
   130  007DCE  E1                 	db	225
   131  007DCF  1D                 	db	29
   132  007DD0  16                 	db	22
   133  007DD1  08                 	db	8
   134  007DD2  21                 	db	33
   135  007DD3  22                 	db	34
   136  007DD4  15                 	db	21
   137  007DD5  07                 	db	7
   138  007DD6  1B                 	db	27
   139  007DD7  06                 	db	6
   140  007DD8  09                 	db	9
   141  007DD9  17                 	db	23
   142  007DDA  23                 	db	35
   143  007DDB  24                 	db	36
   144  007DDC  1C                 	db	28
   145  007DDD  0A                 	db	10
   146  007DDE  19                 	db	25
   147  007DDF  05                 	db	5
   148  007DE0  0B                 	db	11
   149  007DE1  18                 	db	24
   150  007DE2  25                 	db	37
   151  007DE3  26                 	db	38
   152  007DE4  0C                 	db	12
   153  007DE5  0D                 	db	13
   154  007DE6  11                 	db	17
   155  007DE7  10                 	db	16
   156  007DE8  0E                 	db	14
   157  007DE9  12                 	db	18
   158  007DEA  27                 	db	39
   159  007DEB  2D                 	db	45
   160  007DEC  13                 	db	19
   161  007DED  0F                 	db	15
   162  007DEE  36                 	db	54
   163  007DEF  37                 	db	55
   164  007DF0  33                 	db	51
   165  007DF1  2F                 	db	47
   166  007DF2  2E                 	db	46
   167  007DF3  49                 	db	73
   168  007DF4  30                 	db	48
   169  007DF5  34                 	db	52
   170  007DF6  38                 	db	56
   171  007DF7  E5                 	db	229
   172  007DF8  31                 	db	49
   173  007DF9  4C                 	db	76
   174  007DFA  4A                 	db	74
   175  007DFB  2A                 	db	42
   176  007DFC  28                 	db	40
   177  007DFD  4F                 	db	79
   178  007DFE  51                 	db	81
   179  007DFF  3A                 	db	58
   180  007E00  3C                 	db	60
   181  007E01  3E                 	db	62
   182  007E02  40                 	db	64
   183  007E03  4B                 	db	75
   184  007E04                     __end_of_keymap:
   185                           	opt stack 0
   186  007E04                     _USB_SD_Ptr:
   187                           	opt stack 0
   188  007E04  FA                 	db	low _sd000
   189  007E05  7F                 	db	high _sd000
   190  007E06  D2                 	db	low _sd001
   191  007E07  7F                 	db	high _sd001
   192  007E08  96                 	db	low _sd002
   193  007E09  7F                 	db	high _sd002
   194  007E0A  72                 	db	low _sd003
   195  007E0B  7F                 	db	high _sd003
   196  007E0C  4E                 	db	low _sd004
   197  007E0D  7F                 	db	high _sd004
   198  007E0E  B8                 	db	low _sd005
   199  007E0F  7F                 	db	high _sd005
   200  007E10                     __end_of_USB_SD_Ptr:
   201                           	opt stack 0
   202  007E10                     _USB_CD_Ptr:
   203                           	opt stack 0
   204  007E10  12                 	db	low _configDescriptor1
   205  007E11  7E                 	db	high _configDescriptor1
   206  007E12                     __end_of_USB_CD_Ptr:
   207                           	opt stack 0
   208  007E12                     _configDescriptor1:
   209                           	opt stack 0
   210  007E12  09                 	db	9
   211  007E13  02                 	db	2
   212  007E14  69                 	db	105
   213  007E15  00                 	db	0
   214  007E16  03                 	db	3
   215  007E17  01                 	db	1
   216  007E18  00                 	db	0
   217  007E19  C0                 	db	192
   218  007E1A  32                 	db	50
   219  007E1B  09                 	db	9
   220  007E1C  04                 	db	4
   221  007E1D  00                 	db	0
   222  007E1E  00                 	db	0
   223  007E1F  02                 	db	2
   224  007E20  03                 	db	3
   225  007E21  00                 	db	0
   226  007E22  00                 	db	0
   227  007E23  03                 	db	3
   228  007E24  09                 	db	9
   229  007E25  21                 	db	33
   230  007E26  11                 	db	17
   231  007E27  01                 	db	1
   232  007E28  00                 	db	0
   233  007E29  01                 	db	1
   234  007E2A  22                 	db	34
   235  007E2B  4A                 	db	74
   236  007E2C  00                 	db	0
   237  007E2D  07                 	db	7
   238  007E2E  05                 	db	5
   239  007E2F  81                 	db	129
   240  007E30  03                 	db	3
   241  007E31  40                 	db	64
   242  007E32  00                 	db	0
   243  007E33  01                 	db	1
   244  007E34  07                 	db	7
   245  007E35  05                 	db	5
   246  007E36  01                 	db	1
   247  007E37  03                 	db	3
   248  007E38  40                 	db	64
   249  007E39  00                 	db	0
   250  007E3A  01                 	db	1
   251  007E3B  09                 	db	9
   252  007E3C  04                 	db	4
   253  007E3D  01                 	db	1
   254  007E3E  00                 	db	0
   255  007E3F  02                 	db	2
   256  007E40  03                 	db	3
   257  007E41  00                 	db	0
   258  007E42  00                 	db	0
   259  007E43  04                 	db	4
   260  007E44  09                 	db	9
   261  007E45  21                 	db	33
   262  007E46  11                 	db	17
   263  007E47  01                 	db	1
   264  007E48  00                 	db	0
   265  007E49  01                 	db	1
   266  007E4A  22                 	db	34
   267  007E4B  4A                 	db	74
   268  007E4C  00                 	db	0
   269  007E4D  07                 	db	7
   270  007E4E  05                 	db	5
   271  007E4F  82                 	db	130
   272  007E50  03                 	db	3
   273  007E51  40                 	db	64
   274  007E52  00                 	db	0
   275  007E53  01                 	db	1
   276  007E54  07                 	db	7
   277  007E55  05                 	db	5
   278  007E56  02                 	db	2
   279  007E57  03                 	db	3
   280  007E58  40                 	db	64
   281  007E59  00                 	db	0
   282  007E5A  01                 	db	1
   283  007E5B  09                 	db	9
   284  007E5C  04                 	db	4
   285  007E5D  02                 	db	2
   286  007E5E  00                 	db	0
   287  007E5F  02                 	db	2
   288  007E60  03                 	db	3
   289  007E61  01                 	db	1
   290  007E62  01                 	db	1
   291  007E63  05                 	db	5
   292  007E64  09                 	db	9
   293  007E65  21                 	db	33
   294  007E66  11                 	db	17
   295  007E67  01                 	db	1
   296  007E68  00                 	db	0
   297  007E69  01                 	db	1
   298  007E6A  22                 	db	34
   299  007E6B  3F                 	db	63
   300  007E6C  00                 	db	0
   301  007E6D  07                 	db	7
   302  007E6E  05                 	db	5
   303  007E6F  83                 	db	131
   304  007E70  03                 	db	3
   305  007E71  08                 	db	8
   306  007E72  00                 	db	0
   307  007E73  01                 	db	1
   308  007E74  07                 	db	7
   309  007E75  05                 	db	5
   310  007E76  03                 	db	3
   311  007E77  03                 	db	3
   312  007E78  08                 	db	8
   313  007E79  00                 	db	0
   314  007E7A  01                 	db	1
   315  007E7B                     __end_of_configDescriptor1:
   316                           	opt stack 0
   317  007E7B                     _hid_rpt01_j2:
   318                           	opt stack 0
   319  007E7B  05                 	db	5
   320  007E7C  01                 	db	1
   321  007E7D  09                 	db	9
   322  007E7E  05                 	db	5
   323  007E7F  A1                 	db	161
   324  007E80  01                 	db	1
   325  007E81  15                 	db	21
   326  007E82  00                 	db	0
   327  007E83  25                 	db	37
   328  007E84  01                 	db	1
   329  007E85  35                 	db	53
   330  007E86  00                 	db	0
   331  007E87  45                 	db	69
   332  007E88  01                 	db	1
   333  007E89  75                 	db	117
   334  007E8A  01                 	db	1
   335  007E8B  95                 	db	149
   336  007E8C  0D                 	db	13
   337  007E8D  05                 	db	5
   338  007E8E  09                 	db	9
   339  007E8F  19                 	db	25
   340  007E90  01                 	db	1
   341  007E91  29                 	db	41
   342  007E92  0D                 	db	13
   343  007E93  81                 	db	129
   344  007E94  02                 	db	2
   345  007E95  95                 	db	149
   346  007E96  03                 	db	3
   347  007E97  81                 	db	129
   348  007E98  01                 	db	1
   349  007E99  05                 	db	5
   350  007E9A  01                 	db	1
   351  007E9B  25                 	db	37
   352  007E9C  07                 	db	7
   353  007E9D  46                 	db	70
   354  007E9E  3B                 	db	59
   355  007E9F  01                 	db	1
   356  007EA0  75                 	db	117
   357  007EA1  04                 	db	4
   358  007EA2  95                 	db	149
   359  007EA3  01                 	db	1
   360  007EA4  65                 	db	101
   361  007EA5  14                 	db	20
   362  007EA6  09                 	db	9
   363  007EA7  39                 	db	57
   364  007EA8  81                 	db	129
   365  007EA9  42                 	db	66
   366  007EAA  65                 	db	101
   367  007EAB  00                 	db	0
   368  007EAC  95                 	db	149
   369  007EAD  01                 	db	1
   370  007EAE  81                 	db	129
   371  007EAF  01                 	db	1
   372  007EB0  26                 	db	38
   373  007EB1  FF                 	db	255
   374  007EB2  00                 	db	0
   375  007EB3  46                 	db	70
   376  007EB4  FF                 	db	255
   377  007EB5  00                 	db	0
   378  007EB6  09                 	db	9
   379  007EB7  30                 	db	48
   380  007EB8  09                 	db	9
   381  007EB9  31                 	db	49
   382  007EBA  09                 	db	9
   383  007EBB  32                 	db	50
   384  007EBC  09                 	db	9
   385  007EBD  35                 	db	53
   386  007EBE  75                 	db	117
   387  007EBF  08                 	db	8
   388  007EC0  95                 	db	149
   389  007EC1  04                 	db	4
   390  007EC2  81                 	db	129
   391  007EC3  02                 	db	2
   392  007EC4  C0                 	db	192
   393  007EC5                     __end_of_hid_rpt01_j2:
   394                           	opt stack 0
   395  007EC5                     _hid_rpt01_j1:
   396                           	opt stack 0
   397  007EC5  05                 	db	5
   398  007EC6  01                 	db	1
   399  007EC7  09                 	db	9
   400  007EC8  05                 	db	5
   401  007EC9  A1                 	db	161
   402  007ECA  01                 	db	1
   403  007ECB  15                 	db	21
   404  007ECC  00                 	db	0
   405  007ECD  25                 	db	37
   406  007ECE  01                 	db	1
   407  007ECF  35                 	db	53
   408  007ED0  00                 	db	0
   409  007ED1  45                 	db	69
   410  007ED2  01                 	db	1
   411  007ED3  75                 	db	117
   412  007ED4  01                 	db	1
   413  007ED5  95                 	db	149
   414  007ED6  0D                 	db	13
   415  007ED7  05                 	db	5
   416  007ED8  09                 	db	9
   417  007ED9  19                 	db	25
   418  007EDA  01                 	db	1
   419  007EDB  29                 	db	41
   420  007EDC  0D                 	db	13
   421  007EDD  81                 	db	129
   422  007EDE  02                 	db	2
   423  007EDF  95                 	db	149
   424  007EE0  03                 	db	3
   425  007EE1  81                 	db	129
   426  007EE2  01                 	db	1
   427  007EE3  05                 	db	5
   428  007EE4  01                 	db	1
   429  007EE5  25                 	db	37
   430  007EE6  07                 	db	7
   431  007EE7  46                 	db	70
   432  007EE8  3B                 	db	59
   433  007EE9  01                 	db	1
   434  007EEA  75                 	db	117
   435  007EEB  04                 	db	4
   436  007EEC  95                 	db	149
   437  007EED  01                 	db	1
   438  007EEE  65                 	db	101
   439  007EEF  14                 	db	20
   440  007EF0  09                 	db	9
   441  007EF1  39                 	db	57
   442  007EF2  81                 	db	129
   443  007EF3  42                 	db	66
   444  007EF4  65                 	db	101
   445  007EF5  00                 	db	0
   446  007EF6  95                 	db	149
   447  007EF7  01                 	db	1
   448  007EF8  81                 	db	129
   449  007EF9  01                 	db	1
   450  007EFA  26                 	db	38
   451  007EFB  FF                 	db	255
   452  007EFC  00                 	db	0
   453  007EFD  46                 	db	70
   454  007EFE  FF                 	db	255
   455  007EFF  00                 	db	0
   456  007F00  09                 	db	9
   457  007F01  30                 	db	48
   458  007F02  09                 	db	9
   459  007F03  31                 	db	49
   460  007F04  09                 	db	9
   461  007F05  32                 	db	50
   462  007F06  09                 	db	9
   463  007F07  35                 	db	53
   464  007F08  75                 	db	117
   465  007F09  08                 	db	8
   466  007F0A  95                 	db	149
   467  007F0B  04                 	db	4
   468  007F0C  81                 	db	129
   469  007F0D  02                 	db	2
   470  007F0E  C0                 	db	192
   471  007F0F                     __end_of_hid_rpt01_j1:
   472                           	opt stack 0
   473  007F0F                     _hid_rpt01_k1:
   474                           	opt stack 0
   475  007F0F  05                 	db	5
   476  007F10  01                 	db	1
   477  007F11  09                 	db	9
   478  007F12  06                 	db	6
   479  007F13  A1                 	db	161
   480  007F14  01                 	db	1
   481  007F15  05                 	db	5
   482  007F16  07                 	db	7
   483  007F17  19                 	db	25
   484  007F18  E0                 	db	224
   485  007F19  29                 	db	41
   486  007F1A  E7                 	db	231
   487  007F1B  15                 	db	21
   488  007F1C  00                 	db	0
   489  007F1D  25                 	db	37
   490  007F1E  01                 	db	1
   491  007F1F  75                 	db	117
   492  007F20  01                 	db	1
   493  007F21  95                 	db	149
   494  007F22  08                 	db	8
   495  007F23  81                 	db	129
   496  007F24  02                 	db	2
   497  007F25  95                 	db	149
   498  007F26  01                 	db	1
   499  007F27  75                 	db	117
   500  007F28  08                 	db	8
   501  007F29  81                 	db	129
   502  007F2A  03                 	db	3
   503  007F2B  95                 	db	149
   504  007F2C  05                 	db	5
   505  007F2D  75                 	db	117
   506  007F2E  01                 	db	1
   507  007F2F  05                 	db	5
   508  007F30  08                 	db	8
   509  007F31  19                 	db	25
   510  007F32  01                 	db	1
   511  007F33  29                 	db	41
   512  007F34  05                 	db	5
   513  007F35  91                 	db	145
   514  007F36  02                 	db	2
   515  007F37  95                 	db	149
   516  007F38  01                 	db	1
   517  007F39  75                 	db	117
   518  007F3A  03                 	db	3
   519  007F3B  91                 	db	145
   520  007F3C  03                 	db	3
   521  007F3D  95                 	db	149
   522  007F3E  06                 	db	6
   523  007F3F  75                 	db	117
   524  007F40  08                 	db	8
   525  007F41  15                 	db	21
   526  007F42  00                 	db	0
   527  007F43  25                 	db	37
   528  007F44  65                 	db	101
   529  007F45  05                 	db	5
   530  007F46  07                 	db	7
   531  007F47  19                 	db	25
   532  007F48  00                 	db	0
   533  007F49  29                 	db	41
   534  007F4A  65                 	db	101
   535  007F4B  81                 	db	129
   536  007F4C  00                 	db	0
   537  007F4D  C0                 	db	192
   538  007F4E                     __end_of_hid_rpt01_k1:
   539                           	opt stack 0
   540  007F4E                     _sd004:
   541                           	opt stack 0
   542  007F4E  24                 	db	36
   543  007F4F  03                 	db	3
   544  007F50  0043               	dw	67
   545  007F52  0036               	dw	54
   546  007F54  0034               	dw	52
   547  007F56  0020               	dw	32
   548  007F58  004A               	dw	74
   549  007F5A  006F               	dw	111
   550  007F5C  0079               	dw	121
   551  007F5E  0073               	dw	115
   552  007F60  0074               	dw	116
   553  007F62  0069               	dw	105
   554  007F64  0063               	dw	99
   555  007F66  006B               	dw	107
   556  007F68  0020               	dw	32
   557  007F6A  0050               	dw	80
   558  007F6C  006F               	dw	111
   559  007F6E  0072               	dw	114
   560  007F70  0074               	dw	116
   561  007F72                     __end_of_sd004:
   562                           	opt stack 0
   563  007F72                     _sd003:
   564                           	opt stack 0
   565  007F72  24                 	db	36
   566  007F73  03                 	db	3
   567  007F74  0043               	dw	67
   568  007F76  0036               	dw	54
   569  007F78  0034               	dw	52
   570  007F7A  0020               	dw	32
   571  007F7C  004A               	dw	74
   572  007F7E  006F               	dw	111
   573  007F80  0079               	dw	121
   574  007F82  0073               	dw	115
   575  007F84  0074               	dw	116
   576  007F86  0069               	dw	105
   577  007F88  0063               	dw	99
   578  007F8A  006B               	dw	107
   579  007F8C  0020               	dw	32
   580  007F8E  0050               	dw	80
   581  007F90  006F               	dw	111
   582  007F92  0072               	dw	114
   583  007F94  0074               	dw	116
   584  007F96                     __end_of_sd003:
   585                           	opt stack 0
   586  007F96                     _sd002:
   587                           	opt stack 0
   588  007F96  22                 	db	34
   589  007F97  03                 	db	3
   590  007F98  0043               	dw	67
   591  007F9A  006F               	dw	111
   592  007F9C  006D               	dw	109
   593  007F9E  006D               	dw	109
   594  007FA0  006F               	dw	111
   595  007FA2  0064               	dw	100
   596  007FA4  006F               	dw	111
   597  007FA6  0072               	dw	114
   598  007FA8  0065               	dw	101
   599  007FAA  0020               	dw	32
   600  007FAC  0036               	dw	54
   601  007FAE  0034               	dw	52
   602  007FB0  0020               	dw	32
   603  007FB2  0055               	dw	85
   604  007FB4  0053               	dw	83
   605  007FB6  0042               	dw	66
   606  007FB8                     __end_of_sd002:
   607                           	opt stack 0
   608  007FB8                     _sd005:
   609                           	opt stack 0
   610  007FB8  1A                 	db	26
   611  007FB9  03                 	db	3
   612  007FBA  0043               	dw	67
   613  007FBC  0036               	dw	54
   614  007FBE  0034               	dw	52
   615  007FC0  0020               	dw	32
   616  007FC2  004B               	dw	75
   617  007FC4  0065               	dw	101
   618  007FC6  0079               	dw	121
   619  007FC8  0062               	dw	98
   620  007FCA  006F               	dw	111
   621  007FCC  0061               	dw	97
   622  007FCE  0072               	dw	114
   623  007FD0  0064               	dw	100
   624  007FD2                     __end_of_sd005:
   625                           	opt stack 0
   626  007FD2                     _sd001:
   627                           	opt stack 0
   628  007FD2  16                 	db	22
   629  007FD3  03                 	db	3
   630  007FD4  0053               	dw	83
   631  007FD6  0069               	dw	105
   632  007FD8  006D               	dw	109
   633  007FDA  006F               	dw	111
   634  007FDC  006E               	dw	110
   635  007FDE  0020               	dw	32
   636  007FE0  0049               	dw	73
   637  007FE2  006E               	dw	110
   638  007FE4  006E               	dw	110
   639  007FE6  0073               	dw	115
   640  007FE8                     __end_of_sd001:
   641                           	opt stack 0
   642  007FE8                     _device_dsc:
   643                           	opt stack 0
   644  007FE8  12                 	db	18
   645  007FE9  01                 	db	1
   646  007FEA  0200               	dw	512
   647  007FEC  00                 	db	0
   648  007FED  00                 	db	0
   649  007FEE  00                 	db	0
   650  007FEF  08                 	db	8
   651  007FF0  04D8               	dw	1240
   652  007FF2  0078               	dw	120
   653  007FF4  0001               	dw	1
   654  007FF6  01                 	db	1
   655  007FF7  02                 	db	2
   656  007FF8  00                 	db	0
   657  007FF9  01                 	db	1
   658  007FFA                     __end_of_device_dsc:
   659                           	opt stack 0
   660  007FFA                     _sd000:
   661                           	opt stack 0
   662  007FFA  04                 	db	4
   663  007FFB  03                 	db	3
   664  007FFC  0409               	dw	1033
   665  007FFE                     __end_of_sd000:
   666                           	opt stack 0
   667  0000                     _ADRESH	set	4036
   668  0000                     _ADRESL	set	4035
   669  0000                     _ADCON0	set	4034
   670  0000                     _PORTE	set	3972
   671  0000                     _PORTD	set	3971
   672  0000                     _PORTC	set	3970
   673  0000                     _PORTB	set	3969
   674  0000                     _PORTA	set	3968
   675  0000                     _TRISE	set	3990
   676  0000                     _TRISD	set	3989
   677  0000                     _TRISC	set	3988
   678  0000                     _TRISB	set	3987
   679  0000                     _TRISA	set	3986
   680  0000                     _ADCON2	set	4032
   681  0000                     _ADCON1	set	4033
   682  0000                     _UEP0bits	set	3952
   683  0000                     _USTAT	set	3948
   684  0000                     _UIEbits	set	3945
   685  0000                     _PIR2bits	set	4001
   686  0000                     _UCON	set	3949
   687  0000                     _UIRbits	set	3944
   688  0000                     _UADDR	set	3950
   689  0000                     _UCONbits	set	3949
   690  0000                     _UIE	set	3945
   691  0000                     _UEIE	set	3947
   692  0000                     _UCFG	set	3951
   693  0000                     _UIR	set	3944
   694  0000                     _UEIR	set	3946
   695  0000                     _UEP0	set	3952
   696  0000                     _UEP1	set	3953
   697  0000                     _RC2	set	31762
   698  0000                     _RB2	set	31754
   699  0000                     _RB1	set	31753
   700  0000                     _RB0	set	31752
   701  0000                     _TRISD7	set	31919
   702  0000                     _TRISD6	set	31918
   703  0000                     _TRISD5	set	31917
   704  0000                     _TRISD4	set	31916
   705  0000                     _TRISD3	set	31915
   706  0000                     _TRISD2	set	31914
   707  0000                     _TRISD1	set	31913
   708  0000                     _TRISD0	set	31912
   709  0000                     _RESUME	set	31594
   710  0000                     _GODONE	set	32273
   711  0000                     _RB4	set	31756
   712  0000                     _RB7	set	31759
   713  0000                     _RB6	set	31758
   714  0000                     _RB5	set	31757
   715  0000                     _RB3	set	31755
   716  0000                     _RA5	set	31749
   717  0000                     _RA4	set	31748
   718  0000                     _TRISA5	set	31893
   719  0000                     _TRISA4	set	31892
   720  0000                     _RC1	set	31761
   721  0000                     _RC0	set	31760
   722  0000                     _RBPU	set	32655
   723  0000                     _SUSPND	set	31593
   724  0000                     _SE0	set	31597
   725  0000                     _PKTDIS	set	31596
   726                           
   727                           ; #config settings
   728  007FFE  00                 	db	0	; dummy byte at the end
   729  0000                     
   730                           	psect	cinit
   731  0056D0                     __pcinit:
   732                           	opt stack 0
   733  0056D0                     start_initialization:
   734                           	opt stack 0
   735  0056D0                     __initialization:
   736                           	opt stack 0
   737                           
   738                           ; Clear objects allocated to BANK1 (195 bytes)
   739  0056D0  EE01  F000         	lfsr	0,__pbssBANK1
   740  0056D4  0EC3               	movlw	195
   741  0056D6                     clear_0:
   742  0056D6  6AEE               	clrf	postinc0,c
   743  0056D8  06E8               	decf	wreg,f,c
   744  0056DA  E1FD               	bnz	clear_0
   745                           
   746                           ; Clear objects allocated to BANK0 (98 bytes)
   747  0056DC  EE00  F060         	lfsr	0,__pbssBANK0
   748  0056E0  0E62               	movlw	98
   749  0056E2                     clear_1:
   750  0056E2  6AEE               	clrf	postinc0,c
   751  0056E4  06E8               	decf	wreg,f,c
   752  0056E6  E1FD               	bnz	clear_1
   753                           
   754                           ; Clear objects allocated to COMRAM (24 bytes)
   755  0056E8  EE00  F048         	lfsr	0,__pbssCOMRAM
   756  0056EC  0E18               	movlw	24
   757  0056EE                     clear_2:
   758  0056EE  6AEE               	clrf	postinc0,c
   759  0056F0  06E8               	decf	wreg,f,c
   760  0056F2  E1FD               	bnz	clear_2
   761  0056F4                     end_of_initialization:
   762                           	opt stack 0
   763  0056F4                     __end_of__initialization:
   764                           	opt stack 0
   765  0056F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   766  0056F6  6EF8               	movwf	tblptru,c
   767  0056F8  0100               	movlb	0
   768  0056FA  EFE6  F02C         	goto	_main	;jump to C main() function
   769                           tblptru	equ	0xFF8
   770                           postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           
   773                           	psect	bssCOMRAM
   774  000048                     __pbssCOMRAM:
   775                           	opt stack 0
   776  000048                     _pBDTEntryIn:
   777                           	opt stack 0
   778  000048                     	ds	8
   779  000050                     _inPipes:
   780                           	opt stack 0
   781  000050                     	ds	6
   782  000056                     _pBDTEntryEP0OutNext:
   783                           	opt stack 0
   784  000056                     	ds	2
   785  000058                     _pBDTEntryEP0OutCurrent:
   786                           	opt stack 0
   787  000058                     	ds	2
   788  00005A                     _controlTransferState:
   789                           	opt stack 0
   790  00005A                     	ds	1
   791  00005B                     _shortPacketStatus:
   792                           	opt stack 0
   793  00005B                     	ds	1
   794  00005C                     _USBDeviceState:
   795                           	opt stack 0
   796  00005C                     	ds	1
   797  00005D                     _USTATcopy:
   798                           	opt stack 0
   799  00005D                     	ds	1
   800  00005E                     _USBAlternateInterface:
   801                           	opt stack 0
   802  00005E                     	ds	1
   803  00005F                     _USBActiveConfiguration:
   804                           	opt stack 0
   805  00005F                     	ds	1
   806                           tblptru	equ	0xFF8
   807                           postinc0	equ	0xFEE
   808                           wreg	equ	0xFE8
   809                           
   810                           	psect	bssBANK0
   811  000060                     __pbssBANK0:
   812                           	opt stack 0
   813  000060                     _joystick:
   814                           	opt stack 0
   815  000060                     	ds	30
   816  00007E                     _USBInData:
   817                           	opt stack 0
   818  00007E                     	ds	9
   819  000087                     _OutBuffer:
   820                           	opt stack 0
   821  000087                     	ds	8
   822  00008F                     _buffer:
   823                           	opt stack 0
   824  00008F                     	ds	8
   825  000097                     _outPipes:
   826                           	opt stack 0
   827  000097                     	ds	8
   828  00009F                     _pBDTEntryOut:
   829                           	opt stack 0
   830  00009F                     	ds	8
   831  0000A7                     _USBInMaxPacketSize:
   832                           	opt stack 0
   833  0000A7                     	ds	6
   834  0000AD                     USBCBSendResume@delay_count:
   835                           	opt stack 0
   836  0000AD                     	ds	2
   837  0000AF                     _lastTransmission_j2:
   838                           	opt stack 0
   839  0000AF                     	ds	2
   840  0000B1                     _lastTransmission_j1:
   841                           	opt stack 0
   842  0000B1                     	ds	2
   843  0000B3                     _lastOUTTransmission_k1:
   844                           	opt stack 0
   845  0000B3                     	ds	2
   846  0000B5                     _lastINTransmission_k1:
   847                           	opt stack 0
   848  0000B5                     	ds	2
   849  0000B7                     _pDst:
   850                           	opt stack 0
   851  0000B7                     	ds	2
   852  0000B9                     _Keyboard_out:
   853                           	opt stack 0
   854  0000B9                     	ds	1
   855  0000BA                     _BothEP0OutUOWNsSet:
   856                           	opt stack 0
   857  0000BA                     	ds	1
   858  0000BB                     _RemoteWakeup:
   859                           	opt stack 0
   860  0000BB                     	ds	1
   861  0000BC                     _active_protocol_k1:
   862                           	opt stack 0
   863  0000BC                     	ds	1
   864  0000BD                     _idle_rate_k1:
   865                           	opt stack 0
   866  0000BD                     	ds	1
   867  0000BE                     _active_protocol_j2:
   868                           	opt stack 0
   869  0000BE                     	ds	1
   870  0000BF                     _idle_rate_j2:
   871                           	opt stack 0
   872  0000BF                     	ds	1
   873  0000C0                     _active_protocol_j1:
   874                           	opt stack 0
   875  0000C0                     	ds	1
   876  0000C1                     _idle_rate_j1:
   877                           	opt stack 0
   878  0000C1                     	ds	1
   879                           tblptru	equ	0xFF8
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           
   883                           	psect	bssBANK1
   884  000100                     __pbssBANK1:
   885                           	opt stack 0
   886  000100                     _keyboard:
   887                           	opt stack 0
   888  000100                     	ds	130
   889  000182                     _rawKeyboardState:
   890                           	opt stack 0
   891  000182                     	ds	65
   892                           tblptru	equ	0xFF8
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           
   896                           	psect	cstackCOMRAM
   897  000001                     __pcstackCOMRAM:
   898                           	opt stack 0
   899  000001                     ??_USBCtrlTrfRxService:
   900  000001                     ??_USBCtrlTrfTxService:
   901  000001                     ??_USBStdGetDscHandler:
   902  000001                     ??_USBStdGetStatusHandler:
   903  000001                     ??_USBStdFeatureReqHandler:
   904  000001                     ??_initialiseJoysticks:
   905  000001                     ??_keyboardBlocking:
   906  000001                     ??_USBCBCheckOtherReq:
   907  000001                     ?_USBTransferOnePacket:
   908                           	opt stack 0
   909  000001                     ?___ftpack:
   910                           	opt stack 0
   911  000001                     ?___ftneg:
   912                           	opt stack 0
   913  000001                     ?___fttol:
   914                           	opt stack 0
   915  000001                     USBConfigureEndpoint@direction:
   916                           	opt stack 0
   917  000001                     USBTransferOnePacket@dir:
   918                           	opt stack 0
   919  000001                     initialiseKeyboard@key:
   920                           	opt stack 0
   921  000001                     readKeyboardState@currentKeyNumber:
   922                           	opt stack 0
   923  000001                     USBPrepareForNextSetupTrf@p:
   924                           	opt stack 0
   925  000001                     memset@p1:
   926                           	opt stack 0
   927  000001                     ___ftpack@arg:
   928                           	opt stack 0
   929  000001                     ___ftge@ff1:
   930                           	opt stack 0
   931  000001                     ___ftneg@f1:
   932                           	opt stack 0
   933  000001                     ___fttol@f1:
   934                           	opt stack 0
   935                           
   936                           ; 3 bytes @ 0x0
   937  000001                     	ds	1
   938  000002                     ??_USBConfigureEndpoint:
   939  000002                     readKeyboardState@input:
   940                           	opt stack 0
   941  000002                     USBStdFeatureReqHandler@pUEP:
   942                           	opt stack 0
   943  000002                     USBStdGetStatusHandler@p:
   944                           	opt stack 0
   945  000002                     USBTransferOnePacket@data:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x1
   949  000002                     	ds	1
   950  000003                     USBCtrlTrfRxService@i:
   951                           	opt stack 0
   952  000003                     readKeyboardState@row:
   953                           	opt stack 0
   954  000003                     debounceKeyboard@currentKeyNumber:
   955                           	opt stack 0
   956  000003                     USBCtrlTrfTxService@byteToSend:
   957                           	opt stack 0
   958  000003                     memset@c:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x2
   962  000003                     	ds	1
   963  000004                     USBCtrlTrfRxService@byteToRead:
   964                           	opt stack 0
   965  000004                     USBConfigureEndpoint@workaround:
   966                           	opt stack 0
   967  000004                     USBTransferOnePacket@len:
   968                           	opt stack 0
   969  000004                     readKeyboardState@column:
   970                           	opt stack 0
   971  000004                     keyboardBlocking@adjacentRowCount:
   972                           	opt stack 0
   973  000004                     ___ftpack@exp:
   974                           	opt stack 0
   975  000004                     USBStdFeatureReqHandler@p:
   976                           	opt stack 0
   977  000004                     ___ftge@ff2:
   978                           	opt stack 0
   979                           
   980                           ; 3 bytes @ 0x3
   981  000004                     	ds	1
   982  000005                     ??___fttol:
   983  000005                     USBCtrlTrfInHandler@lastDTS:
   984                           	opt stack 0
   985  000005                     USBConfigureEndpoint@EPNum:
   986                           	opt stack 0
   987  000005                     USBTransferOnePacket@ep:
   988                           	opt stack 0
   989  000005                     keyboardBlocking@row:
   990                           	opt stack 0
   991  000005                     ___ftpack@sign:
   992                           	opt stack 0
   993  000005                     initialiseJoysticks@loop:
   994                           	opt stack 0
   995  000005                     memset@n:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x4
   999  000005                     	ds	1
  1000  000006                     ??___ftpack:
  1001  000006                     keyboardBlocking@currentKeyNumber:
  1002                           	opt stack 0
  1003  000006                     USBConfigureEndpoint@handle:
  1004                           	opt stack 0
  1005  000006                     USBTransferOnePacket@handle:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x5
  1009  000006                     	ds	1
  1010  000007                     ??___ftge:
  1011  000007                     keyboardBlocking@column:
  1012                           	opt stack 0
  1013  000007                     memset@p:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x6
  1017  000007                     	ds	1
  1018  000008                     ??_processJoystick_j1:
  1019  000008                     ??_processJoystick_j2:
  1020  000008                     ??_processKeyboard:
  1021  000008                     USBEnableEndpoint@options:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x7
  1025  000008                     	ds	1
  1026  000009                     ?___awtoft:
  1027                           	opt stack 0
  1028  000009                     USBDeviceInit@i:
  1029                           	opt stack 0
  1030  000009                     USBEnableEndpoint@p:
  1031                           	opt stack 0
  1032  000009                     _processJoystick_j1$3064:
  1033                           	opt stack 0
  1034  000009                     _processJoystick_j2$3124:
  1035                           	opt stack 0
  1036  000009                     ___awtoft@c:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x8
  1040  000009                     	ds	1
  1041  00000A                     ___fttol@sign1:
  1042                           	opt stack 0
  1043  00000A                     processKeyboard@keyArray:
  1044                           	opt stack 0
  1045                           
  1046                           ; 12 bytes @ 0x9
  1047  00000A                     	ds	1
  1048  00000B                     USBEnableEndpoint@ep:
  1049                           	opt stack 0
  1050  00000B                     ___fttol@lval:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0xA
  1054  00000B                     	ds	1
  1055  00000C                     ___awtoft@sign:
  1056                           	opt stack 0
  1057  00000C                     USER_USB_CALLBACK_EVENT_HANDLER@event:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0xB
  1061  00000C                     	ds	1
  1062  00000D                     ?___ftdiv:
  1063                           	opt stack 0
  1064  00000D                     ___ftdiv@f1:
  1065                           	opt stack 0
  1066                           
  1067                           ; 3 bytes @ 0xC
  1068  00000D                     	ds	1
  1069  00000E                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0xD
  1073  00000E                     	ds	1
  1074  00000F                     ___fttol@exp1:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0xE
  1078  00000F                     	ds	1
  1079  000010                     USER_USB_CALLBACK_EVENT_HANDLER@size:
  1080                           	opt stack 0
  1081  000010                     ___ftdiv@f2:
  1082                           	opt stack 0
  1083                           
  1084                           ; 3 bytes @ 0xF
  1085  000010                     	ds	2
  1086  000012                     ??_USER_USB_CALLBACK_EVENT_HANDLER:
  1087                           
  1088                           ; 1 bytes @ 0x11
  1089  000012                     	ds	1
  1090  000013                     ??___ftdiv:
  1091                           
  1092                           ; 1 bytes @ 0x12
  1093  000013                     	ds	1
  1094  000014                     ??_USBCtrlEPService:
  1095  000014                     
  1096                           ; 1 bytes @ 0x13
  1097  000014                     	ds	2
  1098  000016                     USBCtrlEPService@setup_cnt:
  1099                           	opt stack 0
  1100  000016                     ___ftdiv@cntr:
  1101                           	opt stack 0
  1102  000016                     _processKeyboard$3496:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x15
  1106  000016                     	ds	1
  1107  000017                     ??_USBDeviceTasks:
  1108  000017                     ___ftdiv@f3:
  1109                           	opt stack 0
  1110                           
  1111                           ; 3 bytes @ 0x16
  1112  000017                     	ds	1
  1113  000018                     USBDeviceTasks@i:
  1114                           	opt stack 0
  1115  000018                     processKeyboard@modifier:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x17
  1119  000018                     	ds	2
  1120  00001A                     ___ftdiv@exp:
  1121                           	opt stack 0
  1122  00001A                     processKeyboard@keysDetected:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x19
  1126  00001A                     	ds	1
  1127  00001B                     ___ftdiv@sign:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x1A
  1131  00001B                     	ds	1
  1132  00001C                     ?___ftmul:
  1133                           	opt stack 0
  1134  00001C                     processKeyboard@key:
  1135                           	opt stack 0
  1136  00001C                     ___ftmul@f1:
  1137                           	opt stack 0
  1138                           
  1139                           ; 3 bytes @ 0x1B
  1140  00001C                     	ds	3
  1141  00001F                     ___ftmul@f2:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x1E
  1145  00001F                     	ds	3
  1146  000022                     ??___ftmul:
  1147                           
  1148                           ; 1 bytes @ 0x21
  1149  000022                     	ds	3
  1150  000025                     ___ftmul@exp:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x24
  1154  000025                     	ds	1
  1155  000026                     ___ftmul@f3_as_product:
  1156                           	opt stack 0
  1157                           
  1158                           ; 3 bytes @ 0x25
  1159  000026                     	ds	3
  1160  000029                     ___ftmul@cntr:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x28
  1164  000029                     	ds	1
  1165  00002A                     ___ftmul@sign:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x29
  1169  00002A                     	ds	1
  1170  00002B                     ?___ftadd:
  1171                           	opt stack 0
  1172  00002B                     ___ftadd@f1:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0x2A
  1176  00002B                     	ds	3
  1177  00002E                     ___ftadd@f2:
  1178                           	opt stack 0
  1179                           
  1180                           ; 3 bytes @ 0x2D
  1181  00002E                     	ds	3
  1182  000031                     ??___ftadd:
  1183                           
  1184                           ; 1 bytes @ 0x30
  1185  000031                     	ds	3
  1186  000034                     ___ftadd@sign:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x33
  1190  000034                     	ds	1
  1191  000035                     ___ftadd@exp2:
  1192                           	opt stack 0
  1193                           
  1194                           ; 1 bytes @ 0x34
  1195  000035                     	ds	1
  1196  000036                     ___ftadd@exp1:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x35
  1200  000036                     	ds	1
  1201  000037                     ?_readADC:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x36
  1205  000037                     	ds	2
  1206  000039                     _readADC$4124:
  1207                           	opt stack 0
  1208                           
  1209                           ; 3 bytes @ 0x38
  1210  000039                     	ds	3
  1211  00003C                     _readADC$4125:
  1212                           	opt stack 0
  1213                           
  1214                           ; 3 bytes @ 0x3B
  1215  00003C                     	ds	3
  1216  00003F                     readADC@ADCnumber:
  1217                           	opt stack 0
  1218                           
  1219                           ; 1 bytes @ 0x3E
  1220  00003F                     	ds	1
  1221  000040                     readADC@adcResult:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x3F
  1225  000040                     	ds	2
  1226  000042                     readADC@calc:
  1227                           	opt stack 0
  1228                           
  1229                           ; 3 bytes @ 0x41
  1230  000042                     	ds	3
  1231  000045                     ??_readJoystickState:
  1232                           
  1233                           ; 1 bytes @ 0x44
  1234  000045                     	ds	2
  1235  000047                     readJoystickState@port:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x46
  1239  000047                     	ds	1
  1240  000048                     tblptru	equ	0xFF8
  1241                           postinc0	equ	0xFEE
  1242                           wreg	equ	0xFE8
  1243                           
  1244                           ; 1 bytes @ 0x47
  1245 ;;
  1246 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1247 ;;
  1248 ;; *************** function _main *****************
  1249 ;; Defined at:
  1250 ;;		line 66 in file "../main.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;		None
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;		None
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  1264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  1265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  1266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  1267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  1268 ;;Total ram usage:        0 bytes
  1269 ;; Hardware stack levels required when called:    9
  1270 ;; This function calls:
  1271 ;;		_USBDeviceInit
  1272 ;;		_USBDeviceTasks
  1273 ;;		_debounceKeyboard
  1274 ;;		_initialise
  1275 ;;		_keyboardBlocking
  1276 ;;		_processJoystick_j1
  1277 ;;		_processJoystick_j2
  1278 ;;		_processKeyboard
  1279 ;;		_readJoystickState
  1280 ;;		_readKeyboardState
  1281 ;; This function is called by:
  1282 ;;		Startup code after reset
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text0
  1287  0059CC                     __ptext0:
  1288                           	opt stack 0
  1289  0059CC                     _main:
  1290                           	opt stack 22
  1291                           
  1292                           ;main.c: 71: ADCON1 = 0b00001110;
  1293                           
  1294                           ;incstack = 0
  1295  0059CC  0E0E               	movlw	14
  1296  0059CE  6EC1               	movwf	4033,c	;volatile
  1297                           
  1298                           ;main.c: 74: ADCON2 = 0b10110110;
  1299  0059D0  0EB6               	movlw	182
  1300  0059D2  6EC0               	movwf	4032,c	;volatile
  1301                           
  1302                           ;main.c: 77: TRISA = 0b00111111;
  1303  0059D4  0E3F               	movlw	63
  1304  0059D6  6E92               	movwf	3986,c	;volatile
  1305                           
  1306                           ;main.c: 78: TRISB = 0b11111111;
  1307  0059D8  6893               	setf	3987,c	;volatile
  1308                           
  1309                           ;main.c: 79: TRISC = 0b01000100;
  1310  0059DA  0E44               	movlw	68
  1311  0059DC  6E94               	movwf	3988,c	;volatile
  1312                           
  1313                           ;main.c: 80: TRISD = 0b00000000;
  1314  0059DE  0E00               	movlw	0
  1315  0059E0  6E95               	movwf	3989,c	;volatile
  1316                           
  1317                           ;main.c: 81: TRISE = 0b00000000;
  1318  0059E2  0E00               	movlw	0
  1319  0059E4  6E96               	movwf	3990,c	;volatile
  1320                           
  1321                           ;main.c: 84: PORTA = 0b00000000;
  1322  0059E6  0E00               	movlw	0
  1323  0059E8  6E80               	movwf	3968,c	;volatile
  1324                           
  1325                           ;main.c: 85: PORTB = 0b00000000;
  1326  0059EA  0E00               	movlw	0
  1327  0059EC  6E81               	movwf	3969,c	;volatile
  1328                           
  1329                           ;main.c: 86: PORTC = 0b00000000;
  1330  0059EE  0E00               	movlw	0
  1331  0059F0  6E82               	movwf	3970,c	;volatile
  1332                           
  1333                           ;main.c: 87: PORTD = 0b00000000;
  1334  0059F2  0E00               	movlw	0
  1335  0059F4  6E83               	movwf	3971,c	;volatile
  1336                           
  1337                           ;main.c: 88: PORTE = 0b00000000;
  1338  0059F6  0E00               	movlw	0
  1339  0059F8  6E84               	movwf	3972,c	;volatile
  1340                           
  1341                           ;main.c: 91: RBPU = 0;
  1342  0059FA  9EF1               	bcf	intcon2,7,c	;volatile
  1343                           
  1344                           ;main.c: 94: initialise();
  1345  0059FC  EC14  F02B         	call	_initialise	;wreg free
  1346                           
  1347                           ;main.c: 95: USBDeviceInit();
  1348  005A00  EC33  F02E         	call	_USBDeviceInit	;wreg free
  1349  005A04                     
  1350                           ;main.c: 98: {
  1351                           ;main.c: 100: USBDeviceTasks();
  1352  005A04  EC9B  F036         	call	_USBDeviceTasks	;wreg free
  1353                           
  1354                           ;main.c: 104: if(USBDeviceState == CONFIGURED_STATE)
  1355  005A08  0E20               	movlw	32
  1356  005A0A  185C               	xorwf	_USBDeviceState,w,c
  1357  005A0C  A4D8               	btfss	status,2,c
  1358  005A0E  D003               	goto	l559
  1359                           
  1360                           ;main.c: 105: {
  1361                           ;main.c: 107: RC0 = 0;
  1362  005A10  9082               	bcf	3970,0,c	;volatile
  1363                           
  1364                           ;main.c: 108: RC1 = 1;
  1365  005A12  8282               	bsf	3970,1,c	;volatile
  1366                           
  1367                           ;main.c: 109: }
  1368  005A14  D002               	goto	l560
  1369  005A16                     l559:
  1370                           
  1371                           ;main.c: 110: else
  1372                           ;main.c: 111: {
  1373                           ;main.c: 113: RC0 = 1;
  1374  005A16  8082               	bsf	3970,0,c	;volatile
  1375                           
  1376                           ;main.c: 114: RC1 = 0;
  1377  005A18  9282               	bcf	3970,1,c	;volatile
  1378  005A1A                     l560:
  1379                           
  1380                           ;main.c: 115: }
  1381                           ;main.c: 118: if((USBDeviceState < CONFIGURED_STATE)||(SUSPND==1))
  1382  005A1A  0E1F               	movlw	31
  1383  005A1C  645C               	cpfsgt	_USBDeviceState,c
  1384  005A1E  D7F2               	goto	l558
  1385  005A20  B26D               	btfsc	3949,1,c	;volatile
  1386  005A22  D7F0               	goto	l558
  1387                           
  1388                           ;main.c: 122: else
  1389                           ;main.c: 123: {
  1390                           ;main.c: 125: readJoystickState();
  1391                           
  1392                           ;main.c: 119: {
  1393                           ;main.c: 121: }
  1394  005A24  EC9B  F03B         	call	_readJoystickState	;wreg free
  1395                           
  1396                           ;main.c: 128: readKeyboardState();
  1397  005A28  EC84  F038         	call	_readKeyboardState	;wreg free
  1398                           
  1399                           ;main.c: 134: keyboardBlocking();
  1400  005A2C  EC6B  F02F         	call	_keyboardBlocking	;wreg free
  1401                           
  1402                           ;main.c: 137: debounceKeyboard();
  1403  005A30  EC33  F037         	call	_debounceKeyboard	;wreg free
  1404                           
  1405                           ;main.c: 140: processJoystick_j1();
  1406  005A34  ECC8  F032         	call	_processJoystick_j1	;wreg free
  1407                           
  1408                           ;main.c: 141: processJoystick_j2();
  1409  005A38  EC3C  F033         	call	_processJoystick_j2	;wreg free
  1410                           
  1411                           ;main.c: 144: processKeyboard();
  1412  005A3C  ECD7  F037         	call	_processKeyboard	;wreg free
  1413  005A40  D7E1               	goto	l558
  1414  005A42                     __end_of_main:
  1415                           	opt stack 0
  1416                           tblptru	equ	0xFF8
  1417                           intcon2	equ	0xFF1
  1418                           postinc0	equ	0xFEE
  1419                           wreg	equ	0xFE8
  1420                           status	equ	0xFD8
  1421                           
  1422 ;; *************** function _readKeyboardState *****************
  1423 ;; Defined at:
  1424 ;;		line 73 in file "../keyboard.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;		None
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;  column          1    3[COMRAM] unsigned char 
  1429 ;;  row             1    2[COMRAM] unsigned char 
  1430 ;;  input           1    1[COMRAM] unsigned char 
  1431 ;;  currentKeyNu    1    0[COMRAM] unsigned char 
  1432 ;; Return value:  Size  Location     Type
  1433 ;;                  1    wreg      void 
  1434 ;; Registers used:
  1435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1436 ;; Tracked objects:
  1437 ;;		On entry : 0/0
  1438 ;;		On exit  : 0/0
  1439 ;;		Unchanged: 0/0
  1440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  1441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  1442 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0
  1443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  1444 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0
  1445 ;;Total ram usage:        4 bytes
  1446 ;; Hardware stack levels used:    1
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_main
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text1
  1455  007108                     __ptext1:
  1456                           	opt stack 0
  1457  007108                     _readKeyboardState:
  1458                           	opt stack 30
  1459                           
  1460                           ;keyboard.c: 75: unsigned char row;
  1461                           ;keyboard.c: 76: unsigned char column;
  1462                           ;keyboard.c: 77: unsigned char input;
  1463                           ;keyboard.c: 78: unsigned char currentKeyNumber;
  1464                           ;keyboard.c: 84: for (column = 0; column < 8; column++)
  1465                           
  1466                           ;incstack = 0
  1467  007108  0E00               	movlw	0
  1468  00710A  6E04               	movwf	readKeyboardState@column,c
  1469  00710C                     l4710:
  1470  00710C  0E07               	movlw	7
  1471  00710E  6404               	cpfsgt	readKeyboardState@column,c
  1472  007110  D001               	goto	l848
  1473  007112  D09D               	goto	u5310
  1474  007114                     l848:
  1475                           
  1476                           ;keyboard.c: 85: {
  1477                           ;keyboard.c: 87: if (column == 0) TRISD0 = 0; else TRISD0 = 1;
  1478  007114  5004               	movf	readKeyboardState@column,w,c
  1479  007116  A4D8               	btfss	status,2,c
  1480  007118  D002               	goto	l850
  1481  00711A  9095               	bcf	3989,0,c	;volatile
  1482  00711C  D001               	goto	l851
  1483  00711E                     l850:
  1484  00711E  8095               	bsf	3989,0,c	;volatile
  1485  007120                     l851:
  1486                           
  1487                           ;keyboard.c: 88: if (column == 1) TRISD1 = 0; else TRISD1 = 1;
  1488  007120  0404               	decf	readKeyboardState@column,w,c
  1489  007122  A4D8               	btfss	status,2,c
  1490  007124  D002               	goto	l852
  1491  007126  9295               	bcf	3989,1,c	;volatile
  1492  007128  D001               	goto	l853
  1493  00712A                     l852:
  1494  00712A  8295               	bsf	3989,1,c	;volatile
  1495  00712C                     l853:
  1496                           
  1497                           ;keyboard.c: 89: if (column == 2) TRISD2 = 0; else TRISD2 = 1;
  1498  00712C  0E02               	movlw	2
  1499  00712E  1804               	xorwf	readKeyboardState@column,w,c
  1500  007130  A4D8               	btfss	status,2,c
  1501  007132  D002               	goto	l854
  1502  007134  9495               	bcf	3989,2,c	;volatile
  1503  007136  D001               	goto	l855
  1504  007138                     l854:
  1505  007138  8495               	bsf	3989,2,c	;volatile
  1506  00713A                     l855:
  1507                           
  1508                           ;keyboard.c: 90: if (column == 3) TRISD3 = 0; else TRISD3 = 1;
  1509  00713A  0E03               	movlw	3
  1510  00713C  1804               	xorwf	readKeyboardState@column,w,c
  1511  00713E  A4D8               	btfss	status,2,c
  1512  007140  D002               	goto	l856
  1513  007142  9695               	bcf	3989,3,c	;volatile
  1514  007144  D001               	goto	l857
  1515  007146                     l856:
  1516  007146  8695               	bsf	3989,3,c	;volatile
  1517  007148                     l857:
  1518                           
  1519                           ;keyboard.c: 91: if (column == 4) TRISD4 = 0; else TRISD4 = 1;
  1520  007148  0E04               	movlw	4
  1521  00714A  1804               	xorwf	readKeyboardState@column,w,c
  1522  00714C  A4D8               	btfss	status,2,c
  1523  00714E  D002               	goto	l858
  1524  007150  9895               	bcf	3989,4,c	;volatile
  1525  007152  D001               	goto	l859
  1526  007154                     l858:
  1527  007154  8895               	bsf	3989,4,c	;volatile
  1528  007156                     l859:
  1529                           
  1530                           ;keyboard.c: 92: if (column == 5) TRISD5 = 0; else TRISD5 = 1;
  1531  007156  0E05               	movlw	5
  1532  007158  1804               	xorwf	readKeyboardState@column,w,c
  1533  00715A  A4D8               	btfss	status,2,c
  1534  00715C  D002               	goto	l860
  1535  00715E  9A95               	bcf	3989,5,c	;volatile
  1536  007160  D001               	goto	l861
  1537  007162                     l860:
  1538  007162  8A95               	bsf	3989,5,c	;volatile
  1539  007164                     l861:
  1540                           
  1541                           ;keyboard.c: 93: if (column == 6) TRISD6 = 0; else TRISD6 = 1;
  1542  007164  0E06               	movlw	6
  1543  007166  1804               	xorwf	readKeyboardState@column,w,c
  1544  007168  A4D8               	btfss	status,2,c
  1545  00716A  D002               	goto	l862
  1546  00716C  9C95               	bcf	3989,6,c	;volatile
  1547  00716E  D001               	goto	l863
  1548  007170                     l862:
  1549  007170  8C95               	bsf	3989,6,c	;volatile
  1550  007172                     l863:
  1551                           
  1552                           ;keyboard.c: 94: if (column == 7) TRISD7 = 0; else TRISD7 = 1;
  1553  007172  0E07               	movlw	7
  1554  007174  1804               	xorwf	readKeyboardState@column,w,c
  1555  007176  A4D8               	btfss	status,2,c
  1556  007178  D002               	goto	l864
  1557  00717A  9E95               	bcf	3989,7,c	;volatile
  1558  00717C  D001               	goto	l865
  1559  00717E                     l864:
  1560  00717E  8E95               	bsf	3989,7,c	;volatile
  1561  007180                     l865:
  1562                           
  1563                           ;keyboard.c: 97: _delay((unsigned long)((2)*(48000000/4000000.0)));
  1564  007180  0E08               	movlw	8
  1565  007182                     u5927:
  1566  007182  2EE8               	decfsz	wreg,f,c
  1567  007184  D7FE               	bra	u5927
  1568                           
  1569                           ;keyboard.c: 99: for (row = 0; row < 8; row++)
  1570  007186  0E00               	movlw	0
  1571  007188  6E03               	movwf	readKeyboardState@row,c
  1572  00718A                     l4750:
  1573  00718A  0E07               	movlw	7
  1574  00718C  6403               	cpfsgt	readKeyboardState@row,c
  1575  00718E  D001               	goto	l866
  1576  007190  D05C               	goto	u5300
  1577  007192                     l866:
  1578                           
  1579                           ;keyboard.c: 100: {
  1580                           ;keyboard.c: 102: if (row == 0) input = RB0;
  1581  007192  5003               	movf	readKeyboardState@row,w,c
  1582  007194  A4D8               	btfss	status,2,c
  1583  007196  D004               	goto	l868
  1584  007198  0E00               	movlw	0
  1585  00719A  B081               	btfsc	3969,0,c	;volatile
  1586  00719C  0E01               	movlw	1
  1587  00719E  6E02               	movwf	readKeyboardState@input,c
  1588  0071A0                     l868:
  1589                           
  1590                           ;keyboard.c: 103: if (row == 1) input = RB1;
  1591  0071A0  0403               	decf	readKeyboardState@row,w,c
  1592  0071A2  A4D8               	btfss	status,2,c
  1593  0071A4  D004               	goto	l869
  1594  0071A6  0E00               	movlw	0
  1595  0071A8  B281               	btfsc	3969,1,c	;volatile
  1596  0071AA  0E01               	movlw	1
  1597  0071AC  6E02               	movwf	readKeyboardState@input,c
  1598  0071AE                     l869:
  1599                           
  1600                           ;keyboard.c: 104: if (row == 2) input = RB2;
  1601  0071AE  0E02               	movlw	2
  1602  0071B0  1803               	xorwf	readKeyboardState@row,w,c
  1603  0071B2  A4D8               	btfss	status,2,c
  1604  0071B4  D004               	goto	l870
  1605  0071B6  0E00               	movlw	0
  1606  0071B8  B481               	btfsc	3969,2,c	;volatile
  1607  0071BA  0E01               	movlw	1
  1608  0071BC  6E02               	movwf	readKeyboardState@input,c
  1609  0071BE                     l870:
  1610                           
  1611                           ;keyboard.c: 105: if (row == 3) input = RB3;
  1612  0071BE  0E03               	movlw	3
  1613  0071C0  1803               	xorwf	readKeyboardState@row,w,c
  1614  0071C2  A4D8               	btfss	status,2,c
  1615  0071C4  D004               	goto	l871
  1616  0071C6  0E00               	movlw	0
  1617  0071C8  B681               	btfsc	3969,3,c	;volatile
  1618  0071CA  0E01               	movlw	1
  1619  0071CC  6E02               	movwf	readKeyboardState@input,c
  1620  0071CE                     l871:
  1621                           
  1622                           ;keyboard.c: 106: if (row == 4) input = RB4;
  1623  0071CE  0E04               	movlw	4
  1624  0071D0  1803               	xorwf	readKeyboardState@row,w,c
  1625  0071D2  A4D8               	btfss	status,2,c
  1626  0071D4  D004               	goto	l872
  1627  0071D6  0E00               	movlw	0
  1628  0071D8  B881               	btfsc	3969,4,c	;volatile
  1629  0071DA  0E01               	movlw	1
  1630  0071DC  6E02               	movwf	readKeyboardState@input,c
  1631  0071DE                     l872:
  1632                           
  1633                           ;keyboard.c: 107: if (row == 5) input = RB5;
  1634  0071DE  0E05               	movlw	5
  1635  0071E0  1803               	xorwf	readKeyboardState@row,w,c
  1636  0071E2  A4D8               	btfss	status,2,c
  1637  0071E4  D004               	goto	l873
  1638  0071E6  0E00               	movlw	0
  1639  0071E8  BA81               	btfsc	3969,5,c	;volatile
  1640  0071EA  0E01               	movlw	1
  1641  0071EC  6E02               	movwf	readKeyboardState@input,c
  1642  0071EE                     l873:
  1643                           
  1644                           ;keyboard.c: 108: if (row == 6) input = RB6;
  1645  0071EE  0E06               	movlw	6
  1646  0071F0  1803               	xorwf	readKeyboardState@row,w,c
  1647  0071F2  A4D8               	btfss	status,2,c
  1648  0071F4  D004               	goto	l874
  1649  0071F6  0E00               	movlw	0
  1650  0071F8  BC81               	btfsc	3969,6,c	;volatile
  1651  0071FA  0E01               	movlw	1
  1652  0071FC  6E02               	movwf	readKeyboardState@input,c
  1653  0071FE                     l874:
  1654                           
  1655                           ;keyboard.c: 109: if (row == 7) input = RB7;
  1656  0071FE  0E07               	movlw	7
  1657  007200  1803               	xorwf	readKeyboardState@row,w,c
  1658  007202  A4D8               	btfss	status,2,c
  1659  007204  D004               	goto	l875
  1660  007206  0E00               	movlw	0
  1661  007208  BE81               	btfsc	3969,7,c	;volatile
  1662  00720A  0E01               	movlw	1
  1663  00720C  6E02               	movwf	readKeyboardState@input,c
  1664  00720E                     l875:
  1665                           
  1666                           ;keyboard.c: 112: currentKeyNumber = (column * 8) + row;
  1667  00720E  5004               	movf	readKeyboardState@column,w,c
  1668  007210  0D08               	mullw	8
  1669  007212  50F3               	movf	prodl,w,c
  1670  007214  2403               	addwf	readKeyboardState@row,w,c
  1671  007216  6E01               	movwf	readKeyboardState@currentKeyNumber,c
  1672                           
  1673                           ;keyboard.c: 115: if (input == 0) rawKeyboardState[currentKeyNumber] = 1;
  1674  007218  5002               	movf	readKeyboardState@input,w,c
  1675  00721A  A4D8               	btfss	status,2,c
  1676  00721C  D00A               	goto	l876
  1677  00721E  5001               	movf	readKeyboardState@currentKeyNumber,w,c
  1678  007220  0D01               	mullw	1
  1679  007222  0E82               	movlw	low _rawKeyboardState
  1680  007224  24F3               	addwf	prodl,w,c
  1681  007226  6ED9               	movwf	fsr2l,c
  1682  007228  0E01               	movlw	high _rawKeyboardState
  1683  00722A  20F4               	addwfc	prodh,w,c
  1684  00722C  6EDA               	movwf	fsr2h,c
  1685  00722E  0E01               	movlw	1
  1686  007230  D009               	goto	L1
  1687  007232                     l876:
  1688                           
  1689                           ;keyboard.c: 116: else rawKeyboardState[currentKeyNumber] = 0;
  1690  007232  5001               	movf	readKeyboardState@currentKeyNumber,w,c
  1691  007234  0D01               	mullw	1
  1692  007236  0E82               	movlw	low _rawKeyboardState
  1693  007238  24F3               	addwf	prodl,w,c
  1694  00723A  6ED9               	movwf	fsr2l,c
  1695  00723C  0E01               	movlw	high _rawKeyboardState
  1696  00723E  20F4               	addwfc	prodh,w,c
  1697  007240  6EDA               	movwf	fsr2h,c
  1698  007242  0E00               	movlw	0
  1699  007244                     L1:
  1700  007244  6EDF               	movwf	indf2,c
  1701  007246  2A03               	incf	readKeyboardState@row,f,c
  1702  007248  D7A0               	goto	l4750
  1703  00724A                     u5300:
  1704  00724A  2A04               	incf	readKeyboardState@column,f,c
  1705  00724C  D75F               	goto	l4710
  1706  00724E                     u5310:
  1707                           
  1708                           ;keyboard.c: 117: }
  1709                           ;keyboard.c: 118: }
  1710                           ;keyboard.c: 121: if (RC2 == 0) rawKeyboardState[64] = 1; else rawKeyboardState[64] = 0;
  1711  00724E  B482               	btfsc	3970,2,c	;volatile
  1712  007250  D004               	goto	l878
  1713  007252  0E01               	movlw	1
  1714  007254  0101               	movlb	1	; () banked
  1715  007256  6FC2               	movwf	(_rawKeyboardState+64)& (0+255),b
  1716  007258  0012               	return	
  1717  00725A                     l878:
  1718                           
  1719                           ; BSR set to: 1
  1720  00725A  0E00               	movlw	0
  1721  00725C  0101               	movlb	1	; () banked
  1722  00725E  6FC2               	movwf	(_rawKeyboardState+64)& (0+255),b
  1723  007260  0012               	return	
  1724  007262                     __end_of_readKeyboardState:
  1725                           	opt stack 0
  1726                           tblptru	equ	0xFF8
  1727                           prodh	equ	0xFF4
  1728                           prodl	equ	0xFF3
  1729                           intcon2	equ	0xFF1
  1730                           postinc0	equ	0xFEE
  1731                           wreg	equ	0xFE8
  1732                           indf2	equ	0xFDF
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _readJoystickState *****************
  1738 ;; Defined at:
  1739 ;;		line 67 in file "../joystick.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  port            1   70[COMRAM] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  1754 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0
  1755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0
  1756 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0
  1757 ;;Total ram usage:        3 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    3
  1760 ;; This function calls:
  1761 ;;		_readADC
  1762 ;; This function is called by:
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text2
  1768  007736                     __ptext2:
  1769                           	opt stack 0
  1770  007736                     _readJoystickState:
  1771                           	opt stack 27
  1772                           
  1773                           ;joystick.c: 69: unsigned char port;
  1774                           ;joystick.c: 71: for (port = 0; port < 2; port++)
  1775                           
  1776                           ; BSR set to: 1
  1777                           ;incstack = 0
  1778  007736  0E00               	movlw	0
  1779  007738  6E47               	movwf	readJoystickState@port,c
  1780  00773A                     l4564:
  1781  00773A  0E01               	movlw	1
  1782  00773C  6447               	cpfsgt	readJoystickState@port,c
  1783  00773E  D001               	goto	l617
  1784  007740  D30C               	goto	u5080
  1785  007742                     l617:
  1786                           
  1787                           ;joystick.c: 72: {
  1788                           ;joystick.c: 79: if (port == 0)
  1789  007742  5047               	movf	readJoystickState@port,w,c
  1790  007744  A4D8               	btfss	status,2,c
  1791  007746  D008               	goto	l619
  1792                           
  1793                           ;joystick.c: 80: {
  1794                           ;joystick.c: 81: TRISA4 = 0;
  1795  007748  9892               	bcf	3986,4,c	;volatile
  1796                           
  1797                           ;joystick.c: 82: TRISA5 = 1;
  1798  00774A  8A92               	bsf	3986,5,c	;volatile
  1799                           
  1800                           ;joystick.c: 83: RA4 = 0;
  1801  00774C  9880               	bcf	3968,4,c	;volatile
  1802                           
  1803                           ;joystick.c: 84: RA5 = 0;
  1804  00774E  9A80               	bcf	3968,5,c	;volatile
  1805                           
  1806                           ;joystick.c: 85: _delay((unsigned long)((2)*(48000000/4000000.0)));
  1807  007750  0E08               	movlw	8
  1808  007752                     u5937:
  1809  007752  2EE8               	decfsz	wreg,f,c
  1810  007754  D7FE               	bra	u5937
  1811                           
  1812                           ;joystick.c: 87: }
  1813  007756  D007               	goto	l620
  1814  007758                     l619:
  1815                           
  1816                           ;joystick.c: 88: else
  1817                           ;joystick.c: 89: {
  1818                           ;joystick.c: 90: TRISA4 = 1;
  1819  007758  8892               	bsf	3986,4,c	;volatile
  1820                           
  1821                           ;joystick.c: 91: TRISA5 = 0;
  1822  00775A  9A92               	bcf	3986,5,c	;volatile
  1823                           
  1824                           ;joystick.c: 92: RA4 = 0;
  1825  00775C  9880               	bcf	3968,4,c	;volatile
  1826                           
  1827                           ;joystick.c: 93: RA5 = 0;
  1828  00775E  9A80               	bcf	3968,5,c	;volatile
  1829                           
  1830                           ;joystick.c: 94: _delay((unsigned long)((2)*(48000000/4000000.0)));
  1831  007760  0E08               	movlw	8
  1832  007762                     u5947:
  1833  007762  2EE8               	decfsz	wreg,f,c
  1834  007764  D7FE               	bra	u5947
  1835  007766                     l620:
  1836                           
  1837                           ;joystick.c: 95: }
  1838                           ;joystick.c: 98: if (RB3 == 0 && joystick[port].joystickSwitch[0].state == 0)
  1839  007766  B681               	btfsc	3969,3,c	;volatile
  1840  007768  D032               	goto	l623
  1841  00776A  5047               	movf	readJoystickState@port,w,c
  1842  00776C  0D0F               	mullw	15
  1843  00776E  0E60               	movlw	low _joystick
  1844  007770  24F3               	addwf	prodl,w,c
  1845  007772  6ED9               	movwf	fsr2l,c
  1846  007774  0E00               	movlw	high _joystick
  1847  007776  20F4               	addwfc	prodh,w,c
  1848  007778  6EDA               	movwf	fsr2h,c
  1849  00777A  50DF               	movf	indf2,w,c
  1850  00777C  A4D8               	btfss	status,2,c
  1851  00777E  D027               	goto	l623
  1852                           
  1853                           ;joystick.c: 99: if (joystick[port].joystickSwitch[0].debounceCount > 5)
  1854  007780  5047               	movf	readJoystickState@port,w,c
  1855  007782  0D0F               	mullw	15
  1856  007784  0E01               	movlw	1
  1857  007786  26F3               	addwf	prodl,f,c
  1858  007788  0E00               	movlw	0
  1859  00778A  22F4               	addwfc	prodh,f,c
  1860  00778C  0E60               	movlw	low _joystick
  1861  00778E  24F3               	addwf	prodl,w,c
  1862  007790  6ED9               	movwf	fsr2l,c
  1863  007792  0E00               	movlw	high _joystick
  1864  007794  20F4               	addwfc	prodh,w,c
  1865  007796  6EDA               	movwf	fsr2h,c
  1866  007798  0E05               	movlw	5
  1867  00779A  64DF               	cpfsgt	indf2,c
  1868  00779C  D00B               	goto	l622
  1869                           
  1870                           ;joystick.c: 100: joystick[port].joystickSwitch[0].state = 1;
  1871  00779E  5047               	movf	readJoystickState@port,w,c
  1872  0077A0  0D0F               	mullw	15
  1873  0077A2  0E60               	movlw	low _joystick
  1874  0077A4  24F3               	addwf	prodl,w,c
  1875  0077A6  6ED9               	movwf	fsr2l,c
  1876  0077A8  0E00               	movlw	high _joystick
  1877  0077AA  20F4               	addwfc	prodh,w,c
  1878  0077AC  6EDA               	movwf	fsr2h,c
  1879  0077AE  0E01               	movlw	1
  1880  0077B0  6EDF               	movwf	indf2,c
  1881  0077B2  D00D               	goto	l623
  1882  0077B4                     l622:
  1883                           
  1884                           ;joystick.c: 101: else joystick[port].joystickSwitch[0].debounceCount++;
  1885  0077B4  5047               	movf	readJoystickState@port,w,c
  1886  0077B6  0D0F               	mullw	15
  1887  0077B8  0E01               	movlw	1
  1888  0077BA  26F3               	addwf	prodl,f,c
  1889  0077BC  0E00               	movlw	0
  1890  0077BE  22F4               	addwfc	prodh,f,c
  1891  0077C0  0E60               	movlw	low _joystick
  1892  0077C2  24F3               	addwf	prodl,w,c
  1893  0077C4  6ED9               	movwf	fsr2l,c
  1894  0077C6  0E00               	movlw	high _joystick
  1895  0077C8  20F4               	addwfc	prodh,w,c
  1896  0077CA  6EDA               	movwf	fsr2h,c
  1897  0077CC  2ADF               	incf	indf2,f,c
  1898  0077CE                     l623:
  1899                           
  1900                           ;joystick.c: 103: if (RB3 == 1 && joystick[port].joystickSwitch[0].state == 1)
  1901  0077CE  A681               	btfss	3969,3,c	;volatile
  1902  0077D0  D032               	goto	l626
  1903  0077D2  5047               	movf	readJoystickState@port,w,c
  1904  0077D4  0D0F               	mullw	15
  1905  0077D6  0E60               	movlw	low _joystick
  1906  0077D8  24F3               	addwf	prodl,w,c
  1907  0077DA  6ED9               	movwf	fsr2l,c
  1908  0077DC  0E00               	movlw	high _joystick
  1909  0077DE  20F4               	addwfc	prodh,w,c
  1910  0077E0  6EDA               	movwf	fsr2h,c
  1911  0077E2  04DE               	decf	postinc2,w,c
  1912  0077E4  A4D8               	btfss	status,2,c
  1913  0077E6  D027               	goto	l626
  1914                           
  1915                           ;joystick.c: 104: if (joystick[port].joystickSwitch[0].debounceCount > 5)
  1916  0077E8  5047               	movf	readJoystickState@port,w,c
  1917  0077EA  0D0F               	mullw	15
  1918  0077EC  0E01               	movlw	1
  1919  0077EE  26F3               	addwf	prodl,f,c
  1920  0077F0  0E00               	movlw	0
  1921  0077F2  22F4               	addwfc	prodh,f,c
  1922  0077F4  0E60               	movlw	low _joystick
  1923  0077F6  24F3               	addwf	prodl,w,c
  1924  0077F8  6ED9               	movwf	fsr2l,c
  1925  0077FA  0E00               	movlw	high _joystick
  1926  0077FC  20F4               	addwfc	prodh,w,c
  1927  0077FE  6EDA               	movwf	fsr2h,c
  1928  007800  0E05               	movlw	5
  1929  007802  64DF               	cpfsgt	indf2,c
  1930  007804  D00B               	goto	l625
  1931                           
  1932                           ;joystick.c: 105: joystick[port].joystickSwitch[0].state = 0;
  1933  007806  5047               	movf	readJoystickState@port,w,c
  1934  007808  0D0F               	mullw	15
  1935  00780A  0E60               	movlw	low _joystick
  1936  00780C  24F3               	addwf	prodl,w,c
  1937  00780E  6ED9               	movwf	fsr2l,c
  1938  007810  0E00               	movlw	high _joystick
  1939  007812  20F4               	addwfc	prodh,w,c
  1940  007814  6EDA               	movwf	fsr2h,c
  1941  007816  0E00               	movlw	0
  1942  007818  6EDF               	movwf	indf2,c
  1943  00781A  D00D               	goto	l626
  1944  00781C                     l625:
  1945                           
  1946                           ;joystick.c: 106: else joystick[port].joystickSwitch[0].debounceCount++;
  1947  00781C  5047               	movf	readJoystickState@port,w,c
  1948  00781E  0D0F               	mullw	15
  1949  007820  0E01               	movlw	1
  1950  007822  26F3               	addwf	prodl,f,c
  1951  007824  0E00               	movlw	0
  1952  007826  22F4               	addwfc	prodh,f,c
  1953  007828  0E60               	movlw	low _joystick
  1954  00782A  24F3               	addwf	prodl,w,c
  1955  00782C  6ED9               	movwf	fsr2l,c
  1956  00782E  0E00               	movlw	high _joystick
  1957  007830  20F4               	addwfc	prodh,w,c
  1958  007832  6EDA               	movwf	fsr2h,c
  1959  007834  2ADF               	incf	indf2,f,c
  1960  007836                     l626:
  1961                           
  1962                           ;joystick.c: 108: if (RB3 != joystick[port].joystickSwitch[0].state)
  1963  007836  5047               	movf	readJoystickState@port,w,c
  1964  007838  0D0F               	mullw	15
  1965  00783A  0E60               	movlw	low _joystick
  1966  00783C  24F3               	addwf	prodl,w,c
  1967  00783E  6ED9               	movwf	fsr2l,c
  1968  007840  0E00               	movlw	high _joystick
  1969  007842  20F4               	addwfc	prodh,w,c
  1970  007844  6EDA               	movwf	fsr2h,c
  1971  007846  A681               	btfss	3969,3,c	;volatile
  1972  007848  D003               	goto	u4690
  1973  00784A  6A46               	clrf	(??_readJoystickState+1)& (0+255),c
  1974  00784C  2A46               	incf	(??_readJoystickState+1)& (0+255),f,c
  1975  00784E  D001               	goto	u4708
  1976  007850                     u4690:
  1977  007850  6A46               	clrf	(??_readJoystickState+1)& (0+255),c
  1978  007852                     u4708:
  1979  007852  50DE               	movf	postinc2,w,c
  1980  007854  1846               	xorwf	??_readJoystickState+1,w,c
  1981  007856  B4D8               	btfsc	status,2,c
  1982  007858  D00E               	goto	l627
  1983                           
  1984                           ;joystick.c: 109: joystick[port].joystickSwitch[0].debounceCount = 0;
  1985  00785A  5047               	movf	readJoystickState@port,w,c
  1986  00785C  0D0F               	mullw	15
  1987  00785E  0E01               	movlw	1
  1988  007860  26F3               	addwf	prodl,f,c
  1989  007862  0E00               	movlw	0
  1990  007864  22F4               	addwfc	prodh,f,c
  1991  007866  0E60               	movlw	low _joystick
  1992  007868  24F3               	addwf	prodl,w,c
  1993  00786A  6ED9               	movwf	fsr2l,c
  1994  00786C  0E00               	movlw	high _joystick
  1995  00786E  20F4               	addwfc	prodh,w,c
  1996  007870  6EDA               	movwf	fsr2h,c
  1997  007872  0E00               	movlw	0
  1998  007874  6EDF               	movwf	indf2,c
  1999  007876                     l627:
  2000                           
  2001                           ;joystick.c: 112: if (RB5 == 0 && joystick[port].joystickSwitch[1].state == 0)
  2002  007876  BA81               	btfsc	3969,5,c	;volatile
  2003  007878  D03A               	goto	l630
  2004  00787A  5047               	movf	readJoystickState@port,w,c
  2005  00787C  0D0F               	mullw	15
  2006  00787E  0E02               	movlw	2
  2007  007880  26F3               	addwf	prodl,f,c
  2008  007882  0E00               	movlw	0
  2009  007884  22F4               	addwfc	prodh,f,c
  2010  007886  0E60               	movlw	low _joystick
  2011  007888  24F3               	addwf	prodl,w,c
  2012  00788A  6ED9               	movwf	fsr2l,c
  2013  00788C  0E00               	movlw	high _joystick
  2014  00788E  20F4               	addwfc	prodh,w,c
  2015  007890  6EDA               	movwf	fsr2h,c
  2016  007892  50DF               	movf	indf2,w,c
  2017  007894  A4D8               	btfss	status,2,c
  2018  007896  D02B               	goto	l630
  2019                           
  2020                           ;joystick.c: 113: if (joystick[port].joystickSwitch[1].debounceCount > 5)
  2021  007898  5047               	movf	readJoystickState@port,w,c
  2022  00789A  0D0F               	mullw	15
  2023  00789C  0E03               	movlw	3
  2024  00789E  26F3               	addwf	prodl,f,c
  2025  0078A0  0E00               	movlw	0
  2026  0078A2  22F4               	addwfc	prodh,f,c
  2027  0078A4  0E60               	movlw	low _joystick
  2028  0078A6  24F3               	addwf	prodl,w,c
  2029  0078A8  6ED9               	movwf	fsr2l,c
  2030  0078AA  0E00               	movlw	high _joystick
  2031  0078AC  20F4               	addwfc	prodh,w,c
  2032  0078AE  6EDA               	movwf	fsr2h,c
  2033  0078B0  0E05               	movlw	5
  2034  0078B2  64DF               	cpfsgt	indf2,c
  2035  0078B4  D00F               	goto	l629
  2036                           
  2037                           ;joystick.c: 114: joystick[port].joystickSwitch[1].state = 1;
  2038  0078B6  5047               	movf	readJoystickState@port,w,c
  2039  0078B8  0D0F               	mullw	15
  2040  0078BA  0E02               	movlw	2
  2041  0078BC  26F3               	addwf	prodl,f,c
  2042  0078BE  0E00               	movlw	0
  2043  0078C0  22F4               	addwfc	prodh,f,c
  2044  0078C2  0E60               	movlw	low _joystick
  2045  0078C4  24F3               	addwf	prodl,w,c
  2046  0078C6  6ED9               	movwf	fsr2l,c
  2047  0078C8  0E00               	movlw	high _joystick
  2048  0078CA  20F4               	addwfc	prodh,w,c
  2049  0078CC  6EDA               	movwf	fsr2h,c
  2050  0078CE  0E01               	movlw	1
  2051  0078D0  6EDF               	movwf	indf2,c
  2052  0078D2  D00D               	goto	l630
  2053  0078D4                     l629:
  2054                           
  2055                           ;joystick.c: 115: else joystick[port].joystickSwitch[1].debounceCount++;
  2056  0078D4  5047               	movf	readJoystickState@port,w,c
  2057  0078D6  0D0F               	mullw	15
  2058  0078D8  0E03               	movlw	3
  2059  0078DA  26F3               	addwf	prodl,f,c
  2060  0078DC  0E00               	movlw	0
  2061  0078DE  22F4               	addwfc	prodh,f,c
  2062  0078E0  0E60               	movlw	low _joystick
  2063  0078E2  24F3               	addwf	prodl,w,c
  2064  0078E4  6ED9               	movwf	fsr2l,c
  2065  0078E6  0E00               	movlw	high _joystick
  2066  0078E8  20F4               	addwfc	prodh,w,c
  2067  0078EA  6EDA               	movwf	fsr2h,c
  2068  0078EC  2ADF               	incf	indf2,f,c
  2069  0078EE                     l630:
  2070                           
  2071                           ;joystick.c: 117: if (RB5 == 1 && joystick[port].joystickSwitch[1].state == 1)
  2072  0078EE  AA81               	btfss	3969,5,c	;volatile
  2073  0078F0  D03A               	goto	l633
  2074  0078F2  5047               	movf	readJoystickState@port,w,c
  2075  0078F4  0D0F               	mullw	15
  2076  0078F6  0E02               	movlw	2
  2077  0078F8  26F3               	addwf	prodl,f,c
  2078  0078FA  0E00               	movlw	0
  2079  0078FC  22F4               	addwfc	prodh,f,c
  2080  0078FE  0E60               	movlw	low _joystick
  2081  007900  24F3               	addwf	prodl,w,c
  2082  007902  6ED9               	movwf	fsr2l,c
  2083  007904  0E00               	movlw	high _joystick
  2084  007906  20F4               	addwfc	prodh,w,c
  2085  007908  6EDA               	movwf	fsr2h,c
  2086  00790A  04DE               	decf	postinc2,w,c
  2087  00790C  A4D8               	btfss	status,2,c
  2088  00790E  D02B               	goto	l633
  2089                           
  2090                           ;joystick.c: 118: if (joystick[port].joystickSwitch[1].debounceCount > 5)
  2091  007910  5047               	movf	readJoystickState@port,w,c
  2092  007912  0D0F               	mullw	15
  2093  007914  0E03               	movlw	3
  2094  007916  26F3               	addwf	prodl,f,c
  2095  007918  0E00               	movlw	0
  2096  00791A  22F4               	addwfc	prodh,f,c
  2097  00791C  0E60               	movlw	low _joystick
  2098  00791E  24F3               	addwf	prodl,w,c
  2099  007920  6ED9               	movwf	fsr2l,c
  2100  007922  0E00               	movlw	high _joystick
  2101  007924  20F4               	addwfc	prodh,w,c
  2102  007926  6EDA               	movwf	fsr2h,c
  2103  007928  0E05               	movlw	5
  2104  00792A  64DF               	cpfsgt	indf2,c
  2105  00792C  D00F               	goto	l632
  2106                           
  2107                           ;joystick.c: 119: joystick[port].joystickSwitch[1].state = 0;
  2108  00792E  5047               	movf	readJoystickState@port,w,c
  2109  007930  0D0F               	mullw	15
  2110  007932  0E02               	movlw	2
  2111  007934  26F3               	addwf	prodl,f,c
  2112  007936  0E00               	movlw	0
  2113  007938  22F4               	addwfc	prodh,f,c
  2114  00793A  0E60               	movlw	low _joystick
  2115  00793C  24F3               	addwf	prodl,w,c
  2116  00793E  6ED9               	movwf	fsr2l,c
  2117  007940  0E00               	movlw	high _joystick
  2118  007942  20F4               	addwfc	prodh,w,c
  2119  007944  6EDA               	movwf	fsr2h,c
  2120  007946  0E00               	movlw	0
  2121  007948  6EDF               	movwf	indf2,c
  2122  00794A  D00D               	goto	l633
  2123  00794C                     l632:
  2124                           
  2125                           ;joystick.c: 120: else joystick[port].joystickSwitch[1].debounceCount++;
  2126  00794C  5047               	movf	readJoystickState@port,w,c
  2127  00794E  0D0F               	mullw	15
  2128  007950  0E03               	movlw	3
  2129  007952  26F3               	addwf	prodl,f,c
  2130  007954  0E00               	movlw	0
  2131  007956  22F4               	addwfc	prodh,f,c
  2132  007958  0E60               	movlw	low _joystick
  2133  00795A  24F3               	addwf	prodl,w,c
  2134  00795C  6ED9               	movwf	fsr2l,c
  2135  00795E  0E00               	movlw	high _joystick
  2136  007960  20F4               	addwfc	prodh,w,c
  2137  007962  6EDA               	movwf	fsr2h,c
  2138  007964  2ADF               	incf	indf2,f,c
  2139  007966                     l633:
  2140                           
  2141                           ;joystick.c: 122: if (RB5 != joystick[port].joystickSwitch[1].state)
  2142  007966  5047               	movf	readJoystickState@port,w,c
  2143  007968  0D0F               	mullw	15
  2144  00796A  0E02               	movlw	2
  2145  00796C  26F3               	addwf	prodl,f,c
  2146  00796E  0E00               	movlw	0
  2147  007970  22F4               	addwfc	prodh,f,c
  2148  007972  0E60               	movlw	low _joystick
  2149  007974  24F3               	addwf	prodl,w,c
  2150  007976  6ED9               	movwf	fsr2l,c
  2151  007978  0E00               	movlw	high _joystick
  2152  00797A  20F4               	addwfc	prodh,w,c
  2153  00797C  6EDA               	movwf	fsr2h,c
  2154  00797E  AA81               	btfss	3969,5,c	;volatile
  2155  007980  D003               	goto	u4780
  2156  007982  6A46               	clrf	(??_readJoystickState+1)& (0+255),c
  2157  007984  2A46               	incf	(??_readJoystickState+1)& (0+255),f,c
  2158  007986  D001               	goto	u4798
  2159  007988                     u4780:
  2160  007988  6A46               	clrf	(??_readJoystickState+1)& (0+255),c
  2161  00798A                     u4798:
  2162  00798A  50DE               	movf	postinc2,w,c
  2163  00798C  1846               	xorwf	??_readJoystickState+1,w,c
  2164  00798E  B4D8               	btfsc	status,2,c
  2165  007990  D00E               	goto	l634
  2166                           
  2167                           ;joystick.c: 123: joystick[port].joystickSwitch[1].debounceCount = 0;
  2168  007992  5047               	movf	readJoystickState@port,w,c
  2169  007994  0D0F               	mullw	15
  2170  007996  0E03               	movlw	3
  2171  007998  26F3               	addwf	prodl,f,c
  2172  00799A  0E00               	movlw	0
  2173  00799C  22F4               	addwfc	prodh,f,c
  2174  00799E  0E60               	movlw	low _joystick
  2175  0079A0  24F3               	addwf	prodl,w,c
  2176  0079A2  6ED9               	movwf	fsr2l,c
  2177  0079A4  0E00               	movlw	high _joystick
  2178  0079A6  20F4               	addwfc	prodh,w,c
  2179  0079A8  6EDA               	movwf	fsr2h,c
  2180  0079AA  0E00               	movlw	0
  2181  0079AC  6EDF               	movwf	indf2,c
  2182  0079AE                     l634:
  2183                           
  2184                           ;joystick.c: 126: if (RB6 == 0 && joystick[port].joystickSwitch[2].state == 0)
  2185  0079AE  BC81               	btfsc	3969,6,c	;volatile
  2186  0079B0  D03A               	goto	l637
  2187  0079B2  5047               	movf	readJoystickState@port,w,c
  2188  0079B4  0D0F               	mullw	15
  2189  0079B6  0E04               	movlw	4
  2190  0079B8  26F3               	addwf	prodl,f,c
  2191  0079BA  0E00               	movlw	0
  2192  0079BC  22F4               	addwfc	prodh,f,c
  2193  0079BE  0E60               	movlw	low _joystick
  2194  0079C0  24F3               	addwf	prodl,w,c
  2195  0079C2  6ED9               	movwf	fsr2l,c
  2196  0079C4  0E00               	movlw	high _joystick
  2197  0079C6  20F4               	addwfc	prodh,w,c
  2198  0079C8  6EDA               	movwf	fsr2h,c
  2199  0079CA  50DF               	movf	indf2,w,c
  2200  0079CC  A4D8               	btfss	status,2,c
  2201  0079CE  D02B               	goto	l637
  2202                           
  2203                           ;joystick.c: 127: if (joystick[port].joystickSwitch[2].debounceCount > 5)
  2204  0079D0  5047               	movf	readJoystickState@port,w,c
  2205  0079D2  0D0F               	mullw	15
  2206  0079D4  0E05               	movlw	5
  2207  0079D6  26F3               	addwf	prodl,f,c
  2208  0079D8  0E00               	movlw	0
  2209  0079DA  22F4               	addwfc	prodh,f,c
  2210  0079DC  0E60               	movlw	low _joystick
  2211  0079DE  24F3               	addwf	prodl,w,c
  2212  0079E0  6ED9               	movwf	fsr2l,c
  2213  0079E2  0E00               	movlw	high _joystick
  2214  0079E4  20F4               	addwfc	prodh,w,c
  2215  0079E6  6EDA               	movwf	fsr2h,c
  2216  0079E8  0E05               	movlw	5
  2217  0079EA  64DF               	cpfsgt	indf2,c
  2218  0079EC  D00F               	goto	l636
  2219                           
  2220                           ;joystick.c: 128: joystick[port].joystickSwitch[2].state = 1;
  2221  0079EE  5047               	movf	readJoystickState@port,w,c
  2222  0079F0  0D0F               	mullw	15
  2223  0079F2  0E04               	movlw	4
  2224  0079F4  26F3               	addwf	prodl,f,c
  2225  0079F6  0E00               	movlw	0
  2226  0079F8  22F4               	addwfc	prodh,f,c
  2227  0079FA  0E60               	movlw	low _joystick
  2228  0079FC  24F3               	addwf	prodl,w,c
  2229  0079FE  6ED9               	movwf	fsr2l,c
  2230  007A00  0E00               	movlw	high _joystick
  2231  007A02  20F4               	addwfc	prodh,w,c
  2232  007A04  6EDA               	movwf	fsr2h,c
  2233  007A06  0E01               	movlw	1
  2234  007A08  6EDF               	movwf	indf2,c
  2235  007A0A  D00D               	goto	l637
  2236  007A0C                     l636:
  2237                           
  2238                           ;joystick.c: 129: else joystick[port].joystickSwitch[2].debounceCount++;
  2239  007A0C  5047               	movf	readJoystickState@port,w,c
  2240  007A0E  0D0F               	mullw	15
  2241  007A10  0E05               	movlw	5
  2242  007A12  26F3               	addwf	prodl,f,c
  2243  007A14  0E00               	movlw	0
  2244  007A16  22F4               	addwfc	prodh,f,c
  2245  007A18  0E60               	movlw	low _joystick
  2246  007A1A  24F3               	addwf	prodl,w,c
  2247  007A1C  6ED9               	movwf	fsr2l,c
  2248  007A1E  0E00               	movlw	high _joystick
  2249  007A20  20F4               	addwfc	prodh,w,c
  2250  007A22  6EDA               	movwf	fsr2h,c
  2251  007A24  2ADF               	incf	indf2,f,c
  2252  007A26                     l637:
  2253                           
  2254                           ;joystick.c: 131: if (RB6 == 1 && joystick[port].joystickSwitch[2].state == 1)
  2255  007A26  AC81               	btfss	3969,6,c	;volatile
  2256  007A28  D03A               	goto	l640
  2257  007A2A  5047               	movf	readJoystickState@port,w,c
  2258  007A2C  0D0F               	mullw	15
  2259  007A2E  0E04               	movlw	4
  2260  007A30  26F3               	addwf	prodl,f,c
  2261  007A32  0E00               	movlw	0
  2262  007A34  22F4               	addwfc	prodh,f,c
  2263  007A36  0E60               	movlw	low _joystick
  2264  007A38  24F3               	addwf	prodl,w,c
  2265  007A3A  6ED9               	movwf	fsr2l,c
  2266  007A3C  0E00               	movlw	high _joystick
  2267  007A3E  20F4               	addwfc	prodh,w,c
  2268  007A40  6EDA               	movwf	fsr2h,c
  2269  007A42  04DE               	decf	postinc2,w,c
  2270  007A44  A4D8               	btfss	status,2,c
  2271  007A46  D02B               	goto	l640
  2272                           
  2273                           ;joystick.c: 132: if (joystick[port].joystickSwitch[2].debounceCount > 5)
  2274  007A48  5047               	movf	readJoystickState@port,w,c
  2275  007A4A  0D0F               	mullw	15
  2276  007A4C  0E05               	movlw	5
  2277  007A4E  26F3               	addwf	prodl,f,c
  2278  007A50  0E00               	movlw	0
  2279  007A52  22F4               	addwfc	prodh,f,c
  2280  007A54  0E60               	movlw	low _joystick
  2281  007A56  24F3               	addwf	prodl,w,c
  2282  007A58  6ED9               	movwf	fsr2l,c
  2283  007A5A  0E00               	movlw	high _joystick
  2284  007A5C  20F4               	addwfc	prodh,w,c
  2285  007A5E  6EDA               	movwf	fsr2h,c
  2286  007A60  0E05               	movlw	5
  2287  007A62  64DF               	cpfsgt	indf2,c
  2288  007A64  D00F               	goto	l639
  2289                           
  2290                           ;joystick.c: 133: joystick[port].joystickSwitch[2].state = 0;
  2291  007A66  5047               	movf	readJoystickState@port,w,c
  2292  007A68  0D0F               	mullw	15
  2293  007A6A  0E04               	movlw	4
  2294  007A6C  26F3               	addwf	prodl,f,c
  2295  007A6E  0E00               	movlw	0
  2296  007A70  22F4               	addwfc	prodh,f,c
  2297  007A72  0E60               	movlw	low _joystick
  2298  007A74  24F3               	addwf	prodl,w,c
  2299  007A76  6ED9               	movwf	fsr2l,c
  2300  007A78  0E00               	movlw	high _joystick
  2301  007A7A  20F4               	addwfc	prodh,w,c
  2302  007A7C  6EDA               	movwf	fsr2h,c
  2303  007A7E  0E00               	movlw	0
  2304  007A80  6EDF               	movwf	indf2,c
  2305  007A82  D00D               	goto	l640
  2306  007A84                     l639:
  2307                           
  2308                           ;joystick.c: 134: else joystick[port].joystickSwitch[2].debounceCount++;
  2309  007A84  5047               	movf	readJoystickState@port,w,c
  2310  007A86  0D0F               	mullw	15
  2311  007A88  0E05               	movlw	5
  2312  007A8A  26F3               	addwf	prodl,f,c
  2313  007A8C  0E00               	movlw	0
  2314  007A8E  22F4               	addwfc	prodh,f,c
  2315  007A90  0E60               	movlw	low _joystick
  2316  007A92  24F3               	addwf	prodl,w,c
  2317  007A94  6ED9               	movwf	fsr2l,c
  2318  007A96  0E00               	movlw	high _joystick
  2319  007A98  20F4               	addwfc	prodh,w,c
  2320  007A9A  6EDA               	movwf	fsr2h,c
  2321  007A9C  2ADF               	incf	indf2,f,c
  2322  007A9E                     l640:
  2323                           
  2324                           ;joystick.c: 136: if (RB6 != joystick[port].joystickSwitch[2].state)
  2325  007A9E  5047               	movf	readJoystickState@port,w,c
  2326  007AA0  0D0F               	mullw	15
  2327  007AA2  0E04               	movlw	4
  2328  007AA4  26F3               	addwf	prodl,f,c
  2329  007AA6  0E00               	movlw	0
  2330  007AA8  22F4               	addwfc	prodh,f,c
  2331  007AAA  0E60               	movlw	low _joystick
  2332  007AAC  24F3               	addwf	prodl,w,c
  2333  007AAE  6ED9               	movwf	fsr2l,c
  2334  007AB0  0E00               	movlw	high _joystick
  2335  007AB2  20F4               	addwfc	prodh,w,c
  2336  007AB4  6EDA               	movwf	fsr2h,c
  2337  007AB6  AC81               	btfss	3969,6,c	;volatile
  2338  007AB8  D003               	goto	u4870
  2339  007ABA  6A46               	clrf	(??_readJoystickState+1)& (0+255),c
  2340  007ABC  2A46               	incf	(??_readJoystickState+1)& (0+255),f,c
  2341  007ABE  D001               	goto	u4888
  2342  007AC0                     u4870:
  2343  007AC0  6A46               	clrf	(??_readJoystickState+1)& (0+255),c
  2344  007AC2                     u4888:
  2345  007AC2  50DE               	movf	postinc2,w,c
  2346  007AC4  1846               	xorwf	??_readJoystickState+1,w,c
  2347  007AC6  B4D8               	btfsc	status,2,c
  2348  007AC8  D00E               	goto	l641
  2349                           
  2350                           ;joystick.c: 137: joystick[port].joystickSwitch[2].debounceCount = 0;
  2351  007ACA  5047               	movf	readJoystickState@port,w,c
  2352  007ACC  0D0F               	mullw	15
  2353  007ACE  0E05               	movlw	5
  2354  007AD0  26F3               	addwf	prodl,f,c
  2355  007AD2  0E00               	movlw	0
  2356  007AD4  22F4               	addwfc	prodh,f,c
  2357  007AD6  0E60               	movlw	low _joystick
  2358  007AD8  24F3               	addwf	prodl,w,c
  2359  007ADA  6ED9               	movwf	fsr2l,c
  2360  007ADC  0E00               	movlw	high _joystick
  2361  007ADE  20F4               	addwfc	prodh,w,c
  2362  007AE0  6EDA               	movwf	fsr2h,c
  2363  007AE2  0E00               	movlw	0
  2364  007AE4  6EDF               	movwf	indf2,c
  2365  007AE6                     l641:
  2366                           
  2367                           ;joystick.c: 140: if (RB7 == 0 && joystick[port].joystickSwitch[3].state == 0)
  2368  007AE6  BE81               	btfsc	3969,7,c	;volatile
  2369  007AE8  D03A               	goto	l644
  2370  007AEA  5047               	movf	readJoystickState@port,w,c
  2371  007AEC  0D0F               	mullw	15
  2372  007AEE  0E06               	movlw	6
  2373  007AF0  26F3               	addwf	prodl,f,c
  2374  007AF2  0E00               	movlw	0
  2375  007AF4  22F4               	addwfc	prodh,f,c
  2376  007AF6  0E60               	movlw	low _joystick
  2377  007AF8  24F3               	addwf	prodl,w,c
  2378  007AFA  6ED9               	movwf	fsr2l,c
  2379  007AFC  0E00               	movlw	high _joystick
  2380  007AFE  20F4               	addwfc	prodh,w,c
  2381  007B00  6EDA               	movwf	fsr2h,c
  2382  007B02  50DF               	movf	indf2,w,c
  2383  007B04  A4D8               	btfss	status,2,c
  2384  007B06  D02B               	goto	l644
  2385                           
  2386                           ;joystick.c: 141: if (joystick[port].joystickSwitch[3].debounceCount > 5)
  2387  007B08  5047               	movf	readJoystickState@port,w,c
  2388  007B0A  0D0F               	mullw	15
  2389  007B0C  0E07               	movlw	7
  2390  007B0E  26F3               	addwf	prodl,f,c
  2391  007B10  0E00               	movlw	0
  2392  007B12  22F4               	addwfc	prodh,f,c
  2393  007B14  0E60               	movlw	low _joystick
  2394  007B16  24F3               	addwf	prodl,w,c
  2395  007B18  6ED9               	movwf	fsr2l,c
  2396  007B1A  0E00               	movlw	high _joystick
  2397  007B1C  20F4               	addwfc	prodh,w,c
  2398  007B1E  6EDA               	movwf	fsr2h,c
  2399  007B20  0E05               	movlw	5
  2400  007B22  64DF               	cpfsgt	indf2,c
  2401  007B24  D00F               	goto	l643
  2402                           
  2403                           ;joystick.c: 142: joystick[port].joystickSwitch[3].state = 1;
  2404  007B26  5047               	movf	readJoystickState@port,w,c
  2405  007B28  0D0F               	mullw	15
  2406  007B2A  0E06               	movlw	6
  2407  007B2C  26F3               	addwf	prodl,f,c
  2408  007B2E  0E00               	movlw	0
  2409  007B30  22F4               	addwfc	prodh,f,c
  2410  007B32  0E60               	movlw	low _joystick
  2411  007B34  24F3               	addwf	prodl,w,c
  2412  007B36  6ED9               	movwf	fsr2l,c
  2413  007B38  0E00               	movlw	high _joystick
  2414  007B3A  20F4               	addwfc	prodh,w,c
  2415  007B3C  6EDA               	movwf	fsr2h,c
  2416  007B3E  0E01               	movlw	1
  2417  007B40  6EDF               	movwf	indf2,c
  2418  007B42  D00D               	goto	l644
  2419  007B44                     l643:
  2420                           
  2421                           ;joystick.c: 143: else joystick[port].joystickSwitch[3].debounceCount++;
  2422  007B44  5047               	movf	readJoystickState@port,w,c
  2423  007B46  0D0F               	mullw	15
  2424  007B48  0E07               	movlw	7
  2425  007B4A  26F3               	addwf	prodl,f,c
  2426  007B4C  0E00               	movlw	0
  2427  007B4E  22F4               	addwfc	prodh,f,c
  2428  007B50  0E60               	movlw	low _joystick
  2429  007B52  24F3               	addwf	prodl,w,c
  2430  007B54  6ED9               	movwf	fsr2l,c
  2431  007B56  0E00               	movlw	high _joystick
  2432  007B58  20F4               	addwfc	prodh,w,c
  2433  007B5A  6EDA               	movwf	fsr2h,c
  2434  007B5C  2ADF               	incf	indf2,f,c
  2435  007B5E                     l644:
  2436                           
  2437                           ;joystick.c: 145: if (RB7 == 1 && joystick[port].joystickSwitch[3].state == 1)
  2438  007B5E  AE81               	btfss	3969,7,c	;volatile
  2439  007B60  D03A               	goto	l647
  2440  007B62  5047               	movf	readJoystickState@port,w,c
  2441  007B64  0D0F               	mullw	15
  2442  007B66  0E06               	movlw	6
  2443  007B68  26F3               	addwf	prodl,f,c
  2444  007B6A  0E00               	movlw	0
  2445  007B6C  22F4               	addwfc	prodh,f,c
  2446  007B6E  0E60               	movlw	low _joystick
  2447  007B70  24F3               	addwf	prodl,w,c
  2448  007B72  6ED9               	movwf	fsr2l,c
  2449  007B74  0E00               	movlw	high _joystick
  2450  007B76  20F4               	addwfc	prodh,w,c
  2451  007B78  6EDA               	movwf	fsr2h,c
  2452  007B7A  04DE               	decf	postinc2,w,c
  2453  007B7C  A4D8               	btfss	status,2,c
  2454  007B7E  D02B               	goto	l647
  2455                           
  2456                           ;joystick.c: 146: if (joystick[port].joystickSwitch[3].debounceCount > 5)
  2457  007B80  5047               	movf	readJoystickState@port,w,c
  2458  007B82  0D0F               	mullw	15
  2459  007B84  0E07               	movlw	7
  2460  007B86  26F3               	addwf	prodl,f,c
  2461  007B88  0E00               	movlw	0
  2462  007B8A  22F4               	addwfc	prodh,f,c
  2463  007B8C  0E60               	movlw	low _joystick
  2464  007B8E  24F3               	addwf	prodl,w,c
  2465  007B90  6ED9               	movwf	fsr2l,c
  2466  007B92  0E00               	movlw	high _joystick
  2467  007B94  20F4               	addwfc	prodh,w,c
  2468  007B96  6EDA               	movwf	fsr2h,c
  2469  007B98  0E05               	movlw	5
  2470  007B9A  64DF               	cpfsgt	indf2,c
  2471  007B9C  D00F               	goto	l646
  2472                           
  2473                           ;joystick.c: 147: joystick[port].joystickSwitch[3].state = 0;
  2474  007B9E  5047               	movf	readJoystickState@port,w,c
  2475  007BA0  0D0F               	mullw	15
  2476  007BA2  0E06               	movlw	6
  2477  007BA4  26F3               	addwf	prodl,f,c
  2478  007BA6  0E00               	movlw	0
  2479  007BA8  22F4               	addwfc	prodh,f,c
  2480  007BAA  0E60               	movlw	low _joystick
  2481  007BAC  24F3               	addwf	prodl,w,c
  2482  007BAE  6ED9               	movwf	fsr2l,c
  2483  007BB0  0E00               	movlw	high _joystick
  2484  007BB2  20F4               	addwfc	prodh,w,c
  2485  007BB4  6EDA               	movwf	fsr2h,c
  2486  007BB6  0E00               	movlw	0
  2487  007BB8  6EDF               	movwf	indf2,c
  2488  007BBA  D00D               	goto	l647
  2489  007BBC                     l646:
  2490                           
  2491                           ;joystick.c: 148: else joystick[port].joystickSwitch[3].debounceCount++;
  2492  007BBC  5047               	movf	readJoystickState@port,w,c
  2493  007BBE  0D0F               	mullw	15
  2494  007BC0  0E07               	movlw	7
  2495  007BC2  26F3               	addwf	prodl,f,c
  2496  007BC4  0E00               	movlw	0
  2497  007BC6  22F4               	addwfc	prodh,f,c
  2498  007BC8  0E60               	movlw	low _joystick
  2499  007BCA  24F3               	addwf	prodl,w,c
  2500  007BCC  6ED9               	movwf	fsr2l,c
  2501  007BCE  0E00               	movlw	high _joystick
  2502  007BD0  20F4               	addwfc	prodh,w,c
  2503  007BD2  6EDA               	movwf	fsr2h,c
  2504  007BD4  2ADF               	incf	indf2,f,c
  2505  007BD6                     l647:
  2506                           
  2507                           ;joystick.c: 150: if (RB7 != joystick[port].joystickSwitch[3].state)
  2508  007BD6  5047               	movf	readJoystickState@port,w,c
  2509  007BD8  0D0F               	mullw	15
  2510  007BDA  0E06               	movlw	6
  2511  007BDC  26F3               	addwf	prodl,f,c
  2512  007BDE  0E00               	movlw	0
  2513  007BE0  22F4               	addwfc	prodh,f,c
  2514  007BE2  0E60               	movlw	low _joystick
  2515  007BE4  24F3               	addwf	prodl,w,c
  2516  007BE6  6ED9               	movwf	fsr2l,c
  2517  007BE8  0E00               	movlw	high _joystick
  2518  007BEA  20F4               	addwfc	prodh,w,c
  2519  007BEC  6EDA               	movwf	fsr2h,c
  2520  007BEE  AE81               	btfss	3969,7,c	;volatile
  2521  007BF0  D003               	goto	u4960
  2522  007BF2  6A46               	clrf	(??_readJoystickState+1)& (0+255),c
  2523  007BF4  2A46               	incf	(??_readJoystickState+1)& (0+255),f,c
  2524  007BF6  D001               	goto	u4978
  2525  007BF8                     u4960:
  2526  007BF8  6A46               	clrf	(??_readJoystickState+1)& (0+255),c
  2527  007BFA                     u4978:
  2528  007BFA  50DE               	movf	postinc2,w,c
  2529  007BFC  1846               	xorwf	??_readJoystickState+1,w,c
  2530  007BFE  B4D8               	btfsc	status,2,c
  2531  007C00  D00E               	goto	l648
  2532                           
  2533                           ;joystick.c: 151: joystick[port].joystickSwitch[3].debounceCount = 0;
  2534  007C02  5047               	movf	readJoystickState@port,w,c
  2535  007C04  0D0F               	mullw	15
  2536  007C06  0E07               	movlw	7
  2537  007C08  26F3               	addwf	prodl,f,c
  2538  007C0A  0E00               	movlw	0
  2539  007C0C  22F4               	addwfc	prodh,f,c
  2540  007C0E  0E60               	movlw	low _joystick
  2541  007C10  24F3               	addwf	prodl,w,c
  2542  007C12  6ED9               	movwf	fsr2l,c
  2543  007C14  0E00               	movlw	high _joystick
  2544  007C16  20F4               	addwfc	prodh,w,c
  2545  007C18  6EDA               	movwf	fsr2h,c
  2546  007C1A  0E00               	movlw	0
  2547  007C1C  6EDF               	movwf	indf2,c
  2548  007C1E                     l648:
  2549                           
  2550                           ;joystick.c: 154: if (RB4 == 0 && joystick[port].joystickSwitch[4].state == 0)
  2551  007C1E  B881               	btfsc	3969,4,c	;volatile
  2552  007C20  D03A               	goto	l651
  2553  007C22  5047               	movf	readJoystickState@port,w,c
  2554  007C24  0D0F               	mullw	15
  2555  007C26  0E08               	movlw	8
  2556  007C28  26F3               	addwf	prodl,f,c
  2557  007C2A  0E00               	movlw	0
  2558  007C2C  22F4               	addwfc	prodh,f,c
  2559  007C2E  0E60               	movlw	low _joystick
  2560  007C30  24F3               	addwf	prodl,w,c
  2561  007C32  6ED9               	movwf	fsr2l,c
  2562  007C34  0E00               	movlw	high _joystick
  2563  007C36  20F4               	addwfc	prodh,w,c
  2564  007C38  6EDA               	movwf	fsr2h,c
  2565  007C3A  50DF               	movf	indf2,w,c
  2566  007C3C  A4D8               	btfss	status,2,c
  2567  007C3E  D02B               	goto	l651
  2568                           
  2569                           ;joystick.c: 155: if (joystick[port].joystickSwitch[4].debounceCount > 5)
  2570  007C40  5047               	movf	readJoystickState@port,w,c
  2571  007C42  0D0F               	mullw	15
  2572  007C44  0E09               	movlw	9
  2573  007C46  26F3               	addwf	prodl,f,c
  2574  007C48  0E00               	movlw	0
  2575  007C4A  22F4               	addwfc	prodh,f,c
  2576  007C4C  0E60               	movlw	low _joystick
  2577  007C4E  24F3               	addwf	prodl,w,c
  2578  007C50  6ED9               	movwf	fsr2l,c
  2579  007C52  0E00               	movlw	high _joystick
  2580  007C54  20F4               	addwfc	prodh,w,c
  2581  007C56  6EDA               	movwf	fsr2h,c
  2582  007C58  0E05               	movlw	5
  2583  007C5A  64DF               	cpfsgt	indf2,c
  2584  007C5C  D00F               	goto	l650
  2585                           
  2586                           ;joystick.c: 156: joystick[port].joystickSwitch[4].state = 1;
  2587  007C5E  5047               	movf	readJoystickState@port,w,c
  2588  007C60  0D0F               	mullw	15
  2589  007C62  0E08               	movlw	8
  2590  007C64  26F3               	addwf	prodl,f,c
  2591  007C66  0E00               	movlw	0
  2592  007C68  22F4               	addwfc	prodh,f,c
  2593  007C6A  0E60               	movlw	low _joystick
  2594  007C6C  24F3               	addwf	prodl,w,c
  2595  007C6E  6ED9               	movwf	fsr2l,c
  2596  007C70  0E00               	movlw	high _joystick
  2597  007C72  20F4               	addwfc	prodh,w,c
  2598  007C74  6EDA               	movwf	fsr2h,c
  2599  007C76  0E01               	movlw	1
  2600  007C78  6EDF               	movwf	indf2,c
  2601  007C7A  D00D               	goto	l651
  2602  007C7C                     l650:
  2603                           
  2604                           ;joystick.c: 157: else joystick[port].joystickSwitch[4].debounceCount++;
  2605  007C7C  5047               	movf	readJoystickState@port,w,c
  2606  007C7E  0D0F               	mullw	15
  2607  007C80  0E09               	movlw	9
  2608  007C82  26F3               	addwf	prodl,f,c
  2609  007C84  0E00               	movlw	0
  2610  007C86  22F4               	addwfc	prodh,f,c
  2611  007C88  0E60               	movlw	low _joystick
  2612  007C8A  24F3               	addwf	prodl,w,c
  2613  007C8C  6ED9               	movwf	fsr2l,c
  2614  007C8E  0E00               	movlw	high _joystick
  2615  007C90  20F4               	addwfc	prodh,w,c
  2616  007C92  6EDA               	movwf	fsr2h,c
  2617  007C94  2ADF               	incf	indf2,f,c
  2618  007C96                     l651:
  2619                           
  2620                           ;joystick.c: 159: if (RB4 == 1 && joystick[port].joystickSwitch[4].state == 1)
  2621  007C96  A881               	btfss	3969,4,c	;volatile
  2622  007C98  D03A               	goto	l654
  2623  007C9A  5047               	movf	readJoystickState@port,w,c
  2624  007C9C  0D0F               	mullw	15
  2625  007C9E  0E08               	movlw	8
  2626  007CA0  26F3               	addwf	prodl,f,c
  2627  007CA2  0E00               	movlw	0
  2628  007CA4  22F4               	addwfc	prodh,f,c
  2629  007CA6  0E60               	movlw	low _joystick
  2630  007CA8  24F3               	addwf	prodl,w,c
  2631  007CAA  6ED9               	movwf	fsr2l,c
  2632  007CAC  0E00               	movlw	high _joystick
  2633  007CAE  20F4               	addwfc	prodh,w,c
  2634  007CB0  6EDA               	movwf	fsr2h,c
  2635  007CB2  04DE               	decf	postinc2,w,c
  2636  007CB4  A4D8               	btfss	status,2,c
  2637  007CB6  D02B               	goto	l654
  2638                           
  2639                           ;joystick.c: 160: if (joystick[port].joystickSwitch[4].debounceCount > 5)
  2640  007CB8  5047               	movf	readJoystickState@port,w,c
  2641  007CBA  0D0F               	mullw	15
  2642  007CBC  0E09               	movlw	9
  2643  007CBE  26F3               	addwf	prodl,f,c
  2644  007CC0  0E00               	movlw	0
  2645  007CC2  22F4               	addwfc	prodh,f,c
  2646  007CC4  0E60               	movlw	low _joystick
  2647  007CC6  24F3               	addwf	prodl,w,c
  2648  007CC8  6ED9               	movwf	fsr2l,c
  2649  007CCA  0E00               	movlw	high _joystick
  2650  007CCC  20F4               	addwfc	prodh,w,c
  2651  007CCE  6EDA               	movwf	fsr2h,c
  2652  007CD0  0E05               	movlw	5
  2653  007CD2  64DF               	cpfsgt	indf2,c
  2654  007CD4  D00F               	goto	l653
  2655                           
  2656                           ;joystick.c: 161: joystick[port].joystickSwitch[4].state = 0;
  2657  007CD6  5047               	movf	readJoystickState@port,w,c
  2658  007CD8  0D0F               	mullw	15
  2659  007CDA  0E08               	movlw	8
  2660  007CDC  26F3               	addwf	prodl,f,c
  2661  007CDE  0E00               	movlw	0
  2662  007CE0  22F4               	addwfc	prodh,f,c
  2663  007CE2  0E60               	movlw	low _joystick
  2664  007CE4  24F3               	addwf	prodl,w,c
  2665  007CE6  6ED9               	movwf	fsr2l,c
  2666  007CE8  0E00               	movlw	high _joystick
  2667  007CEA  20F4               	addwfc	prodh,w,c
  2668  007CEC  6EDA               	movwf	fsr2h,c
  2669  007CEE  0E00               	movlw	0
  2670  007CF0  6EDF               	movwf	indf2,c
  2671  007CF2  D00D               	goto	l654
  2672  007CF4                     l653:
  2673                           
  2674                           ;joystick.c: 162: else joystick[port].joystickSwitch[4].debounceCount++;
  2675  007CF4  5047               	movf	readJoystickState@port,w,c
  2676  007CF6  0D0F               	mullw	15
  2677  007CF8  0E09               	movlw	9
  2678  007CFA  26F3               	addwf	prodl,f,c
  2679  007CFC  0E00               	movlw	0
  2680  007CFE  22F4               	addwfc	prodh,f,c
  2681  007D00  0E60               	movlw	low _joystick
  2682  007D02  24F3               	addwf	prodl,w,c
  2683  007D04  6ED9               	movwf	fsr2l,c
  2684  007D06  0E00               	movlw	high _joystick
  2685  007D08  20F4               	addwfc	prodh,w,c
  2686  007D0A  6EDA               	movwf	fsr2h,c
  2687  007D0C  2ADF               	incf	indf2,f,c
  2688  007D0E                     l654:
  2689                           
  2690                           ;joystick.c: 164: if (RB4 != joystick[port].joystickSwitch[4].state)
  2691  007D0E  5047               	movf	readJoystickState@port,w,c
  2692  007D10  0D0F               	mullw	15
  2693  007D12  0E08               	movlw	8
  2694  007D14  26F3               	addwf	prodl,f,c
  2695  007D16  0E00               	movlw	0
  2696  007D18  22F4               	addwfc	prodh,f,c
  2697  007D1A  0E60               	movlw	low _joystick
  2698  007D1C  24F3               	addwf	prodl,w,c
  2699  007D1E  6ED9               	movwf	fsr2l,c
  2700  007D20  0E00               	movlw	high _joystick
  2701  007D22  20F4               	addwfc	prodh,w,c
  2702  007D24  6EDA               	movwf	fsr2h,c
  2703  007D26  A881               	btfss	3969,4,c	;volatile
  2704  007D28  D003               	goto	u5050
  2705  007D2A  6A46               	clrf	(??_readJoystickState+1)& (0+255),c
  2706  007D2C  2A46               	incf	(??_readJoystickState+1)& (0+255),f,c
  2707  007D2E  D001               	goto	u5068
  2708  007D30                     u5050:
  2709  007D30  6A46               	clrf	(??_readJoystickState+1)& (0+255),c
  2710  007D32                     u5068:
  2711  007D32  50DE               	movf	postinc2,w,c
  2712  007D34  1846               	xorwf	??_readJoystickState+1,w,c
  2713  007D36  B4D8               	btfsc	status,2,c
  2714  007D38  D00E               	goto	l655
  2715                           
  2716                           ;joystick.c: 165: joystick[port].joystickSwitch[4].debounceCount = 0;
  2717  007D3A  5047               	movf	readJoystickState@port,w,c
  2718  007D3C  0D0F               	mullw	15
  2719  007D3E  0E09               	movlw	9
  2720  007D40  26F3               	addwf	prodl,f,c
  2721  007D42  0E00               	movlw	0
  2722  007D44  22F4               	addwfc	prodh,f,c
  2723  007D46  0E60               	movlw	low _joystick
  2724  007D48  24F3               	addwf	prodl,w,c
  2725  007D4A  6ED9               	movwf	fsr2l,c
  2726  007D4C  0E00               	movlw	high _joystick
  2727  007D4E  20F4               	addwfc	prodh,w,c
  2728  007D50  6EDA               	movwf	fsr2h,c
  2729  007D52  0E00               	movlw	0
  2730  007D54  6EDF               	movwf	indf2,c
  2731  007D56                     l655:
  2732  007D56  2A47               	incf	readJoystickState@port,f,c
  2733  007D58  D4F0               	goto	l4564
  2734  007D5A                     u5080:
  2735                           
  2736                           ;joystick.c: 166: }
  2737                           ;joystick.c: 169: TRISA4 = 1;
  2738  007D5A  8892               	bsf	3986,4,c	;volatile
  2739                           
  2740                           ;joystick.c: 170: TRISA5 = 1;
  2741  007D5C  8A92               	bsf	3986,5,c	;volatile
  2742                           
  2743                           ;joystick.c: 173: joystick[0].paddleX = readADC(0);
  2744  007D5E  0E00               	movlw	0
  2745  007D60  EC31  F039         	call	_readADC
  2746  007D64  C037  F06B         	movff	?_readADC,_joystick+11
  2747  007D68  C038  F06C         	movff	?_readADC+1,_joystick+12
  2748                           
  2749                           ;joystick.c: 174: joystick[0].paddleY = readADC(1);
  2750  007D6C  0E01               	movlw	1
  2751  007D6E  EC31  F039         	call	_readADC
  2752  007D72  C037  F06D         	movff	?_readADC,_joystick+13
  2753  007D76  C038  F06E         	movff	?_readADC+1,_joystick+14
  2754                           
  2755                           ;joystick.c: 175: if (joystick[0].paddleX == -1) joystick[0].paddleConnected = FALSE;
  2756  007D7A  0100               	movlb	0	; () banked
  2757  007D7C  296B               	incf	(_joystick+11)& (0+255),w,b
  2758  007D7E  E105               	bnz	l4696
  2759  007D80  296C               	incf	(_joystick+12)& (0+255),w,b
  2760  007D82  A4D8               	btfss	status,2,c
  2761  007D84  D002               	goto	l656
  2762                           
  2763                           ; BSR set to: 0
  2764  007D86  0E00               	movlw	0
  2765  007D88  D001               	goto	L2
  2766  007D8A                     l656:
  2767  007D8A                     l4696:
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;joystick.c: 176: else joystick[0].paddleConnected = TRUE;
  2771  007D8A  0E01               	movlw	1
  2772  007D8C                     L2:
  2773  007D8C  6F6A               	movwf	(_joystick+10)& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;joystick.c: 178: joystick[1].paddleX = readADC(3);
  2777                           
  2778                           ; BSR set to: 0
  2779  007D8E  0E03               	movlw	3
  2780  007D90  EC31  F039         	call	_readADC
  2781  007D94  C037  F07A         	movff	?_readADC,_joystick+26
  2782  007D98  C038  F07B         	movff	?_readADC+1,_joystick+27
  2783                           
  2784                           ;joystick.c: 179: joystick[1].paddleY = readADC(4);
  2785  007D9C  0E04               	movlw	4
  2786  007D9E  EC31  F039         	call	_readADC
  2787  007DA2  C037  F07C         	movff	?_readADC,_joystick+28
  2788  007DA6  C038  F07D         	movff	?_readADC+1,_joystick+29
  2789                           
  2790                           ;joystick.c: 180: if (joystick[1].paddleX == -1) joystick[1].paddleConnected = FALSE;
  2791  007DAA  0100               	movlb	0	; () banked
  2792  007DAC  297A               	incf	(_joystick+26)& (0+255),w,b
  2793  007DAE  E106               	bnz	l4706
  2794  007DB0  297B               	incf	(_joystick+27)& (0+255),w,b
  2795  007DB2  A4D8               	btfss	status,2,c
  2796  007DB4  D003               	goto	l658
  2797                           
  2798                           ; BSR set to: 0
  2799  007DB6  0E00               	movlw	0
  2800  007DB8  6F79               	movwf	(_joystick+25)& (0+255),b
  2801  007DBA  0012               	return	
  2802  007DBC                     l658:
  2803  007DBC                     l4706:
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;joystick.c: 181: else joystick[1].paddleConnected = TRUE;
  2807  007DBC  0E01               	movlw	1
  2808  007DBE  6F79               	movwf	(_joystick+25)& (0+255),b
  2809  007DC0  0012               	return	
  2810  007DC2                     __end_of_readJoystickState:
  2811                           	opt stack 0
  2812                           tblptru	equ	0xFF8
  2813                           prodh	equ	0xFF4
  2814                           prodl	equ	0xFF3
  2815                           intcon2	equ	0xFF1
  2816                           postinc0	equ	0xFEE
  2817                           wreg	equ	0xFE8
  2818                           indf2	equ	0xFDF
  2819                           postinc2	equ	0xFDE
  2820                           fsr2h	equ	0xFDA
  2821                           fsr2l	equ	0xFD9
  2822                           status	equ	0xFD8
  2823                           
  2824 ;; *************** function _readADC *****************
  2825 ;; Defined at:
  2826 ;;		line 315 in file "../joystick.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;  ADCnumber       1    wreg     unsigned char 
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;  ADCnumber       1   62[COMRAM] unsigned char 
  2831 ;;  calc            3   65[COMRAM] float 
  2832 ;;  adcResult       2   63[COMRAM] int 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  2   54[COMRAM] int 
  2835 ;; Registers used:
  2836 ;;		wreg, status,2, status,0, cstack
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  2842 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0
  2843 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0
  2844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  2845 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0
  2846 ;;Total ram usage:       14 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    2
  2849 ;; This function calls:
  2850 ;;		___awtoft
  2851 ;;		___ftadd
  2852 ;;		___ftdiv
  2853 ;;		___ftge
  2854 ;;		___ftmul
  2855 ;;		___ftneg
  2856 ;;		___fttol
  2857 ;; This function is called by:
  2858 ;;		_readJoystickState
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           	psect	text3
  2863  007262                     __ptext3:
  2864                           	opt stack 0
  2865  007262                     _readADC:
  2866                           	opt stack 27
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;incstack = 0
  2870                           ;readADC@ADCnumber stored from wreg
  2871  007262  6E3F               	movwf	readADC@ADCnumber,c
  2872                           
  2873                           ;joystick.c: 317: int adcResult;
  2874                           ;joystick.c: 318: float calc;
  2875                           ;joystick.c: 321: switch(ADCnumber)
  2876  007264  D009               	goto	l695
  2877  007266  0E03               	movlw	3
  2878  007268  D005               	goto	L5
  2879  00726A  0E07               	movlw	7
  2880  00726C  D003               	goto	L5
  2881  00726E  0E0B               	movlw	11
  2882  007270  D001               	goto	L5
  2883  007272  0E0F               	movlw	15
  2884  007274                     L5:
  2885  007274  6EC2               	movwf	4034,c	;volatile
  2886                           
  2887                           ;joystick.c: 331: }
  2888                           
  2889                           ;joystick.c: 330: break;
  2890  007276  D00D               	goto	l697
  2891  007278                     l695:
  2892  007278  503F               	movf	readADC@ADCnumber,w,c
  2893                           
  2894                           ; Switch size 1, requested type "space"
  2895                           ; Number of cases is 4, Range of values is 0 to 4
  2896                           ; switch strategies available:
  2897                           ; Name         Instructions Cycles
  2898                           ; simple_byte           13     7 (average)
  2899                           ;	Chosen strategy is simple_byte
  2900  00727A  0A00               	xorlw	0	; case 0
  2901  00727C  B4D8               	btfsc	status,2,c
  2902  00727E  D7F5               	goto	l698
  2903  007280  0A01               	xorlw	1	; case 1
  2904  007282  B4D8               	btfsc	status,2,c
  2905  007284  D7F0               	goto	l696
  2906  007286  0A02               	xorlw	2	; case 3
  2907  007288  B4D8               	btfsc	status,2,c
  2908  00728A  D7F1               	goto	l699
  2909  00728C  0A07               	xorlw	7	; case 4
  2910  00728E  B4D8               	btfsc	status,2,c
  2911  007290  D7F0               	goto	l700
  2912  007292                     l697:
  2913                           
  2914                           ;joystick.c: 334: while(GODONE);
  2915  007292  B2C2               	btfsc	4034,1,c	;volatile
  2916  007294  D7FE               	goto	l697
  2917                           
  2918                           ;joystick.c: 337: adcResult = ADRESL;
  2919  007296  CFC3 F040          	movff	4035,readADC@adcResult	;volatile
  2920  00729A  6A41               	clrf	readADC@adcResult+1,c
  2921                           
  2922                           ;joystick.c: 338: adcResult += (ADRESH << 8);
  2923  00729C  50C4               	movf	4036,w,c	;volatile
  2924  00729E  2641               	addwf	readADC@adcResult+1,f,c
  2925                           
  2926                           ;joystick.c: 340: if (adcResult != 0)
  2927  0072A0  5040               	movf	readADC@adcResult,w,c
  2928  0072A2  1041               	iorwf	readADC@adcResult+1,w,c
  2929  0072A4  B4D8               	btfsc	status,2,c
  2930  0072A6  D09D               	goto	l704
  2931                           
  2932                           ;joystick.c: 341: {
  2933                           ;joystick.c: 357: calc = (((1.023 / ((float)adcResult/1000.0)) * 100.0) - 100.0) * 0.60;
  2934  0072A8  0E00               	movlw	0
  2935  0072AA  6E10               	movwf	___ftdiv@f2,c
  2936  0072AC  0E7A               	movlw	122
  2937  0072AE  6E11               	movwf	___ftdiv@f2+1,c
  2938  0072B0  0E44               	movlw	68
  2939  0072B2  6E12               	movwf	___ftdiv@f2+2,c
  2940  0072B4  C040  F009         	movff	readADC@adcResult,___awtoft@c
  2941  0072B8  C041  F00A         	movff	readADC@adcResult+1,___awtoft@c+1
  2942  0072BC  ECB2  F02B         	call	___awtoft	;wreg free
  2943  0072C0  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  2944  0072C4  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  2945  0072C8  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  2946  0072CC  EC55  F032         	call	___ftdiv	;wreg free
  2947  0072D0  C00D  F039         	movff	?___ftdiv,_readADC$4124
  2948  0072D4  C00E  F03A         	movff	?___ftdiv+1,_readADC$4124+1
  2949  0072D8  C00F  F03B         	movff	?___ftdiv+2,_readADC$4124+2
  2950                           
  2951                           ;joystick.c: 341: {
  2952                           ;joystick.c: 357: calc = (((1.023 / ((float)adcResult/1000.0)) * 100.0) - 100.0) * 0.60;
  2953  0072DC  0E00               	movlw	0
  2954  0072DE  6E2E               	movwf	___ftadd@f2,c
  2955  0072E0  0EC8               	movlw	200
  2956  0072E2  6E2F               	movwf	___ftadd@f2+1,c
  2957  0072E4  0EC2               	movlw	194
  2958  0072E6  6E30               	movwf	___ftadd@f2+2,c
  2959  0072E8  0E00               	movlw	0
  2960  0072EA  6E1F               	movwf	___ftmul@f2,c
  2961  0072EC  0EC8               	movlw	200
  2962  0072EE  6E20               	movwf	___ftmul@f2+1,c
  2963  0072F0  0E42               	movlw	66
  2964  0072F2  6E21               	movwf	___ftmul@f2+2,c
  2965  0072F4  C039  F010         	movff	_readADC$4124,___ftdiv@f2
  2966  0072F8  C03A  F011         	movff	_readADC$4124+1,___ftdiv@f2+1
  2967  0072FC  C03B  F012         	movff	_readADC$4124+2,___ftdiv@f2+2
  2968  007300  0EF2               	movlw	242
  2969  007302  6E0D               	movwf	___ftdiv@f1,c
  2970  007304  0E82               	movlw	130
  2971  007306  6E0E               	movwf	___ftdiv@f1+1,c
  2972  007308  0E3F               	movlw	63
  2973  00730A  6E0F               	movwf	___ftdiv@f1+2,c
  2974  00730C  EC55  F032         	call	___ftdiv	;wreg free
  2975  007310  C00D  F01C         	movff	?___ftdiv,___ftmul@f1
  2976  007314  C00E  F01D         	movff	?___ftdiv+1,___ftmul@f1+1
  2977  007318  C00F  F01E         	movff	?___ftdiv+2,___ftmul@f1+2
  2978  00731C  EC26  F034         	call	___ftmul	;wreg free
  2979  007320  C01C  F02B         	movff	?___ftmul,___ftadd@f1
  2980  007324  C01D  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  2981  007328  C01E  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  2982  00732C  ECC5  F03A         	call	___ftadd	;wreg free
  2983  007330  C02B  F03C         	movff	?___ftadd,_readADC$4125
  2984  007334  C02C  F03D         	movff	?___ftadd+1,_readADC$4125+1
  2985  007338  C02D  F03E         	movff	?___ftadd+2,_readADC$4125+2
  2986                           
  2987                           ;joystick.c: 341: {
  2988                           ;joystick.c: 357: calc = (((1.023 / ((float)adcResult/1000.0)) * 100.0) - 100.0) * 0.60;
  2989  00733C  C03C  F01C         	movff	_readADC$4125,___ftmul@f1
  2990  007340  C03D  F01D         	movff	_readADC$4125+1,___ftmul@f1+1
  2991  007344  C03E  F01E         	movff	_readADC$4125+2,___ftmul@f1+2
  2992  007348  0E9A               	movlw	154
  2993  00734A  6E1F               	movwf	___ftmul@f2,c
  2994  00734C  0E19               	movlw	25
  2995  00734E  6E20               	movwf	___ftmul@f2+1,c
  2996  007350  0E3F               	movlw	63
  2997  007352  6E21               	movwf	___ftmul@f2+2,c
  2998  007354  EC26  F034         	call	___ftmul	;wreg free
  2999  007358  C01C  F042         	movff	?___ftmul,readADC@calc
  3000  00735C  C01D  F043         	movff	?___ftmul+1,readADC@calc+1
  3001  007360  C01E  F044         	movff	?___ftmul+2,readADC@calc+2
  3002                           
  3003                           ;joystick.c: 358: if (calc > 255) calc = 255;
  3004  007364  0E00               	movlw	0
  3005  007366  6E01               	movwf	___ftge@ff1,c
  3006  007368  0E7F               	movlw	127
  3007  00736A  6E02               	movwf	___ftge@ff1+1,c
  3008  00736C  0E43               	movlw	67
  3009  00736E  6E03               	movwf	___ftge@ff1+2,c
  3010  007370  C042  F004         	movff	readADC@calc,___ftge@ff2
  3011  007374  C043  F005         	movff	readADC@calc+1,___ftge@ff2+1
  3012  007378  C044  F006         	movff	readADC@calc+2,___ftge@ff2+2
  3013  00737C  ECEB  F02D         	call	___ftge	;wreg free
  3014  007380  B0D8               	btfsc	status,0,c
  3015  007382  D006               	goto	l705
  3016  007384  0E00               	movlw	0
  3017  007386  6E42               	movwf	readADC@calc,c
  3018  007388  0E7F               	movlw	127
  3019  00738A  6E43               	movwf	readADC@calc+1,c
  3020  00738C  0E43               	movlw	67
  3021  00738E  6E44               	movwf	readADC@calc+2,c
  3022  007390                     l705:
  3023                           
  3024                           ;joystick.c: 362: calc = 255 - calc;
  3025  007390  C042  F001         	movff	readADC@calc,___ftneg@f1
  3026  007394  C043  F002         	movff	readADC@calc+1,___ftneg@f1+1
  3027  007398  C044  F003         	movff	readADC@calc+2,___ftneg@f1+2
  3028  00739C  EC2B  F02B         	call	___ftneg	;wreg free
  3029  0073A0  C001  F02B         	movff	?___ftneg,___ftadd@f1
  3030  0073A4  C002  F02C         	movff	?___ftneg+1,___ftadd@f1+1
  3031  0073A8  C003  F02D         	movff	?___ftneg+2,___ftadd@f1+2
  3032  0073AC  0E00               	movlw	0
  3033  0073AE  6E2E               	movwf	___ftadd@f2,c
  3034  0073B0  0E7F               	movlw	127
  3035  0073B2  6E2F               	movwf	___ftadd@f2+1,c
  3036  0073B4  0E43               	movlw	67
  3037  0073B6  6E30               	movwf	___ftadd@f2+2,c
  3038  0073B8  ECC5  F03A         	call	___ftadd	;wreg free
  3039  0073BC  C02B  F042         	movff	?___ftadd,readADC@calc
  3040  0073C0  C02C  F043         	movff	?___ftadd+1,readADC@calc+1
  3041  0073C4  C02D  F044         	movff	?___ftadd+2,readADC@calc+2
  3042                           
  3043                           ;joystick.c: 364: return (int)calc;
  3044  0073C8  C042  F001         	movff	readADC@calc,___fttol@f1
  3045  0073CC  C043  F002         	movff	readADC@calc+1,___fttol@f1+1
  3046  0073D0  C044  F003         	movff	readADC@calc+2,___fttol@f1+2
  3047  0073D4  ECA0  F034         	call	___fttol	;wreg free
  3048  0073D8  C001  F037         	movff	?___fttol,?_readADC
  3049  0073DC  C002  F038         	movff	?___fttol+1,?_readADC+1
  3050                           
  3051                           ;joystick.c: 365: }
  3052  0073E0  0012               	return	
  3053  0073E2                     l704:
  3054                           
  3055                           ;joystick.c: 366: else return -1;
  3056  0073E2  6837               	setf	?_readADC,c
  3057  0073E4  6838               	setf	?_readADC+1,c
  3058  0073E6  0012               	return	
  3059  0073E8                     __end_of_readADC:
  3060                           	opt stack 0
  3061                           tblptru	equ	0xFF8
  3062                           prodh	equ	0xFF4
  3063                           prodl	equ	0xFF3
  3064                           intcon2	equ	0xFF1
  3065                           postinc0	equ	0xFEE
  3066                           wreg	equ	0xFE8
  3067                           indf2	equ	0xFDF
  3068                           postinc2	equ	0xFDE
  3069                           fsr2h	equ	0xFDA
  3070                           fsr2l	equ	0xFD9
  3071                           status	equ	0xFD8
  3072                           
  3073 ;; *************** function ___fttol *****************
  3074 ;; Defined at:
  3075 ;;		line 44 in file "/Applications/microchip/xc8/v1.45/sources/common/fttol.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  f1              3    0[COMRAM] float 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  lval            4   10[COMRAM] unsigned long 
  3080 ;;  exp1            1   14[COMRAM] unsigned char 
  3081 ;;  sign1           1    9[COMRAM] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  4    0[COMRAM] long 
  3084 ;; Registers used:
  3085 ;;		wreg, status,2, status,0
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  3091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0
  3092 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0
  3093 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0
  3094 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0
  3095 ;;Total ram usage:       15 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; This function calls:
  3098 ;;		Nothing
  3099 ;; This function is called by:
  3100 ;;		_readADC
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           	psect	text4
  3105  006940                     __ptext4:
  3106                           	opt stack 0
  3107  006940                     ___fttol:
  3108                           	opt stack 28
  3109                           
  3110                           ;incstack = 0
  3111  006940  C003  F005         	movff	___fttol@f1+2,??___fttol
  3112  006944  6A06               	clrf	(??___fttol+1)& (0+255),c
  3113  006946  6A07               	clrf	(??___fttol+2)& (0+255),c
  3114  006948  3402               	rlcf	___fttol@f1+1,w,c
  3115  00694A  3605               	rlcf	??___fttol& (0+255),f,c
  3116  00694C  E301               	bnc	u4131
  3117  00694E  8006               	bsf	(??___fttol+1)& (0+255),0,c
  3118  006950                     u4131:
  3119  006950  5005               	movf	??___fttol,w,c
  3120  006952  6E0F               	movwf	___fttol@exp1,c
  3121  006954  500F               	movf	___fttol@exp1,w,c
  3122  006956  A4D8               	btfss	status,2,c
  3123  006958  D009               	goto	l1237
  3124  00695A  0E00               	movlw	0
  3125  00695C  6E01               	movwf	?___fttol,c
  3126  00695E  0E00               	movlw	0
  3127  006960  6E02               	movwf	?___fttol+1,c
  3128  006962  0E00               	movlw	0
  3129  006964  6E03               	movwf	?___fttol+2,c
  3130  006966  0E00               	movlw	0
  3131  006968  6E04               	movwf	?___fttol+3,c
  3132  00696A  0012               	return	
  3133  00696C                     l1237:
  3134  00696C  0E17               	movlw	23
  3135  00696E  6E05               	movwf	??___fttol& (0+255),c
  3136  006970  C001  F006         	movff	___fttol@f1,??___fttol+1
  3137  006974  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  3138  006978  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  3139  00697C  2805               	incf	??___fttol,w,c
  3140  00697E  6E09               	movwf	(??___fttol+4)& (0+255),c
  3141  006980  D004               	goto	u4150
  3142  006982                     u4155:
  3143  006982  90D8               	bcf	status,0,c
  3144  006984  3208               	rrcf	??___fttol+3,f,c
  3145  006986  3207               	rrcf	??___fttol+2,f,c
  3146  006988  3206               	rrcf	??___fttol+1,f,c
  3147  00698A                     u4150:
  3148  00698A  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  3149  00698C  D7FA               	goto	u4155
  3150  00698E  5006               	movf	??___fttol+1,w,c
  3151  006990  6E0A               	movwf	___fttol@sign1,c
  3152  006992  8E02               	bsf	___fttol@f1+1,7,c
  3153  006994  0EFF               	movlw	255
  3154  006996  1601               	andwf	___fttol@f1,f,c
  3155  006998  0EFF               	movlw	255
  3156  00699A  1602               	andwf	___fttol@f1+1,f,c
  3157  00699C  0E00               	movlw	0
  3158  00699E  1603               	andwf	___fttol@f1+2,f,c
  3159  0069A0  5001               	movf	___fttol@f1,w,c
  3160  0069A2  6E0B               	movwf	___fttol@lval,c
  3161  0069A4  5002               	movf	___fttol@f1+1,w,c
  3162  0069A6  6E0C               	movwf	___fttol@lval+1,c
  3163  0069A8  5003               	movf	___fttol@f1+2,w,c
  3164  0069AA  6E0D               	movwf	___fttol@lval+2,c
  3165  0069AC  6A0E               	clrf	___fttol@lval+3,c
  3166  0069AE  0E8E               	movlw	142
  3167  0069B0  5E0F               	subwf	___fttol@exp1,f,c
  3168  0069B2  AE0F               	btfss	___fttol@exp1,7,c
  3169  0069B4  D016               	goto	l1239
  3170  0069B6  500F               	movf	___fttol@exp1,w,c
  3171  0069B8  0A80               	xorlw	128
  3172  0069BA  0F8F               	addlw	143
  3173  0069BC  B0D8               	btfsc	status,0,c
  3174  0069BE  D009               	goto	l1240
  3175  0069C0  0E00               	movlw	0
  3176  0069C2  6E01               	movwf	?___fttol,c
  3177  0069C4  0E00               	movlw	0
  3178  0069C6  6E02               	movwf	?___fttol+1,c
  3179  0069C8  0E00               	movlw	0
  3180  0069CA  6E03               	movwf	?___fttol+2,c
  3181  0069CC  0E00               	movlw	0
  3182  0069CE  6E04               	movwf	?___fttol+3,c
  3183  0069D0  0012               	return	
  3184  0069D2                     l1240:
  3185  0069D2  90D8               	bcf	status,0,c
  3186  0069D4  320E               	rrcf	___fttol@lval+3,f,c
  3187  0069D6  320D               	rrcf	___fttol@lval+2,f,c
  3188  0069D8  320C               	rrcf	___fttol@lval+1,f,c
  3189  0069DA  320B               	rrcf	___fttol@lval,f,c
  3190  0069DC  3E0F               	incfsz	___fttol@exp1,f,c
  3191  0069DE  D7F9               	goto	l1240
  3192  0069E0  D015               	goto	u4190
  3193  0069E2                     l1239:
  3194  0069E2  0E17               	movlw	23
  3195  0069E4  640F               	cpfsgt	___fttol@exp1,c
  3196  0069E6  D00F               	goto	l1245
  3197  0069E8  0E00               	movlw	0
  3198  0069EA  6E01               	movwf	?___fttol,c
  3199  0069EC  0E00               	movlw	0
  3200  0069EE  6E02               	movwf	?___fttol+1,c
  3201  0069F0  0E00               	movlw	0
  3202  0069F2  6E03               	movwf	?___fttol+2,c
  3203  0069F4  0E00               	movlw	0
  3204  0069F6  6E04               	movwf	?___fttol+3,c
  3205  0069F8  0012               	return	
  3206  0069FA  90D8               	bcf	status,0,c
  3207  0069FC  360B               	rlcf	___fttol@lval,f,c
  3208  0069FE  360C               	rlcf	___fttol@lval+1,f,c
  3209  006A00  360D               	rlcf	___fttol@lval+2,f,c
  3210  006A02  360E               	rlcf	___fttol@lval+3,f,c
  3211  006A04  060F               	decf	___fttol@exp1,f,c
  3212  006A06                     l1245:
  3213  006A06  500F               	movf	___fttol@exp1,w,c
  3214  006A08  A4D8               	btfss	status,2,c
  3215  006A0A  D7F7               	goto	l1246
  3216  006A0C                     u4190:
  3217  006A0C  500A               	movf	___fttol@sign1,w,c
  3218  006A0E  B4D8               	btfsc	status,2,c
  3219  006A10  D008               	goto	l1248
  3220  006A12  1E0E               	comf	___fttol@lval+3,f,c
  3221  006A14  1E0D               	comf	___fttol@lval+2,f,c
  3222  006A16  1E0C               	comf	___fttol@lval+1,f,c
  3223  006A18  6C0B               	negf	___fttol@lval,c
  3224  006A1A  0E00               	movlw	0
  3225  006A1C  220C               	addwfc	___fttol@lval+1,f,c
  3226  006A1E  220D               	addwfc	___fttol@lval+2,f,c
  3227  006A20  220E               	addwfc	___fttol@lval+3,f,c
  3228  006A22                     l1248:
  3229  006A22  C00B  F001         	movff	___fttol@lval,?___fttol
  3230  006A26  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  3231  006A2A  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  3232  006A2E  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  3233  006A32  0012               	return	
  3234  006A34                     __end_of___fttol:
  3235                           	opt stack 0
  3236                           tblptru	equ	0xFF8
  3237                           prodh	equ	0xFF4
  3238                           prodl	equ	0xFF3
  3239                           intcon2	equ	0xFF1
  3240                           postinc0	equ	0xFEE
  3241                           wreg	equ	0xFE8
  3242                           indf2	equ	0xFDF
  3243                           postinc2	equ	0xFDE
  3244                           fsr2h	equ	0xFDA
  3245                           fsr2l	equ	0xFD9
  3246                           status	equ	0xFD8
  3247                           
  3248 ;; *************** function ___ftneg *****************
  3249 ;; Defined at:
  3250 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/ftneg.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  f1              3    0[COMRAM] float 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  3    0[COMRAM] float 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  3264 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0
  3265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  3267 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0
  3268 ;;Total ram usage:        3 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_readADC
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text5
  3278  005656                     __ptext5:
  3279                           	opt stack 0
  3280  005656                     ___ftneg:
  3281                           	opt stack 28
  3282                           
  3283                           ;incstack = 0
  3284  005656  5001               	movf	___ftneg@f1,w,c
  3285  005658  1002               	iorwf	___ftneg@f1+1,w,c
  3286  00565A  1003               	iorwf	___ftneg@f1+2,w,c
  3287  00565C  B4D8               	btfsc	status,2,c
  3288  00565E  D006               	goto	l1227
  3289  005660  0E00               	movlw	0
  3290  005662  1A01               	xorwf	___ftneg@f1,f,c
  3291  005664  0E00               	movlw	0
  3292  005666  1A02               	xorwf	___ftneg@f1+1,f,c
  3293  005668  0E80               	movlw	128
  3294  00566A  1A03               	xorwf	___ftneg@f1+2,f,c
  3295  00566C                     l1227:
  3296  00566C  C001  F001         	movff	___ftneg@f1,?___ftneg
  3297  005670  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  3298  005674  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  3299  005678  0012               	return		;funcret
  3300  00567A                     __end_of___ftneg:
  3301                           	opt stack 0
  3302                           tblptru	equ	0xFF8
  3303                           prodh	equ	0xFF4
  3304                           prodl	equ	0xFF3
  3305                           intcon2	equ	0xFF1
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           fsr2h	equ	0xFDA
  3311                           fsr2l	equ	0xFD9
  3312                           status	equ	0xFD8
  3313                           
  3314 ;; *************** function ___ftmul *****************
  3315 ;; Defined at:
  3316 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/ftmul.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  f1              3   27[COMRAM] float 
  3319 ;;  f2              3   30[COMRAM] float 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  3322 ;;  sign            1   41[COMRAM] unsigned char 
  3323 ;;  cntr            1   40[COMRAM] unsigned char 
  3324 ;;  exp             1   36[COMRAM] unsigned char 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  3   27[COMRAM] float 
  3327 ;; Registers used:
  3328 ;;		wreg, status,2, status,0, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  3334 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0
  3335 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0
  3336 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0
  3337 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0
  3338 ;;Total ram usage:       15 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    1
  3341 ;; This function calls:
  3342 ;;		___ftpack
  3343 ;; This function is called by:
  3344 ;;		_readADC
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text6
  3349  00684C                     __ptext6:
  3350                           	opt stack 0
  3351  00684C                     ___ftmul:
  3352                           	opt stack 27
  3353                           
  3354                           ;incstack = 0
  3355  00684C  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  3356  006850  6A23               	clrf	(??___ftmul+1)& (0+255),c
  3357  006852  6A24               	clrf	(??___ftmul+2)& (0+255),c
  3358  006854  341D               	rlcf	___ftmul@f1+1,w,c
  3359  006856  3622               	rlcf	??___ftmul& (0+255),f,c
  3360  006858  E301               	bnc	u4021
  3361  00685A  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  3362  00685C                     u4021:
  3363  00685C  5022               	movf	??___ftmul,w,c
  3364  00685E  6E25               	movwf	___ftmul@exp,c
  3365  006860  5025               	movf	___ftmul@exp,w,c
  3366  006862  A4D8               	btfss	status,2,c
  3367  006864  D007               	goto	l1216
  3368  006866  0E00               	movlw	0
  3369  006868  6E1C               	movwf	?___ftmul,c
  3370  00686A  0E00               	movlw	0
  3371  00686C  6E1D               	movwf	?___ftmul+1,c
  3372  00686E  0E00               	movlw	0
  3373  006870  6E1E               	movwf	?___ftmul+2,c
  3374  006872  0012               	return	
  3375  006874                     l1216:
  3376  006874  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  3377  006878  6A23               	clrf	(??___ftmul+1)& (0+255),c
  3378  00687A  6A24               	clrf	(??___ftmul+2)& (0+255),c
  3379  00687C  3420               	rlcf	___ftmul@f2+1,w,c
  3380  00687E  3622               	rlcf	??___ftmul& (0+255),f,c
  3381  006880  E301               	bnc	u4041
  3382  006882  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  3383  006884                     u4041:
  3384  006884  5022               	movf	??___ftmul,w,c
  3385  006886  6E2A               	movwf	___ftmul@sign,c
  3386  006888  502A               	movf	___ftmul@sign,w,c
  3387  00688A  A4D8               	btfss	status,2,c
  3388  00688C  D007               	goto	l1218
  3389  00688E  0E00               	movlw	0
  3390  006890  6E1C               	movwf	?___ftmul,c
  3391  006892  0E00               	movlw	0
  3392  006894  6E1D               	movwf	?___ftmul+1,c
  3393  006896  0E00               	movlw	0
  3394  006898  6E1E               	movwf	?___ftmul+2,c
  3395  00689A  0012               	return	
  3396  00689C                     l1218:
  3397  00689C  502A               	movf	___ftmul@sign,w,c
  3398  00689E  0F7B               	addlw	123
  3399  0068A0  2625               	addwf	___ftmul@exp,f,c
  3400  0068A2  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  3401  0068A6  5021               	movf	___ftmul@f2+2,w,c
  3402  0068A8  1A2A               	xorwf	___ftmul@sign,f,c
  3403  0068AA  0E80               	movlw	128
  3404  0068AC  162A               	andwf	___ftmul@sign,f,c
  3405  0068AE  8E1D               	bsf	___ftmul@f1+1,7,c
  3406  0068B0  8E20               	bsf	___ftmul@f2+1,7,c
  3407  0068B2  0EFF               	movlw	255
  3408  0068B4  161F               	andwf	___ftmul@f2,f,c
  3409  0068B6  0EFF               	movlw	255
  3410  0068B8  1620               	andwf	___ftmul@f2+1,f,c
  3411  0068BA  0E00               	movlw	0
  3412  0068BC  1621               	andwf	___ftmul@f2+2,f,c
  3413  0068BE  0E00               	movlw	0
  3414  0068C0  6E26               	movwf	___ftmul@f3_as_product,c
  3415  0068C2  0E00               	movlw	0
  3416  0068C4  6E27               	movwf	___ftmul@f3_as_product+1,c
  3417  0068C6  0E00               	movlw	0
  3418  0068C8  6E28               	movwf	___ftmul@f3_as_product+2,c
  3419  0068CA  0E07               	movlw	7
  3420  0068CC  6E29               	movwf	___ftmul@cntr,c
  3421  0068CE  A01C               	btfss	___ftmul@f1,0,c
  3422  0068D0  D006               	goto	l1220
  3423  0068D2  501F               	movf	___ftmul@f2,w,c
  3424  0068D4  2626               	addwf	___ftmul@f3_as_product,f,c
  3425  0068D6  5020               	movf	___ftmul@f2+1,w,c
  3426  0068D8  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  3427  0068DA  5021               	movf	___ftmul@f2+2,w,c
  3428  0068DC  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  3429  0068DE                     l1220:
  3430  0068DE  90D8               	bcf	status,0,c
  3431  0068E0  321E               	rrcf	___ftmul@f1+2,f,c
  3432  0068E2  321D               	rrcf	___ftmul@f1+1,f,c
  3433  0068E4  321C               	rrcf	___ftmul@f1,f,c
  3434  0068E6  90D8               	bcf	status,0,c
  3435  0068E8  361F               	rlcf	___ftmul@f2,f,c
  3436  0068EA  3620               	rlcf	___ftmul@f2+1,f,c
  3437  0068EC  3621               	rlcf	___ftmul@f2+2,f,c
  3438  0068EE  2E29               	decfsz	___ftmul@cntr,f,c
  3439  0068F0  D7EE               	goto	l1219
  3440  0068F2  0E09               	movlw	9
  3441  0068F4  6E29               	movwf	___ftmul@cntr,c
  3442  0068F6  A01C               	btfss	___ftmul@f1,0,c
  3443  0068F8  D006               	goto	l1223
  3444  0068FA  501F               	movf	___ftmul@f2,w,c
  3445  0068FC  2626               	addwf	___ftmul@f3_as_product,f,c
  3446  0068FE  5020               	movf	___ftmul@f2+1,w,c
  3447  006900  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  3448  006902  5021               	movf	___ftmul@f2+2,w,c
  3449  006904  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  3450  006906                     l1223:
  3451  006906  90D8               	bcf	status,0,c
  3452  006908  321E               	rrcf	___ftmul@f1+2,f,c
  3453  00690A  321D               	rrcf	___ftmul@f1+1,f,c
  3454  00690C  321C               	rrcf	___ftmul@f1,f,c
  3455  00690E  90D8               	bcf	status,0,c
  3456  006910  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  3457  006912  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  3458  006914  3226               	rrcf	___ftmul@f3_as_product,f,c
  3459  006916  2E29               	decfsz	___ftmul@cntr,f,c
  3460  006918  D7EE               	goto	l1222
  3461  00691A  C026  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3462  00691E  C027  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3463  006922  C028  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3464  006926  C025  F004         	movff	___ftmul@exp,___ftpack@exp
  3465  00692A  C02A  F005         	movff	___ftmul@sign,___ftpack@sign
  3466  00692E  EC14  F02F         	call	___ftpack	;wreg free
  3467  006932  C001  F01C         	movff	?___ftpack,?___ftmul
  3468  006936  C002  F01D         	movff	?___ftpack+1,?___ftmul+1
  3469  00693A  C003  F01E         	movff	?___ftpack+2,?___ftmul+2
  3470  00693E  0012               	return	
  3471  006940                     __end_of___ftmul:
  3472                           	opt stack 0
  3473                           tblptru	equ	0xFF8
  3474                           prodh	equ	0xFF4
  3475                           prodl	equ	0xFF3
  3476                           intcon2	equ	0xFF1
  3477                           postinc0	equ	0xFEE
  3478                           wreg	equ	0xFE8
  3479                           indf2	equ	0xFDF
  3480                           postinc2	equ	0xFDE
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8
  3484                           
  3485 ;; *************** function ___ftge *****************
  3486 ;; Defined at:
  3487 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/ftge.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;  ff1             3    0[COMRAM] float 
  3490 ;;  ff2             3    3[COMRAM] float 
  3491 ;; Auto vars:     Size  Location     Type
  3492 ;;		None
  3493 ;; Return value:  Size  Location     Type
  3494 ;;		None               void
  3495 ;; Registers used:
  3496 ;;		wreg, status,2, status,0
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  3502 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0
  3503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  3504 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0
  3505 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0
  3506 ;;Total ram usage:        9 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; This function calls:
  3509 ;;		Nothing
  3510 ;; This function is called by:
  3511 ;;		_readADC
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text7
  3516  005BD6                     __ptext7:
  3517                           	opt stack 0
  3518  005BD6                     ___ftge:
  3519                           	opt stack 28
  3520                           
  3521                           ;incstack = 0
  3522  005BD6  AE03               	btfss	___ftge@ff1+2,7,c
  3523  005BD8  D016               	goto	l1209
  3524  005BDA  C001  F007         	movff	___ftge@ff1,??___ftge
  3525  005BDE  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  3526  005BE2  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  3527  005BE6  1E07               	comf	??___ftge,f,c
  3528  005BE8  1E08               	comf	??___ftge+1,f,c
  3529  005BEA  1E09               	comf	??___ftge+2,f,c
  3530  005BEC  2A07               	incf	??___ftge,f,c
  3531  005BEE  0E00               	movlw	0
  3532  005BF0  2208               	addwfc	??___ftge+1,f,c
  3533  005BF2  2209               	addwfc	??___ftge+2,f,c
  3534  005BF4  0E00               	movlw	0
  3535  005BF6  2407               	addwf	??___ftge,w,c
  3536  005BF8  6E01               	movwf	___ftge@ff1,c
  3537  005BFA  0E00               	movlw	0
  3538  005BFC  2008               	addwfc	??___ftge+1,w,c
  3539  005BFE  6E02               	movwf	___ftge@ff1+1,c
  3540  005C00  0E80               	movlw	128
  3541  005C02  2009               	addwfc	??___ftge+2,w,c
  3542  005C04  6E03               	movwf	___ftge@ff1+2,c
  3543  005C06                     l1209:
  3544  005C06  AE06               	btfss	___ftge@ff2+2,7,c
  3545  005C08  D016               	goto	l1210
  3546  005C0A  C004  F007         	movff	___ftge@ff2,??___ftge
  3547  005C0E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  3548  005C12  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  3549  005C16  1E07               	comf	??___ftge,f,c
  3550  005C18  1E08               	comf	??___ftge+1,f,c
  3551  005C1A  1E09               	comf	??___ftge+2,f,c
  3552  005C1C  2A07               	incf	??___ftge,f,c
  3553  005C1E  0E00               	movlw	0
  3554  005C20  2208               	addwfc	??___ftge+1,f,c
  3555  005C22  2209               	addwfc	??___ftge+2,f,c
  3556  005C24  0E00               	movlw	0
  3557  005C26  2407               	addwf	??___ftge,w,c
  3558  005C28  6E04               	movwf	___ftge@ff2,c
  3559  005C2A  0E00               	movlw	0
  3560  005C2C  2008               	addwfc	??___ftge+1,w,c
  3561  005C2E  6E05               	movwf	___ftge@ff2+1,c
  3562  005C30  0E80               	movlw	128
  3563  005C32  2009               	addwfc	??___ftge+2,w,c
  3564  005C34  6E06               	movwf	___ftge@ff2+2,c
  3565  005C36                     l1210:
  3566  005C36  0E00               	movlw	0
  3567  005C38  1A01               	xorwf	___ftge@ff1,f,c
  3568  005C3A  0E00               	movlw	0
  3569  005C3C  1A02               	xorwf	___ftge@ff1+1,f,c
  3570  005C3E  0E80               	movlw	128
  3571  005C40  1A03               	xorwf	___ftge@ff1+2,f,c
  3572  005C42  0E00               	movlw	0
  3573  005C44  1A04               	xorwf	___ftge@ff2,f,c
  3574  005C46  0E00               	movlw	0
  3575  005C48  1A05               	xorwf	___ftge@ff2+1,f,c
  3576  005C4A  0E80               	movlw	128
  3577  005C4C  1A06               	xorwf	___ftge@ff2+2,f,c
  3578  005C4E  5004               	movf	___ftge@ff2,w,c
  3579  005C50  5C01               	subwf	___ftge@ff1,w,c
  3580  005C52  5005               	movf	___ftge@ff2+1,w,c
  3581  005C54  5802               	subwfb	___ftge@ff1+1,w,c
  3582  005C56  5006               	movf	___ftge@ff2+2,w,c
  3583  005C58  5803               	subwfb	___ftge@ff1+2,w,c
  3584  005C5A  B0D8               	btfsc	status,0,c
  3585  005C5C  D002               	goto	l3338
  3586  005C5E  90D8               	bcf	status,0,c
  3587  005C60  0012               	return	
  3588  005C62                     l3338:
  3589  005C62  80D8               	bsf	status,0,c
  3590  005C64  0012               	return	
  3591  005C66                     __end_of___ftge:
  3592                           	opt stack 0
  3593                           tblptru	equ	0xFF8
  3594                           prodh	equ	0xFF4
  3595                           prodl	equ	0xFF3
  3596                           intcon2	equ	0xFF1
  3597                           postinc0	equ	0xFEE
  3598                           wreg	equ	0xFE8
  3599                           indf2	equ	0xFDF
  3600                           postinc2	equ	0xFDE
  3601                           fsr2h	equ	0xFDA
  3602                           fsr2l	equ	0xFD9
  3603                           status	equ	0xFD8
  3604                           
  3605 ;; *************** function ___ftdiv *****************
  3606 ;; Defined at:
  3607 ;;		line 54 in file "/Applications/microchip/xc8/v1.45/sources/common/ftdiv.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;  f1              3   12[COMRAM] float 
  3610 ;;  f2              3   15[COMRAM] float 
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  f3              3   22[COMRAM] float 
  3613 ;;  sign            1   26[COMRAM] unsigned char 
  3614 ;;  exp             1   25[COMRAM] unsigned char 
  3615 ;;  cntr            1   21[COMRAM] unsigned char 
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  3   12[COMRAM] float 
  3618 ;; Registers used:
  3619 ;;		wreg, status,2, status,0, cstack
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  3625 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0
  3626 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0
  3627 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0
  3628 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0
  3629 ;;Total ram usage:       15 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; Hardware stack levels required when called:    1
  3632 ;; This function calls:
  3633 ;;		___ftpack
  3634 ;; This function is called by:
  3635 ;;		_readADC
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           	psect	text8
  3640  0064AA                     __ptext8:
  3641                           	opt stack 0
  3642  0064AA                     ___ftdiv:
  3643                           	opt stack 27
  3644                           
  3645                           ;incstack = 0
  3646  0064AA  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  3647  0064AE  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  3648  0064B0  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  3649  0064B2  340E               	rlcf	___ftdiv@f1+1,w,c
  3650  0064B4  3613               	rlcf	??___ftdiv& (0+255),f,c
  3651  0064B6  E301               	bnc	u3971
  3652  0064B8  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  3653  0064BA                     u3971:
  3654  0064BA  5013               	movf	??___ftdiv,w,c
  3655  0064BC  6E1A               	movwf	___ftdiv@exp,c
  3656  0064BE  501A               	movf	___ftdiv@exp,w,c
  3657  0064C0  A4D8               	btfss	status,2,c
  3658  0064C2  D007               	goto	l1201
  3659  0064C4  0E00               	movlw	0
  3660  0064C6  6E0D               	movwf	?___ftdiv,c
  3661  0064C8  0E00               	movlw	0
  3662  0064CA  6E0E               	movwf	?___ftdiv+1,c
  3663  0064CC  0E00               	movlw	0
  3664  0064CE  6E0F               	movwf	?___ftdiv+2,c
  3665  0064D0  0012               	return	
  3666  0064D2                     l1201:
  3667  0064D2  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  3668  0064D6  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  3669  0064D8  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  3670  0064DA  3411               	rlcf	___ftdiv@f2+1,w,c
  3671  0064DC  3613               	rlcf	??___ftdiv& (0+255),f,c
  3672  0064DE  E301               	bnc	u3991
  3673  0064E0  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  3674  0064E2                     u3991:
  3675  0064E2  5013               	movf	??___ftdiv,w,c
  3676  0064E4  6E1B               	movwf	___ftdiv@sign,c
  3677  0064E6  501B               	movf	___ftdiv@sign,w,c
  3678  0064E8  A4D8               	btfss	status,2,c
  3679  0064EA  D007               	goto	l1203
  3680  0064EC  0E00               	movlw	0
  3681  0064EE  6E0D               	movwf	?___ftdiv,c
  3682  0064F0  0E00               	movlw	0
  3683  0064F2  6E0E               	movwf	?___ftdiv+1,c
  3684  0064F4  0E00               	movlw	0
  3685  0064F6  6E0F               	movwf	?___ftdiv+2,c
  3686  0064F8  0012               	return	
  3687  0064FA                     l1203:
  3688  0064FA  0E00               	movlw	0
  3689  0064FC  6E17               	movwf	___ftdiv@f3,c
  3690  0064FE  0E00               	movlw	0
  3691  006500  6E18               	movwf	___ftdiv@f3+1,c
  3692  006502  0E00               	movlw	0
  3693  006504  6E19               	movwf	___ftdiv@f3+2,c
  3694  006506  501B               	movf	___ftdiv@sign,w,c
  3695  006508  0F89               	addlw	137
  3696  00650A  5E1A               	subwf	___ftdiv@exp,f,c
  3697  00650C  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  3698  006510  5012               	movf	___ftdiv@f2+2,w,c
  3699  006512  1A1B               	xorwf	___ftdiv@sign,f,c
  3700  006514  0E80               	movlw	128
  3701  006516  161B               	andwf	___ftdiv@sign,f,c
  3702  006518  8E0E               	bsf	___ftdiv@f1+1,7,c
  3703  00651A  0EFF               	movlw	255
  3704  00651C  160D               	andwf	___ftdiv@f1,f,c
  3705  00651E  0EFF               	movlw	255
  3706  006520  160E               	andwf	___ftdiv@f1+1,f,c
  3707  006522  0E00               	movlw	0
  3708  006524  160F               	andwf	___ftdiv@f1+2,f,c
  3709  006526  8E11               	bsf	___ftdiv@f2+1,7,c
  3710  006528  0EFF               	movlw	255
  3711  00652A  1610               	andwf	___ftdiv@f2,f,c
  3712  00652C  0EFF               	movlw	255
  3713  00652E  1611               	andwf	___ftdiv@f2+1,f,c
  3714  006530  0E00               	movlw	0
  3715  006532  1612               	andwf	___ftdiv@f2+2,f,c
  3716  006534  0E18               	movlw	24
  3717  006536  6E16               	movwf	___ftdiv@cntr,c
  3718  006538  90D8               	bcf	status,0,c
  3719  00653A  3617               	rlcf	___ftdiv@f3,f,c
  3720  00653C  3618               	rlcf	___ftdiv@f3+1,f,c
  3721  00653E  3619               	rlcf	___ftdiv@f3+2,f,c
  3722  006540  5010               	movf	___ftdiv@f2,w,c
  3723  006542  5C0D               	subwf	___ftdiv@f1,w,c
  3724  006544  5011               	movf	___ftdiv@f2+1,w,c
  3725  006546  580E               	subwfb	___ftdiv@f1+1,w,c
  3726  006548  5012               	movf	___ftdiv@f2+2,w,c
  3727  00654A  580F               	subwfb	___ftdiv@f1+2,w,c
  3728  00654C  A0D8               	btfss	status,0,c
  3729  00654E  D007               	goto	l1205
  3730  006550  5010               	movf	___ftdiv@f2,w,c
  3731  006552  5E0D               	subwf	___ftdiv@f1,f,c
  3732  006554  5011               	movf	___ftdiv@f2+1,w,c
  3733  006556  5A0E               	subwfb	___ftdiv@f1+1,f,c
  3734  006558  5012               	movf	___ftdiv@f2+2,w,c
  3735  00655A  5A0F               	subwfb	___ftdiv@f1+2,f,c
  3736  00655C  8017               	bsf	___ftdiv@f3,0,c
  3737  00655E                     l1205:
  3738  00655E  90D8               	bcf	status,0,c
  3739  006560  360D               	rlcf	___ftdiv@f1,f,c
  3740  006562  360E               	rlcf	___ftdiv@f1+1,f,c
  3741  006564  360F               	rlcf	___ftdiv@f1+2,f,c
  3742  006566  2E16               	decfsz	___ftdiv@cntr,f,c
  3743  006568  D7E7               	goto	l1204
  3744  00656A  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  3745  00656E  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3746  006572  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3747  006576  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  3748  00657A  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  3749  00657E  EC14  F02F         	call	___ftpack	;wreg free
  3750  006582  C001  F00D         	movff	?___ftpack,?___ftdiv
  3751  006586  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  3752  00658A  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  3753  00658E  0012               	return	
  3754  006590                     __end_of___ftdiv:
  3755                           	opt stack 0
  3756                           tblptru	equ	0xFF8
  3757                           prodh	equ	0xFF4
  3758                           prodl	equ	0xFF3
  3759                           intcon2	equ	0xFF1
  3760                           postinc0	equ	0xFEE
  3761                           wreg	equ	0xFE8
  3762                           indf2	equ	0xFDF
  3763                           postinc2	equ	0xFDE
  3764                           fsr2h	equ	0xFDA
  3765                           fsr2l	equ	0xFD9
  3766                           status	equ	0xFD8
  3767                           
  3768 ;; *************** function ___ftadd *****************
  3769 ;; Defined at:
  3770 ;;		line 86 in file "/Applications/microchip/xc8/v1.45/sources/common/ftadd.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  f1              3   42[COMRAM] float 
  3773 ;;  f2              3   45[COMRAM] float 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  exp1            1   53[COMRAM] unsigned char 
  3776 ;;  exp2            1   52[COMRAM] unsigned char 
  3777 ;;  sign            1   51[COMRAM] unsigned char 
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  3   42[COMRAM] float 
  3780 ;; Registers used:
  3781 ;;		wreg, status,2, status,0, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  3787 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0
  3788 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0
  3789 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0
  3790 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0
  3791 ;;Total ram usage:       12 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    1
  3794 ;; This function calls:
  3795 ;;		___ftpack
  3796 ;; This function is called by:
  3797 ;;		_readADC
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           	psect	text9
  3802  00758A                     __ptext9:
  3803                           	opt stack 0
  3804  00758A                     ___ftadd:
  3805                           	opt stack 27
  3806                           
  3807                           ;incstack = 0
  3808  00758A  C02D  F031         	movff	___ftadd@f1+2,??___ftadd
  3809  00758E  6A32               	clrf	(??___ftadd+1)& (0+255),c
  3810  007590  6A33               	clrf	(??___ftadd+2)& (0+255),c
  3811  007592  342C               	rlcf	___ftadd@f1+1,w,c
  3812  007594  3631               	rlcf	??___ftadd& (0+255),f,c
  3813  007596  E301               	bnc	u3761
  3814  007598  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  3815  00759A                     u3761:
  3816  00759A  5031               	movf	??___ftadd,w,c
  3817  00759C  6E36               	movwf	___ftadd@exp1,c
  3818  00759E  C030  F031         	movff	___ftadd@f2+2,??___ftadd
  3819  0075A2  6A32               	clrf	(??___ftadd+1)& (0+255),c
  3820  0075A4  6A33               	clrf	(??___ftadd+2)& (0+255),c
  3821  0075A6  342F               	rlcf	___ftadd@f2+1,w,c
  3822  0075A8  3631               	rlcf	??___ftadd& (0+255),f,c
  3823  0075AA  E301               	bnc	u3771
  3824  0075AC  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  3825  0075AE                     u3771:
  3826  0075AE  5031               	movf	??___ftadd,w,c
  3827  0075B0  6E35               	movwf	___ftadd@exp2,c
  3828  0075B2  5036               	movf	___ftadd@exp1,w,c
  3829  0075B4  B4D8               	btfsc	status,2,c
  3830  0075B6  D00B               	goto	u3800
  3831  0075B8  5035               	movf	___ftadd@exp2,w,c
  3832  0075BA  5C36               	subwf	___ftadd@exp1,w,c
  3833  0075BC  B0D8               	btfsc	status,0,c
  3834  0075BE  D00E               	goto	l1168
  3835  0075C0  5036               	movf	___ftadd@exp1,w,c
  3836  0075C2  0800               	sublw	0
  3837  0075C4  2435               	addwf	___ftadd@exp2,w,c
  3838  0075C6  6E31               	movwf	??___ftadd& (0+255),c
  3839  0075C8  0E18               	movlw	24
  3840  0075CA  6431               	cpfsgt	??___ftadd,c
  3841  0075CC  D007               	goto	l1168
  3842  0075CE                     u3800:
  3843  0075CE  C02E  F02B         	movff	___ftadd@f2,?___ftadd
  3844  0075D2  C02F  F02C         	movff	___ftadd@f2+1,?___ftadd+1
  3845  0075D6  C030  F02D         	movff	___ftadd@f2+2,?___ftadd+2
  3846  0075DA  0012               	return	
  3847  0075DC                     l1168:
  3848  0075DC  5035               	movf	___ftadd@exp2,w,c
  3849  0075DE  B4D8               	btfsc	status,2,c
  3850  0075E0  D00B               	goto	u3830
  3851  0075E2  5036               	movf	___ftadd@exp1,w,c
  3852  0075E4  5C35               	subwf	___ftadd@exp2,w,c
  3853  0075E6  B0D8               	btfsc	status,0,c
  3854  0075E8  D00E               	goto	l1172
  3855  0075EA  5035               	movf	___ftadd@exp2,w,c
  3856  0075EC  0800               	sublw	0
  3857  0075EE  2436               	addwf	___ftadd@exp1,w,c
  3858  0075F0  6E31               	movwf	??___ftadd& (0+255),c
  3859  0075F2  0E18               	movlw	24
  3860  0075F4  6431               	cpfsgt	??___ftadd,c
  3861  0075F6  D007               	goto	l1172
  3862  0075F8                     u3830:
  3863  0075F8  C02B  F02B         	movff	___ftadd@f1,?___ftadd
  3864  0075FC  C02C  F02C         	movff	___ftadd@f1+1,?___ftadd+1
  3865  007600  C02D  F02D         	movff	___ftadd@f1+2,?___ftadd+2
  3866  007604  0012               	return	
  3867  007606                     l1172:
  3868  007606  0E06               	movlw	6
  3869  007608  6E34               	movwf	___ftadd@sign,c
  3870  00760A  BE2D               	btfsc	___ftadd@f1+2,7,c
  3871  00760C  8E34               	bsf	___ftadd@sign,7,c
  3872  00760E  BE30               	btfsc	___ftadd@f2+2,7,c
  3873  007610  8C34               	bsf	___ftadd@sign,6,c
  3874  007612  8E2C               	bsf	___ftadd@f1+1,7,c
  3875  007614  0EFF               	movlw	255
  3876  007616  162B               	andwf	___ftadd@f1,f,c
  3877  007618  0EFF               	movlw	255
  3878  00761A  162C               	andwf	___ftadd@f1+1,f,c
  3879  00761C  0E00               	movlw	0
  3880  00761E  162D               	andwf	___ftadd@f1+2,f,c
  3881  007620  8E2F               	bsf	___ftadd@f2+1,7,c
  3882  007622  0EFF               	movlw	255
  3883  007624  162E               	andwf	___ftadd@f2,f,c
  3884  007626  0EFF               	movlw	255
  3885  007628  162F               	andwf	___ftadd@f2+1,f,c
  3886  00762A  0E00               	movlw	0
  3887  00762C  1630               	andwf	___ftadd@f2+2,f,c
  3888  00762E  5035               	movf	___ftadd@exp2,w,c
  3889  007630  5C36               	subwf	___ftadd@exp1,w,c
  3890  007632  B0D8               	btfsc	status,0,c
  3891  007634  D01B               	goto	l1177
  3892  007636                     u3860:
  3893  007636  90D8               	bcf	status,0,c
  3894  007638  362E               	rlcf	___ftadd@f2,f,c
  3895  00763A  362F               	rlcf	___ftadd@f2+1,f,c
  3896  00763C  3630               	rlcf	___ftadd@f2+2,f,c
  3897  00763E  0635               	decf	___ftadd@exp2,f,c
  3898  007640  5036               	movf	___ftadd@exp1,w,c
  3899  007642  1835               	xorwf	___ftadd@exp2,w,c
  3900  007644  B4D8               	btfsc	status,2,c
  3901  007646  D00D               	goto	l1182
  3902  007648  0634               	decf	___ftadd@sign,f,c
  3903  00764A  C034  F031         	movff	___ftadd@sign,??___ftadd
  3904  00764E  0E07               	movlw	7
  3905  007650  1631               	andwf	??___ftadd,f,c
  3906  007652  B4D8               	btfsc	status,2,c
  3907  007654  D006               	goto	l1182
  3908  007656  D7EF               	goto	u3860
  3909  007658  90D8               	bcf	status,0,c
  3910  00765A  322D               	rrcf	___ftadd@f1+2,f,c
  3911  00765C  322C               	rrcf	___ftadd@f1+1,f,c
  3912  00765E  322B               	rrcf	___ftadd@f1,f,c
  3913  007660  2A36               	incf	___ftadd@exp1,f,c
  3914  007662                     l1182:
  3915  007662  5035               	movf	___ftadd@exp2,w,c
  3916  007664  1836               	xorwf	___ftadd@exp1,w,c
  3917  007666  B4D8               	btfsc	status,2,c
  3918  007668  D01F               	goto	u3930
  3919  00766A  D7F6               	goto	l1183
  3920  00766C                     l1177:
  3921  00766C  5036               	movf	___ftadd@exp1,w,c
  3922  00766E  5C35               	subwf	___ftadd@exp2,w,c
  3923  007670  B0D8               	btfsc	status,0,c
  3924  007672  D01A               	goto	u3930
  3925  007674                     u3900:
  3926  007674  90D8               	bcf	status,0,c
  3927  007676  362B               	rlcf	___ftadd@f1,f,c
  3928  007678  362C               	rlcf	___ftadd@f1+1,f,c
  3929  00767A  362D               	rlcf	___ftadd@f1+2,f,c
  3930  00767C  0636               	decf	___ftadd@exp1,f,c
  3931  00767E  5036               	movf	___ftadd@exp1,w,c
  3932  007680  1835               	xorwf	___ftadd@exp2,w,c
  3933  007682  B4D8               	btfsc	status,2,c
  3934  007684  D00D               	goto	l1191
  3935  007686  0634               	decf	___ftadd@sign,f,c
  3936  007688  C034  F031         	movff	___ftadd@sign,??___ftadd
  3937  00768C  0E07               	movlw	7
  3938  00768E  1631               	andwf	??___ftadd,f,c
  3939  007690  B4D8               	btfsc	status,2,c
  3940  007692  D006               	goto	l1191
  3941  007694  D7EF               	goto	u3900
  3942  007696  90D8               	bcf	status,0,c
  3943  007698  3230               	rrcf	___ftadd@f2+2,f,c
  3944  00769A  322F               	rrcf	___ftadd@f2+1,f,c
  3945  00769C  322E               	rrcf	___ftadd@f2,f,c
  3946  00769E  2A35               	incf	___ftadd@exp2,f,c
  3947  0076A0                     l1191:
  3948  0076A0  5035               	movf	___ftadd@exp2,w,c
  3949  0076A2  1836               	xorwf	___ftadd@exp1,w,c
  3950  0076A4  A4D8               	btfss	status,2,c
  3951  0076A6  D7F7               	goto	l1192
  3952  0076A8                     u3930:
  3953  0076A8  AE34               	btfss	___ftadd@sign,7,c
  3954  0076AA  D00C               	goto	l1194
  3955  0076AC  0EFF               	movlw	255
  3956  0076AE  1A2B               	xorwf	___ftadd@f1,f,c
  3957  0076B0  0EFF               	movlw	255
  3958  0076B2  1A2C               	xorwf	___ftadd@f1+1,f,c
  3959  0076B4  0EFF               	movlw	255
  3960  0076B6  1A2D               	xorwf	___ftadd@f1+2,f,c
  3961  0076B8  0E01               	movlw	1
  3962  0076BA  262B               	addwf	___ftadd@f1,f,c
  3963  0076BC  0E00               	movlw	0
  3964  0076BE  222C               	addwfc	___ftadd@f1+1,f,c
  3965  0076C0  0E00               	movlw	0
  3966  0076C2  222D               	addwfc	___ftadd@f1+2,f,c
  3967  0076C4                     l1194:
  3968  0076C4  AC34               	btfss	___ftadd@sign,6,c
  3969  0076C6  D00C               	goto	l1195
  3970  0076C8  0EFF               	movlw	255
  3971  0076CA  1A2E               	xorwf	___ftadd@f2,f,c
  3972  0076CC  0EFF               	movlw	255
  3973  0076CE  1A2F               	xorwf	___ftadd@f2+1,f,c
  3974  0076D0  0EFF               	movlw	255
  3975  0076D2  1A30               	xorwf	___ftadd@f2+2,f,c
  3976  0076D4  0E01               	movlw	1
  3977  0076D6  262E               	addwf	___ftadd@f2,f,c
  3978  0076D8  0E00               	movlw	0
  3979  0076DA  222F               	addwfc	___ftadd@f2+1,f,c
  3980  0076DC  0E00               	movlw	0
  3981  0076DE  2230               	addwfc	___ftadd@f2+2,f,c
  3982  0076E0                     l1195:
  3983  0076E0  0E00               	movlw	0
  3984  0076E2  6E34               	movwf	___ftadd@sign,c
  3985  0076E4  502B               	movf	___ftadd@f1,w,c
  3986  0076E6  262E               	addwf	___ftadd@f2,f,c
  3987  0076E8  502C               	movf	___ftadd@f1+1,w,c
  3988  0076EA  222F               	addwfc	___ftadd@f2+1,f,c
  3989  0076EC  502D               	movf	___ftadd@f1+2,w,c
  3990  0076EE  2230               	addwfc	___ftadd@f2+2,f,c
  3991  0076F0  AE30               	btfss	___ftadd@f2+2,7,c
  3992  0076F2  D00E               	goto	l1196
  3993  0076F4  0EFF               	movlw	255
  3994  0076F6  1A2E               	xorwf	___ftadd@f2,f,c
  3995  0076F8  0EFF               	movlw	255
  3996  0076FA  1A2F               	xorwf	___ftadd@f2+1,f,c
  3997  0076FC  0EFF               	movlw	255
  3998  0076FE  1A30               	xorwf	___ftadd@f2+2,f,c
  3999  007700  0E01               	movlw	1
  4000  007702  262E               	addwf	___ftadd@f2,f,c
  4001  007704  0E00               	movlw	0
  4002  007706  222F               	addwfc	___ftadd@f2+1,f,c
  4003  007708  0E00               	movlw	0
  4004  00770A  2230               	addwfc	___ftadd@f2+2,f,c
  4005  00770C  0E01               	movlw	1
  4006  00770E  6E34               	movwf	___ftadd@sign,c
  4007  007710                     l1196:
  4008  007710  C02E  F001         	movff	___ftadd@f2,___ftpack@arg
  4009  007714  C02F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4010  007718  C030  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4011  00771C  C036  F004         	movff	___ftadd@exp1,___ftpack@exp
  4012  007720  C034  F005         	movff	___ftadd@sign,___ftpack@sign
  4013  007724  EC14  F02F         	call	___ftpack	;wreg free
  4014  007728  C001  F02B         	movff	?___ftpack,?___ftadd
  4015  00772C  C002  F02C         	movff	?___ftpack+1,?___ftadd+1
  4016  007730  C003  F02D         	movff	?___ftpack+2,?___ftadd+2
  4017  007734  0012               	return	
  4018  007736                     __end_of___ftadd:
  4019                           	opt stack 0
  4020                           tblptru	equ	0xFF8
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           intcon2	equ	0xFF1
  4024                           postinc0	equ	0xFEE
  4025                           wreg	equ	0xFE8
  4026                           indf2	equ	0xFDF
  4027                           postinc2	equ	0xFDE
  4028                           fsr2h	equ	0xFDA
  4029                           fsr2l	equ	0xFD9
  4030                           status	equ	0xFD8
  4031                           
  4032 ;; *************** function ___awtoft *****************
  4033 ;; Defined at:
  4034 ;;		line 32 in file "/Applications/microchip/xc8/v1.45/sources/common/awtoft.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  c               2    8[COMRAM] int 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  sign            1   11[COMRAM] unsigned char 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  3    8[COMRAM] float 
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  4048 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0
  4049 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0
  4050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  4051 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0
  4052 ;;Total ram usage:        4 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    1
  4055 ;; This function calls:
  4056 ;;		___ftpack
  4057 ;; This function is called by:
  4058 ;;		_readADC
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text10
  4063  005764                     __ptext10:
  4064                           	opt stack 0
  4065  005764                     ___awtoft:
  4066                           	opt stack 27
  4067                           
  4068                           ;incstack = 0
  4069  005764  0E00               	movlw	0
  4070  005766  6E0C               	movwf	___awtoft@sign,c
  4071  005768  AE0A               	btfss	___awtoft@c+1,7,c
  4072  00576A  D006               	goto	l1118
  4073  00576C  6C09               	negf	___awtoft@c,c
  4074  00576E  1E0A               	comf	___awtoft@c+1,f,c
  4075  005770  B0D8               	btfsc	status,0,c
  4076  005772  2A0A               	incf	___awtoft@c+1,f,c
  4077  005774  0E01               	movlw	1
  4078  005776  6E0C               	movwf	___awtoft@sign,c
  4079  005778                     l1118:
  4080  005778  C009  F001         	movff	___awtoft@c,___ftpack@arg
  4081  00577C  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  4082  005780  6A03               	clrf	___ftpack@arg+2,c
  4083  005782  0E8E               	movlw	142
  4084  005784  6E04               	movwf	___ftpack@exp,c
  4085  005786  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  4086  00578A  EC14  F02F         	call	___ftpack	;wreg free
  4087  00578E  C001  F009         	movff	?___ftpack,?___awtoft
  4088  005792  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  4089  005796  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  4090  00579A  0012               	return	
  4091  00579C                     __end_of___awtoft:
  4092                           	opt stack 0
  4093                           tblptru	equ	0xFF8
  4094                           prodh	equ	0xFF4
  4095                           prodl	equ	0xFF3
  4096                           intcon2	equ	0xFF1
  4097                           postinc0	equ	0xFEE
  4098                           wreg	equ	0xFE8
  4099                           indf2	equ	0xFDF
  4100                           postinc2	equ	0xFDE
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8
  4104                           
  4105 ;; *************** function ___ftpack *****************
  4106 ;; Defined at:
  4107 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/float.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  arg             3    0[COMRAM] unsigned um
  4110 ;;  exp             1    3[COMRAM] unsigned char 
  4111 ;;  sign            1    4[COMRAM] unsigned char 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;		None
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  3    0[COMRAM] float 
  4116 ;; Registers used:
  4117 ;;		wreg, status,2, status,0
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  4123 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0
  4124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  4125 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0
  4126 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0
  4127 ;;Total ram usage:        8 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; This function calls:
  4130 ;;		Nothing
  4131 ;; This function is called by:
  4132 ;;		___awtoft
  4133 ;;		___ftadd
  4134 ;;		___ftdiv
  4135 ;;		___ftmul
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           	psect	text11
  4140  005E28                     __ptext11:
  4141                           	opt stack 0
  4142  005E28                     ___ftpack:
  4143                           	opt stack 27
  4144                           
  4145                           ;incstack = 0
  4146  005E28  5004               	movf	___ftpack@exp,w,c
  4147  005E2A  B4D8               	btfsc	status,2,c
  4148  005E2C  D005               	goto	u3610
  4149  005E2E  5001               	movf	___ftpack@arg,w,c
  4150  005E30  1002               	iorwf	___ftpack@arg+1,w,c
  4151  005E32  1003               	iorwf	___ftpack@arg+2,w,c
  4152  005E34  A4D8               	btfss	status,2,c
  4153  005E36  D00C               	goto	l1137
  4154  005E38                     u3610:
  4155  005E38  0E00               	movlw	0
  4156  005E3A  6E01               	movwf	?___ftpack,c
  4157  005E3C  0E00               	movlw	0
  4158  005E3E  6E02               	movwf	?___ftpack+1,c
  4159  005E40  0E00               	movlw	0
  4160  005E42  6E03               	movwf	?___ftpack+2,c
  4161  005E44  0012               	return	
  4162  005E46  2A04               	incf	___ftpack@exp,f,c
  4163  005E48  90D8               	bcf	status,0,c
  4164  005E4A  3203               	rrcf	___ftpack@arg+2,f,c
  4165  005E4C  3202               	rrcf	___ftpack@arg+1,f,c
  4166  005E4E  3201               	rrcf	___ftpack@arg,f,c
  4167  005E50                     l1137:
  4168  005E50  0E00               	movlw	0
  4169  005E52  1401               	andwf	___ftpack@arg,w,c
  4170  005E54  6E06               	movwf	??___ftpack& (0+255),c
  4171  005E56  0E00               	movlw	0
  4172  005E58  1402               	andwf	___ftpack@arg+1,w,c
  4173  005E5A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4174  005E5C  0EFE               	movlw	254
  4175  005E5E  1403               	andwf	___ftpack@arg+2,w,c
  4176  005E60  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4177  005E62  5006               	movf	??___ftpack,w,c
  4178  005E64  1007               	iorwf	??___ftpack+1,w,c
  4179  005E66  1008               	iorwf	??___ftpack+2,w,c
  4180  005E68  B4D8               	btfsc	status,2,c
  4181  005E6A  D00C               	goto	l1140
  4182  005E6C  D7EC               	goto	l1138
  4183  005E6E  2A04               	incf	___ftpack@exp,f,c
  4184  005E70  0E01               	movlw	1
  4185  005E72  2601               	addwf	___ftpack@arg,f,c
  4186  005E74  0E00               	movlw	0
  4187  005E76  2202               	addwfc	___ftpack@arg+1,f,c
  4188  005E78  0E00               	movlw	0
  4189  005E7A  2203               	addwfc	___ftpack@arg+2,f,c
  4190  005E7C  90D8               	bcf	status,0,c
  4191  005E7E  3203               	rrcf	___ftpack@arg+2,f,c
  4192  005E80  3202               	rrcf	___ftpack@arg+1,f,c
  4193  005E82  3201               	rrcf	___ftpack@arg,f,c
  4194  005E84                     l1140:
  4195  005E84  0E00               	movlw	0
  4196  005E86  1401               	andwf	___ftpack@arg,w,c
  4197  005E88  6E06               	movwf	??___ftpack& (0+255),c
  4198  005E8A  0E00               	movlw	0
  4199  005E8C  1402               	andwf	___ftpack@arg+1,w,c
  4200  005E8E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4201  005E90  0EFF               	movlw	255
  4202  005E92  1403               	andwf	___ftpack@arg+2,w,c
  4203  005E94  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4204  005E96  5006               	movf	??___ftpack,w,c
  4205  005E98  1007               	iorwf	??___ftpack+1,w,c
  4206  005E9A  1008               	iorwf	??___ftpack+2,w,c
  4207  005E9C  B4D8               	btfsc	status,2,c
  4208  005E9E  D006               	goto	l1143
  4209  005EA0  D7E6               	goto	l1141
  4210  005EA2  0604               	decf	___ftpack@exp,f,c
  4211  005EA4  90D8               	bcf	status,0,c
  4212  005EA6  3601               	rlcf	___ftpack@arg,f,c
  4213  005EA8  3602               	rlcf	___ftpack@arg+1,f,c
  4214  005EAA  3603               	rlcf	___ftpack@arg+2,f,c
  4215  005EAC                     l1143:
  4216  005EAC  BE02               	btfsc	___ftpack@arg+1,7,c
  4217  005EAE  D003               	goto	u3650
  4218  005EB0  0E02               	movlw	2
  4219  005EB2  6004               	cpfslt	___ftpack@exp,c
  4220  005EB4  D7F6               	goto	l1144
  4221  005EB6                     u3650:
  4222  005EB6  A004               	btfss	___ftpack@exp,0,c
  4223  005EB8  9E02               	bcf	___ftpack@arg+1,7,c
  4224  005EBA  90D8               	bcf	status,0,c
  4225  005EBC  3204               	rrcf	___ftpack@exp,f,c
  4226  005EBE  5004               	movf	___ftpack@exp,w,c
  4227  005EC0  1203               	iorwf	___ftpack@arg+2,f,c
  4228  005EC2  5005               	movf	___ftpack@sign,w,c
  4229  005EC4  A4D8               	btfss	status,2,c
  4230  005EC6  8E03               	bsf	___ftpack@arg+2,7,c
  4231  005EC8  C001  F001         	movff	___ftpack@arg,?___ftpack
  4232  005ECC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4233  005ED0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4234  005ED4  0012               	return	
  4235  005ED6                     __end_of___ftpack:
  4236                           	opt stack 0
  4237                           tblptru	equ	0xFF8
  4238                           prodh	equ	0xFF4
  4239                           prodl	equ	0xFF3
  4240                           intcon2	equ	0xFF1
  4241                           postinc0	equ	0xFEE
  4242                           wreg	equ	0xFE8
  4243                           indf2	equ	0xFDF
  4244                           postinc2	equ	0xFDE
  4245                           fsr2h	equ	0xFDA
  4246                           fsr2l	equ	0xFD9
  4247                           status	equ	0xFD8
  4248                           
  4249 ;; *************** function _processKeyboard *****************
  4250 ;; Defined at:
  4251 ;;		line 192 in file "../keyboard.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;		None
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;  keyArray       12    9[COMRAM] unsigned int [6]
  4256 ;;  key             2   27[COMRAM] unsigned int 
  4257 ;;  keysDetected    2   25[COMRAM] unsigned int 
  4258 ;;  modifier        2   23[COMRAM] unsigned int 
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  1    wreg      void 
  4261 ;; Registers used:
  4262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4263 ;; Tracked objects:
  4264 ;;		On entry : 0/0
  4265 ;;		On exit  : 0/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  4268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  4269 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0
  4270 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0
  4271 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0
  4272 ;;Total ram usage:       22 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; Hardware stack levels required when called:    1
  4275 ;; This function calls:
  4276 ;;		_USBTransferOnePacket
  4277 ;; This function is called by:
  4278 ;;		_main
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text12
  4283  006FAE                     __ptext12:
  4284                           	opt stack 0
  4285  006FAE                     _processKeyboard:
  4286                           	opt stack 29
  4287                           
  4288                           ;keyboard.c: 194: unsigned keyArray[6];
  4289                           ;keyboard.c: 195: unsigned keysDetected = 0;
  4290                           
  4291                           ;incstack = 0
  4292  006FAE  0E00               	movlw	0
  4293  006FB0  6E1B               	movwf	processKeyboard@keysDetected+1,c
  4294  006FB2  0E00               	movlw	0
  4295  006FB4  6E1A               	movwf	processKeyboard@keysDetected,c
  4296                           
  4297                           ;keyboard.c: 196: unsigned key;
  4298                           ;keyboard.c: 198: unsigned modifier = 0;
  4299  006FB6  0E00               	movlw	0
  4300  006FB8  6E19               	movwf	processKeyboard@modifier+1,c
  4301  006FBA  0E00               	movlw	0
  4302  006FBC  6E18               	movwf	processKeyboard@modifier,c
  4303                           
  4304                           ;keyboard.c: 201: for (key = 0; key < 6; key++) keyArray[key] = 0;
  4305  006FBE  0E00               	movlw	0
  4306  006FC0  6E1D               	movwf	processKeyboard@key+1,c
  4307  006FC2  0E00               	movlw	0
  4308  006FC4  6E1C               	movwf	processKeyboard@key,c
  4309  006FC6                     l4976:
  4310  006FC6  501D               	movf	processKeyboard@key+1,w,c
  4311  006FC8  E114               	bnz	l4986
  4312  006FCA  0E06               	movlw	6
  4313  006FCC  5C1C               	subwf	processKeyboard@key,w,c
  4314  006FCE  B0D8               	btfsc	status,0,c
  4315  006FD0  D010               	goto	u5740
  4316  006FD2  90D8               	bcf	status,0,c
  4317  006FD4  341C               	rlcf	processKeyboard@key,w,c
  4318  006FD6  6ED9               	movwf	fsr2l,c
  4319  006FD8  341D               	rlcf	processKeyboard@key+1,w,c
  4320  006FDA  6EDA               	movwf	fsr2h,c
  4321  006FDC  0E0A               	movlw	low processKeyboard@keyArray
  4322  006FDE  26D9               	addwf	fsr2l,f,c
  4323  006FE0  0E00               	movlw	high processKeyboard@keyArray
  4324  006FE2  22DA               	addwfc	fsr2h,f,c
  4325  006FE4  0E00               	movlw	0
  4326  006FE6  6EDE               	movwf	postinc2,c
  4327  006FE8  0E00               	movlw	0
  4328  006FEA  6EDD               	movwf	postdec2,c
  4329  006FEC  4A1C               	infsnz	processKeyboard@key,f,c
  4330  006FEE  2A1D               	incf	processKeyboard@key+1,f,c
  4331  006FF0  D7EA               	goto	l4976
  4332  006FF2                     u5740:
  4333  006FF2                     l4986:
  4334                           
  4335                           ;keyboard.c: 205: if(!(lastINTransmission_k1==0?0:((volatile BDT_ENTRY*)lastINTransmissi
      +                          on_k1)->STAT.UOWN))
  4336  006FF2  0100               	movlb	0	; () banked
  4337  006FF4  51B5               	movf	_lastINTransmission_k1& (0+255),w,b
  4338  006FF6  11B6               	iorwf	(_lastINTransmission_k1+1)& (0+255),w,b
  4339  006FF8  B4D8               	btfsc	status,2,c
  4340  006FFA  D00E               	goto	l910
  4341                           
  4342                           ; BSR set to: 0
  4343  006FFC  C0B5  FFD9         	movff	_lastINTransmission_k1,fsr2l
  4344  007000  C0B6  FFDA         	movff	_lastINTransmission_k1+1,fsr2h
  4345  007004  AEDF               	btfss	indf2,7,c
  4346  007006  D003               	goto	u5760
  4347  007008  6A08               	clrf	??_processKeyboard& (0+255),c
  4348  00700A  2A08               	incf	??_processKeyboard& (0+255),f,c
  4349  00700C  D001               	goto	u5768
  4350  00700E                     u5760:
  4351  00700E  6A08               	clrf	??_processKeyboard& (0+255),c
  4352  007010                     u5768:
  4353  007010  5008               	movf	??_processKeyboard,w,c
  4354  007012  6E16               	movwf	_processKeyboard$3496,c
  4355  007014  6A17               	clrf	_processKeyboard$3496+1,c
  4356  007016  D004               	goto	l912
  4357  007018                     l910:
  4358  007018  0E00               	movlw	0
  4359  00701A  6E17               	movwf	_processKeyboard$3496+1,c
  4360  00701C  0E00               	movlw	0
  4361  00701E  6E16               	movwf	_processKeyboard$3496,c
  4362  007020                     l912:
  4363  007020  5016               	movf	_processKeyboard$3496,w,c
  4364  007022  1017               	iorwf	_processKeyboard$3496+1,w,c
  4365  007024  A4D8               	btfss	status,2,c
  4366  007026  0012               	return	
  4367                           
  4368                           ;keyboard.c: 206: {
  4369                           ;keyboard.c: 223: for (key = 0; key < 65; key++)
  4370  007028  0E00               	movlw	0
  4371  00702A  6E1D               	movwf	processKeyboard@key+1,c
  4372  00702C  0E00               	movlw	0
  4373  00702E  6E1C               	movwf	processKeyboard@key,c
  4374  007030  501D               	movf	processKeyboard@key+1,w,c
  4375  007032  E149               	bnz	l914
  4376  007034  D044               	goto	L6
  4377  007036                     
  4378                           ;keyboard.c: 224: {
  4379                           ;keyboard.c: 225: if (keyboard[key].state == 1 && keysDetected < 6)
  4380  007036  90D8               	bcf	status,0,c
  4381  007038  341C               	rlcf	processKeyboard@key,w,c
  4382  00703A  6ED9               	movwf	fsr2l,c
  4383  00703C  341D               	rlcf	processKeyboard@key+1,w,c
  4384  00703E  6EDA               	movwf	fsr2h,c
  4385  007040  0E00               	movlw	low _keyboard
  4386  007042  26D9               	addwf	fsr2l,f,c
  4387  007044  0E01               	movlw	high _keyboard
  4388  007046  22DA               	addwfc	fsr2h,f,c
  4389  007048  04DE               	decf	postinc2,w,c
  4390  00704A  A4D8               	btfss	status,2,c
  4391  00704C  D034               	goto	l921
  4392  00704E  501B               	movf	processKeyboard@keysDetected+1,w,c
  4393  007050  E132               	bnz	l5020
  4394  007052  0E06               	movlw	6
  4395  007054  5C1A               	subwf	processKeyboard@keysDetected,w,c
  4396  007056  B0D8               	btfsc	status,0,c
  4397  007058  D02E               	goto	l921
  4398                           
  4399                           ;keyboard.c: 226: {
  4400                           ;keyboard.c: 227: if (key == 5)
  4401  00705A  0E05               	movlw	5
  4402  00705C  181C               	xorwf	processKeyboard@key,w,c
  4403  00705E  101D               	iorwf	processKeyboard@key+1,w,c
  4404  007060  A4D8               	btfss	status,2,c
  4405  007062  D002               	goto	l916
  4406                           
  4407                           ;keyboard.c: 228: modifier |= 0b00000001;
  4408  007064  8018               	bsf	processKeyboard@modifier,0,c
  4409  007066  D027               	goto	l921
  4410  007068                     l916:
  4411                           
  4412                           ;keyboard.c: 229: else if (key == 11)
  4413  007068  0E0B               	movlw	11
  4414  00706A  181C               	xorwf	processKeyboard@key,w,c
  4415  00706C  101D               	iorwf	processKeyboard@key+1,w,c
  4416  00706E  A4D8               	btfss	status,2,c
  4417  007070  D002               	goto	l918
  4418                           
  4419                           ;keyboard.c: 230: modifier |= 0b00000010;
  4420  007072  8218               	bsf	processKeyboard@modifier,1,c
  4421  007074  D020               	goto	l921
  4422  007076                     l918:
  4423                           
  4424                           ;keyboard.c: 231: else if (key == 52)
  4425  007076  0E34               	movlw	52
  4426  007078  181C               	xorwf	processKeyboard@key,w,c
  4427  00707A  101D               	iorwf	processKeyboard@key+1,w,c
  4428  00707C  A4D8               	btfss	status,2,c
  4429  00707E  D002               	goto	l920
  4430                           
  4431                           ;keyboard.c: 232: modifier |= 0b00100000;
  4432  007080  8A18               	bsf	processKeyboard@modifier,5,c
  4433  007082  D019               	goto	l921
  4434  007084                     l920:
  4435                           
  4436                           ;keyboard.c: 233: else
  4437                           ;keyboard.c: 234: {
  4438                           ;keyboard.c: 236: keyArray[keysDetected] = keymap[key];
  4439  007084  0EC3               	movlw	low _keymap
  4440  007086  241C               	addwf	processKeyboard@key,w,c
  4441  007088  6EF6               	movwf	tblptrl,c
  4442  00708A  0E7D               	movlw	high _keymap
  4443  00708C  201D               	addwfc	processKeyboard@key+1,w,c
  4444  00708E  6EF7               	movwf	tblptrh,c
  4445  007090                     	if	0	;There are less than 3 active tblptr bytes
  4446  007090                     	endif
  4447  007090  0008               	tblrd		*
  4448  007092  50F5               	movf	tablat,w,c
  4449  007094  6E08               	movwf	??_processKeyboard& (0+255),c
  4450  007096  6A09               	clrf	(??_processKeyboard+1)& (0+255),c
  4451  007098  90D8               	bcf	status,0,c
  4452  00709A  341A               	rlcf	processKeyboard@keysDetected,w,c
  4453  00709C  6ED9               	movwf	fsr2l,c
  4454  00709E  341B               	rlcf	processKeyboard@keysDetected+1,w,c
  4455  0070A0  6EDA               	movwf	fsr2h,c
  4456  0070A2  0E0A               	movlw	low processKeyboard@keyArray
  4457  0070A4  26D9               	addwf	fsr2l,f,c
  4458  0070A6  0E00               	movlw	high processKeyboard@keyArray
  4459  0070A8  22DA               	addwfc	fsr2h,f,c
  4460  0070AA  C008  FFDE         	movff	??_processKeyboard,postinc2
  4461  0070AE  C009  FFDD         	movff	??_processKeyboard+1,postdec2
  4462                           
  4463                           ;keyboard.c: 237: keysDetected++;
  4464  0070B2  4A1A               	infsnz	processKeyboard@keysDetected,f,c
  4465  0070B4  2A1B               	incf	processKeyboard@keysDetected+1,f,c
  4466  0070B6                     l921:
  4467  0070B6                     l5020:
  4468  0070B6  4A1C               	infsnz	processKeyboard@key,f,c
  4469  0070B8  2A1D               	incf	processKeyboard@key+1,f,c
  4470  0070BA  501D               	movf	processKeyboard@key+1,w,c
  4471  0070BC  E104               	bnz	u5840
  4472  0070BE                     L6:
  4473  0070BE  0E41               	movlw	65
  4474  0070C0  5C1C               	subwf	processKeyboard@key,w,c
  4475  0070C2  A0D8               	btfss	status,0,c
  4476  0070C4  D7B8               	goto	l913
  4477  0070C6                     u5840:
  4478  0070C6                     l914:
  4479                           
  4480                           ;keyboard.c: 238: }
  4481                           ;keyboard.c: 239: }
  4482                           ;keyboard.c: 240: }
  4483                           ;keyboard.c: 243: hid_report_in_k1[0] = modifier;
  4484  0070C6  C018  F67B         	movff	processKeyboard@modifier,1659	;volatile
  4485                           
  4486                           ;keyboard.c: 244: hid_report_in_k1[1] = 0;
  4487  0070CA  0E00               	movlw	0
  4488  0070CC  0106               	movlb	6	; () banked
  4489  0070CE  6F7C               	movwf	124,b	;volatile
  4490                           
  4491                           ; BSR set to: 6
  4492                           ;keyboard.c: 245: hid_report_in_k1[2] = keyArray[0];
  4493  0070D0  C00A  F67D         	movff	processKeyboard@keyArray,1661	;volatile
  4494                           
  4495                           ; BSR set to: 6
  4496                           ;keyboard.c: 246: hid_report_in_k1[3] = keyArray[1];
  4497  0070D4  C00C  F67E         	movff	processKeyboard@keyArray+2,1662	;volatile
  4498                           
  4499                           ; BSR set to: 6
  4500                           ;keyboard.c: 247: hid_report_in_k1[4] = keyArray[2];
  4501  0070D8  C00E  F67F         	movff	processKeyboard@keyArray+4,1663	;volatile
  4502                           
  4503                           ; BSR set to: 6
  4504                           ;keyboard.c: 248: hid_report_in_k1[5] = keyArray[3];
  4505  0070DC  C010  F680         	movff	processKeyboard@keyArray+6,1664	;volatile
  4506                           
  4507                           ; BSR set to: 6
  4508                           ;keyboard.c: 249: hid_report_in_k1[6] = keyArray[4];
  4509  0070E0  C012  F681         	movff	processKeyboard@keyArray+8,1665	;volatile
  4510                           
  4511                           ; BSR set to: 6
  4512                           ;keyboard.c: 250: hid_report_in_k1[7] = keyArray[5];
  4513  0070E4  C014  F682         	movff	processKeyboard@keyArray+10,1666	;volatile
  4514                           
  4515                           ; BSR set to: 6
  4516                           ;keyboard.c: 253: lastINTransmission_k1 = USBTransferOnePacket(3,1,(BYTE*)hid_report_in_
      +                          k1,0x08);
  4517  0070E8  0E01               	movlw	1
  4518  0070EA  6E01               	movwf	USBTransferOnePacket@dir,c
  4519  0070EC  0E7B               	movlw	123
  4520  0070EE  6E02               	movwf	USBTransferOnePacket@data,c
  4521  0070F0  0E06               	movlw	6
  4522  0070F2  6E03               	movwf	USBTransferOnePacket@data+1,c
  4523  0070F4  0E08               	movlw	8
  4524  0070F6  6E04               	movwf	USBTransferOnePacket@len,c
  4525  0070F8  0E03               	movlw	3
  4526  0070FA  ECC6  F02E         	call	_USBTransferOnePacket
  4527  0070FE  C001  F0B5         	movff	?_USBTransferOnePacket,_lastINTransmission_k1
  4528  007102  C002  F0B6         	movff	?_USBTransferOnePacket+1,_lastINTransmission_k1+1
  4529  007106  0012               	return	
  4530  007108                     __end_of_processKeyboard:
  4531                           	opt stack 0
  4532                           tblptru	equ	0xFF8
  4533                           tblptrh	equ	0xFF7
  4534                           tblptrl	equ	0xFF6
  4535                           tablat	equ	0xFF5
  4536                           prodh	equ	0xFF4
  4537                           prodl	equ	0xFF3
  4538                           intcon2	equ	0xFF1
  4539                           postinc0	equ	0xFEE
  4540                           wreg	equ	0xFE8
  4541                           indf2	equ	0xFDF
  4542                           postinc2	equ	0xFDE
  4543                           postdec2	equ	0xFDD
  4544                           fsr2h	equ	0xFDA
  4545                           fsr2l	equ	0xFD9
  4546                           status	equ	0xFD8
  4547                           
  4548 ;; *************** function _processJoystick_j2 *****************
  4549 ;; Defined at:
  4550 ;;		line 251 in file "../joystick.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;		None
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;		None
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  1    wreg      void 
  4557 ;; Registers used:
  4558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  4564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  4565 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0
  4566 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0
  4567 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0
  4568 ;;Total ram usage:        3 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    1
  4571 ;; This function calls:
  4572 ;;		_USBTransferOnePacket
  4573 ;; This function is called by:
  4574 ;;		_main
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           	psect	text13
  4579  006678                     __ptext13:
  4580                           	opt stack 0
  4581  006678                     _processJoystick_j2:
  4582                           	opt stack 29
  4583                           
  4584                           ;joystick.c: 254: if(!(lastTransmission_j2==0?0:((volatile BDT_ENTRY*)lastTransmission_j
      +                          2)->STAT.UOWN))
  4585                           
  4586                           ;incstack = 0
  4587  006678  0100               	movlb	0	; () banked
  4588  00667A  51AF               	movf	_lastTransmission_j2& (0+255),w,b
  4589  00667C  11B0               	iorwf	(_lastTransmission_j2+1)& (0+255),w,b
  4590  00667E  B4D8               	btfsc	status,2,c
  4591  006680  D00E               	goto	l681
  4592                           
  4593                           ; BSR set to: 0
  4594  006682  C0AF  FFD9         	movff	_lastTransmission_j2,fsr2l
  4595  006686  C0B0  FFDA         	movff	_lastTransmission_j2+1,fsr2h
  4596  00668A  AEDF               	btfss	indf2,7,c
  4597  00668C  D003               	goto	u5630
  4598  00668E  6A08               	clrf	??_processJoystick_j2& (0+255),c
  4599  006690  2A08               	incf	??_processJoystick_j2& (0+255),f,c
  4600  006692  D001               	goto	u5638
  4601  006694                     u5630:
  4602  006694  6A08               	clrf	??_processJoystick_j2& (0+255),c
  4603  006696                     u5638:
  4604  006696  5008               	movf	??_processJoystick_j2,w,c
  4605  006698  6E09               	movwf	_processJoystick_j2$3124,c
  4606  00669A  6A0A               	clrf	_processJoystick_j2$3124+1,c
  4607  00669C  D004               	goto	l683
  4608  00669E                     l681:
  4609  00669E  0E00               	movlw	0
  4610  0066A0  6E0A               	movwf	_processJoystick_j2$3124+1,c
  4611  0066A2  0E00               	movlw	0
  4612  0066A4  6E09               	movwf	_processJoystick_j2$3124,c
  4613  0066A6                     l683:
  4614  0066A6  5009               	movf	_processJoystick_j2$3124,w,c
  4615  0066A8  100A               	iorwf	_processJoystick_j2$3124+1,w,c
  4616  0066AA  A4D8               	btfss	status,2,c
  4617  0066AC  0012               	return	
  4618                           
  4619                           ;joystick.c: 255: {
  4620                           ;joystick.c: 257: joystick_input_j2.members.buttons.x = 0;
  4621  0066AE  0106               	movlb	6	; () banked
  4622  0066B0  9356               	bcf	86,1,b
  4623                           
  4624                           ;joystick.c: 258: joystick_input_j2.members.buttons.square = 0;
  4625  0066B2  9156               	bcf	86,0,b
  4626                           
  4627                           ;joystick.c: 259: joystick_input_j2.members.buttons.o = 0;
  4628  0066B4  9556               	bcf	86,2,b
  4629                           
  4630                           ;joystick.c: 260: joystick_input_j2.members.buttons.triangle = 0;
  4631  0066B6  9756               	bcf	86,3,b
  4632                           
  4633                           ;joystick.c: 261: joystick_input_j2.members.buttons.L1 = 0;
  4634  0066B8  9956               	bcf	86,4,b
  4635                           
  4636                           ;joystick.c: 262: joystick_input_j2.members.buttons.R1 = 0;
  4637  0066BA  9B56               	bcf	86,5,b
  4638                           
  4639                           ;joystick.c: 263: joystick_input_j2.members.buttons.L2 = 0;
  4640  0066BC  9D56               	bcf	86,6,b
  4641                           
  4642                           ;joystick.c: 264: joystick_input_j2.members.buttons.R2 = 0;
  4643  0066BE  9F56               	bcf	86,7,b
  4644                           
  4645                           ;joystick.c: 265: joystick_input_j2.members.buttons.select = 0;
  4646  0066C0  9157               	bcf	87,0,b
  4647                           
  4648                           ;joystick.c: 266: joystick_input_j2.members.buttons.start = 0;
  4649  0066C2  9357               	bcf	87,1,b
  4650                           
  4651                           ;joystick.c: 267: joystick_input_j2.members.buttons.left_stick = 0;
  4652  0066C4  9557               	bcf	87,2,b
  4653                           
  4654                           ;joystick.c: 268: joystick_input_j2.members.buttons.right_stick = 0;
  4655  0066C6  9757               	bcf	87,3,b
  4656                           
  4657                           ;joystick.c: 269: joystick_input_j2.members.buttons.home = 0;
  4658  0066C8  9957               	bcf	87,4,b
  4659                           
  4660                           ; BSR set to: 6
  4661                           ;joystick.c: 270: joystick_input_j2.members.hat_switch.hat_switch = 0x8;
  4662  0066CA  5158               	movf	88,w,b
  4663  0066CC  0BF0               	andlw	-16
  4664  0066CE  0908               	iorlw	8
  4665  0066D0  6F58               	movwf	88,b
  4666                           
  4667                           ;joystick.c: 273: joystick_input_j2.members.analog_stick.X = 128;
  4668  0066D2  0E80               	movlw	128
  4669  0066D4  6F59               	movwf	89,b
  4670                           
  4671                           ;joystick.c: 274: joystick_input_j2.members.analog_stick.Y = 128;
  4672  0066D6  0E80               	movlw	128
  4673  0066D8  6F5A               	movwf	90,b
  4674                           
  4675                           ; BSR set to: 6
  4676                           ;joystick.c: 277: if (joystick[1].joystickSwitch[0].state == 1)
  4677  0066DA  0100               	movlb	0	; () banked
  4678  0066DC  056F               	decf	(_joystick+15)& (0+255),w,b
  4679  0066DE  A4D8               	btfss	status,2,c
  4680  0066E0  D003               	goto	l684
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;joystick.c: 278: joystick_input_j2.members.analog_stick.Y = 0;
  4684  0066E2  0E00               	movlw	0
  4685  0066E4  0106               	movlb	6	; () banked
  4686  0066E6  6F5A               	movwf	90,b
  4687  0066E8                     l684:
  4688                           
  4689                           ;joystick.c: 280: if (joystick[1].joystickSwitch[1].state == 1)
  4690                           
  4691                           ; BSR set to: 6
  4692  0066E8  0100               	movlb	0	; () banked
  4693  0066EA  0571               	decf	(_joystick+17)& (0+255),w,b
  4694  0066EC  A4D8               	btfss	status,2,c
  4695  0066EE  D002               	goto	l685
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;joystick.c: 281: joystick_input_j2.members.analog_stick.Y = 255;
  4699  0066F0  0106               	movlb	6	; () banked
  4700  0066F2  695A               	setf	90,b
  4701  0066F4                     l685:
  4702                           
  4703                           ;joystick.c: 283: if (joystick[1].joystickSwitch[3].state == 1)
  4704                           
  4705                           ; BSR set to: 6
  4706  0066F4  0100               	movlb	0	; () banked
  4707  0066F6  0575               	decf	(_joystick+21)& (0+255),w,b
  4708  0066F8  A4D8               	btfss	status,2,c
  4709  0066FA  D002               	goto	l686
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;joystick.c: 284: joystick_input_j2.members.analog_stick.X = 255;
  4713  0066FC  0106               	movlb	6	; () banked
  4714  0066FE  6959               	setf	89,b
  4715  006700                     l686:
  4716                           
  4717                           ;joystick.c: 286: if (joystick[1].joystickSwitch[2].state == 1)
  4718                           
  4719                           ; BSR set to: 6
  4720  006700  0100               	movlb	0	; () banked
  4721  006702  0573               	decf	(_joystick+19)& (0+255),w,b
  4722  006704  A4D8               	btfss	status,2,c
  4723  006706  D003               	goto	l687
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;joystick.c: 287: joystick_input_j2.members.analog_stick.X = 0;
  4727  006708  0E00               	movlw	0
  4728  00670A  0106               	movlb	6	; () banked
  4729  00670C  6F59               	movwf	89,b
  4730  00670E                     l687:
  4731                           
  4732                           ;joystick.c: 289: if (joystick[1].joystickSwitch[4].state == 1)
  4733                           
  4734                           ; BSR set to: 6
  4735  00670E  0100               	movlb	0	; () banked
  4736  006710  0577               	decf	(_joystick+23)& (0+255),w,b
  4737  006712  A4D8               	btfss	status,2,c
  4738  006714  D002               	goto	l688
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;joystick.c: 290: joystick_input_j2.members.buttons.square = 1;
  4742  006716  0106               	movlb	6	; () banked
  4743  006718  8156               	bsf	86,0,b
  4744  00671A                     l688:
  4745                           
  4746                           ;joystick.c: 293: if (joystick[1].paddleConnected == TRUE)
  4747                           
  4748                           ; BSR set to: 6
  4749  00671A  0100               	movlb	0	; () banked
  4750  00671C  0579               	decf	(_joystick+25)& (0+255),w,b
  4751  00671E  A4D8               	btfss	status,2,c
  4752  006720  D00F               	goto	l691
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;joystick.c: 294: {
  4756                           ;joystick.c: 296: joystick_input_j2.members.analog_stick.X = joystick[1].paddleX;
  4757  006722  C07A  F659         	movff	_joystick+26,1625
  4758                           
  4759                           ;joystick.c: 297: joystick_input_j2.members.analog_stick.Y = joystick[1].paddleY;
  4760  006726  C07C  F65A         	movff	_joystick+28,1626
  4761                           
  4762                           ; BSR set to: 0
  4763                           ;joystick.c: 303: if (joystick[1].joystickSwitch[2].state == 1)
  4764  00672A  0573               	decf	(_joystick+19)& (0+255),w,b
  4765  00672C  A4D8               	btfss	status,2,c
  4766  00672E  D002               	goto	l690
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;joystick.c: 304: joystick_input_j2.members.buttons.square = 1;
  4770  006730  0106               	movlb	6	; () banked
  4771  006732  8156               	bsf	86,0,b
  4772  006734                     l690:
  4773                           
  4774                           ;joystick.c: 305: if (joystick[1].joystickSwitch[3].state == 1)
  4775                           
  4776                           ; BSR set to: 6
  4777  006734  0100               	movlb	0	; () banked
  4778  006736  0575               	decf	(_joystick+21)& (0+255),w,b
  4779  006738  A4D8               	btfss	status,2,c
  4780  00673A  D002               	goto	l691
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;joystick.c: 306: joystick_input_j2.members.buttons.x = 1;
  4784  00673C  0106               	movlb	6	; () banked
  4785  00673E  8356               	bsf	86,1,b
  4786  006740                     l691:
  4787                           
  4788                           ;joystick.c: 307: }
  4789                           ;joystick.c: 310: lastTransmission_j2 = USBTransferOnePacket(2,1,(BYTE*)&joystick_input_
      +                          j2,sizeof(joystick_input_j2));
  4790                           
  4791                           ; BSR set to: 6
  4792                           
  4793                           ; BSR set to: 6
  4794  006740  0E01               	movlw	1
  4795  006742  6E01               	movwf	USBTransferOnePacket@dir,c
  4796  006744  0E56               	movlw	86
  4797  006746  6E02               	movwf	USBTransferOnePacket@data,c
  4798  006748  0E06               	movlw	6
  4799  00674A  6E03               	movwf	USBTransferOnePacket@data+1,c
  4800  00674C  0E07               	movlw	7
  4801  00674E  6E04               	movwf	USBTransferOnePacket@len,c
  4802  006750  0E02               	movlw	2
  4803  006752  ECC6  F02E         	call	_USBTransferOnePacket
  4804  006756  C001  F0AF         	movff	?_USBTransferOnePacket,_lastTransmission_j2
  4805  00675A  C002  F0B0         	movff	?_USBTransferOnePacket+1,_lastTransmission_j2+1
  4806  00675E  0012               	return	
  4807  006760                     __end_of_processJoystick_j2:
  4808                           	opt stack 0
  4809                           tblptru	equ	0xFF8
  4810                           tblptrh	equ	0xFF7
  4811                           tblptrl	equ	0xFF6
  4812                           tablat	equ	0xFF5
  4813                           prodh	equ	0xFF4
  4814                           prodl	equ	0xFF3
  4815                           intcon2	equ	0xFF1
  4816                           postinc0	equ	0xFEE
  4817                           wreg	equ	0xFE8
  4818                           indf2	equ	0xFDF
  4819                           postinc2	equ	0xFDE
  4820                           postdec2	equ	0xFDD
  4821                           fsr2h	equ	0xFDA
  4822                           fsr2l	equ	0xFD9
  4823                           status	equ	0xFD8
  4824                           
  4825 ;; *************** function _processJoystick_j1 *****************
  4826 ;; Defined at:
  4827 ;;		line 185 in file "../joystick.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  result          2    0        int 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1    wreg      void 
  4834 ;; Registers used:
  4835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  4841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  4842 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0
  4843 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0
  4844 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0
  4845 ;;Total ram usage:        3 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    1
  4848 ;; This function calls:
  4849 ;;		_USBTransferOnePacket
  4850 ;; This function is called by:
  4851 ;;		_main
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text14
  4856  006590                     __ptext14:
  4857                           	opt stack 0
  4858  006590                     _processJoystick_j1:
  4859                           	opt stack 29
  4860                           
  4861                           ;joystick.c: 187: int result;
  4862                           ;joystick.c: 190: if(!(lastTransmission_j1==0?0:((volatile BDT_ENTRY*)lastTransmission_j
      +                          1)->STAT.UOWN))
  4863                           
  4864                           ;incstack = 0
  4865  006590  0100               	movlb	0	; () banked
  4866  006592  51B1               	movf	_lastTransmission_j1& (0+255),w,b
  4867  006594  11B2               	iorwf	(_lastTransmission_j1+1)& (0+255),w,b
  4868  006596  B4D8               	btfsc	status,2,c
  4869  006598  D00E               	goto	l665
  4870                           
  4871                           ; BSR set to: 0
  4872  00659A  C0B1  FFD9         	movff	_lastTransmission_j1,fsr2l
  4873  00659E  C0B2  FFDA         	movff	_lastTransmission_j1+1,fsr2h
  4874  0065A2  AEDF               	btfss	indf2,7,c
  4875  0065A4  D003               	goto	u5520
  4876  0065A6  6A08               	clrf	??_processJoystick_j1& (0+255),c
  4877  0065A8  2A08               	incf	??_processJoystick_j1& (0+255),f,c
  4878  0065AA  D001               	goto	u5528
  4879  0065AC                     u5520:
  4880  0065AC  6A08               	clrf	??_processJoystick_j1& (0+255),c
  4881  0065AE                     u5528:
  4882  0065AE  5008               	movf	??_processJoystick_j1,w,c
  4883  0065B0  6E09               	movwf	_processJoystick_j1$3064,c
  4884  0065B2  6A0A               	clrf	_processJoystick_j1$3064+1,c
  4885  0065B4  D004               	goto	l667
  4886  0065B6                     l665:
  4887  0065B6  0E00               	movlw	0
  4888  0065B8  6E0A               	movwf	_processJoystick_j1$3064+1,c
  4889  0065BA  0E00               	movlw	0
  4890  0065BC  6E09               	movwf	_processJoystick_j1$3064,c
  4891  0065BE                     l667:
  4892  0065BE  5009               	movf	_processJoystick_j1$3064,w,c
  4893  0065C0  100A               	iorwf	_processJoystick_j1$3064+1,w,c
  4894  0065C2  A4D8               	btfss	status,2,c
  4895  0065C4  0012               	return	
  4896                           
  4897                           ;joystick.c: 191: {
  4898                           ;joystick.c: 193: joystick_input_j1.members.buttons.x = 0;
  4899  0065C6  0106               	movlb	6	; () banked
  4900  0065C8  9313               	bcf	19,1,b
  4901                           
  4902                           ;joystick.c: 194: joystick_input_j1.members.buttons.square = 0;
  4903  0065CA  9113               	bcf	19,0,b
  4904                           
  4905                           ;joystick.c: 195: joystick_input_j1.members.buttons.o = 0;
  4906  0065CC  9513               	bcf	19,2,b
  4907                           
  4908                           ;joystick.c: 196: joystick_input_j1.members.buttons.triangle = 0;
  4909  0065CE  9713               	bcf	19,3,b
  4910                           
  4911                           ;joystick.c: 197: joystick_input_j1.members.buttons.L1 = 0;
  4912  0065D0  9913               	bcf	19,4,b
  4913                           
  4914                           ;joystick.c: 198: joystick_input_j1.members.buttons.R1 = 0;
  4915  0065D2  9B13               	bcf	19,5,b
  4916                           
  4917                           ;joystick.c: 199: joystick_input_j1.members.buttons.L2 = 0;
  4918  0065D4  9D13               	bcf	19,6,b
  4919                           
  4920                           ;joystick.c: 200: joystick_input_j1.members.buttons.R2 = 0;
  4921  0065D6  9F13               	bcf	19,7,b
  4922                           
  4923                           ;joystick.c: 201: joystick_input_j1.members.buttons.select = 0;
  4924  0065D8  9114               	bcf	20,0,b
  4925                           
  4926                           ;joystick.c: 202: joystick_input_j1.members.buttons.start = 0;
  4927  0065DA  9314               	bcf	20,1,b
  4928                           
  4929                           ;joystick.c: 203: joystick_input_j1.members.buttons.left_stick = 0;
  4930  0065DC  9514               	bcf	20,2,b
  4931                           
  4932                           ;joystick.c: 204: joystick_input_j1.members.buttons.right_stick = 0;
  4933  0065DE  9714               	bcf	20,3,b
  4934                           
  4935                           ;joystick.c: 205: joystick_input_j1.members.buttons.home = 0;
  4936  0065E0  9914               	bcf	20,4,b
  4937                           
  4938                           ; BSR set to: 6
  4939                           ;joystick.c: 206: joystick_input_j1.members.hat_switch.hat_switch = 0x8;
  4940  0065E2  5115               	movf	21,w,b
  4941  0065E4  0BF0               	andlw	-16
  4942  0065E6  0908               	iorlw	8
  4943  0065E8  6F15               	movwf	21,b
  4944                           
  4945                           ;joystick.c: 209: joystick_input_j1.members.analog_stick.X = 128;
  4946  0065EA  0E80               	movlw	128
  4947  0065EC  6F16               	movwf	22,b
  4948                           
  4949                           ;joystick.c: 210: joystick_input_j1.members.analog_stick.Y = 128;
  4950  0065EE  0E80               	movlw	128
  4951  0065F0  6F17               	movwf	23,b
  4952                           
  4953                           ; BSR set to: 6
  4954                           ;joystick.c: 213: if (joystick[0].joystickSwitch[0].state == 1)
  4955  0065F2  0100               	movlb	0	; () banked
  4956  0065F4  0560               	decf	_joystick& (0+255),w,b
  4957  0065F6  A4D8               	btfss	status,2,c
  4958  0065F8  D003               	goto	l668
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;joystick.c: 214: joystick_input_j1.members.analog_stick.Y = 0;
  4962  0065FA  0E00               	movlw	0
  4963  0065FC  0106               	movlb	6	; () banked
  4964  0065FE  6F17               	movwf	23,b
  4965  006600                     l668:
  4966                           
  4967                           ;joystick.c: 216: if (joystick[0].joystickSwitch[1].state == 1)
  4968                           
  4969                           ; BSR set to: 6
  4970  006600  0100               	movlb	0	; () banked
  4971  006602  0562               	decf	(_joystick+2)& (0+255),w,b
  4972  006604  A4D8               	btfss	status,2,c
  4973  006606  D002               	goto	l669
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;joystick.c: 217: joystick_input_j1.members.analog_stick.Y = 255;
  4977  006608  0106               	movlb	6	; () banked
  4978  00660A  6917               	setf	23,b
  4979  00660C                     l669:
  4980                           
  4981                           ;joystick.c: 219: if (joystick[0].joystickSwitch[3].state == 1)
  4982                           
  4983                           ; BSR set to: 6
  4984  00660C  0100               	movlb	0	; () banked
  4985  00660E  0566               	decf	(_joystick+6)& (0+255),w,b
  4986  006610  A4D8               	btfss	status,2,c
  4987  006612  D002               	goto	l670
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;joystick.c: 220: joystick_input_j1.members.analog_stick.X = 255;
  4991  006614  0106               	movlb	6	; () banked
  4992  006616  6916               	setf	22,b
  4993  006618                     l670:
  4994                           
  4995                           ;joystick.c: 222: if (joystick[0].joystickSwitch[2].state == 1)
  4996                           
  4997                           ; BSR set to: 6
  4998  006618  0100               	movlb	0	; () banked
  4999  00661A  0564               	decf	(_joystick+4)& (0+255),w,b
  5000  00661C  A4D8               	btfss	status,2,c
  5001  00661E  D003               	goto	l671
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;joystick.c: 223: joystick_input_j1.members.analog_stick.X = 0;
  5005  006620  0E00               	movlw	0
  5006  006622  0106               	movlb	6	; () banked
  5007  006624  6F16               	movwf	22,b
  5008  006626                     l671:
  5009                           
  5010                           ;joystick.c: 225: if (joystick[0].joystickSwitch[4].state == 1)
  5011                           
  5012                           ; BSR set to: 6
  5013  006626  0100               	movlb	0	; () banked
  5014  006628  0568               	decf	(_joystick+8)& (0+255),w,b
  5015  00662A  A4D8               	btfss	status,2,c
  5016  00662C  D002               	goto	l672
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;joystick.c: 226: joystick_input_j1.members.buttons.square = 1;
  5020  00662E  0106               	movlb	6	; () banked
  5021  006630  8113               	bsf	19,0,b
  5022  006632                     l672:
  5023                           
  5024                           ;joystick.c: 229: if (joystick[0].paddleConnected == TRUE)
  5025                           
  5026                           ; BSR set to: 6
  5027  006632  0100               	movlb	0	; () banked
  5028  006634  056A               	decf	(_joystick+10)& (0+255),w,b
  5029  006636  A4D8               	btfss	status,2,c
  5030  006638  D00F               	goto	l675
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;joystick.c: 230: {
  5034                           ;joystick.c: 232: joystick_input_j1.members.analog_stick.X = joystick[0].paddleX;
  5035  00663A  C06B  F616         	movff	_joystick+11,1558
  5036                           
  5037                           ;joystick.c: 233: joystick_input_j1.members.analog_stick.Y = joystick[0].paddleY;
  5038  00663E  C06D  F617         	movff	_joystick+13,1559
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;joystick.c: 239: if (joystick[0].joystickSwitch[2].state == 1)
  5042  006642  0564               	decf	(_joystick+4)& (0+255),w,b
  5043  006644  A4D8               	btfss	status,2,c
  5044  006646  D002               	goto	l674
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;joystick.c: 240: joystick_input_j1.members.buttons.square = 1;
  5048  006648  0106               	movlb	6	; () banked
  5049  00664A  8113               	bsf	19,0,b
  5050  00664C                     l674:
  5051                           
  5052                           ;joystick.c: 241: if (joystick[0].joystickSwitch[3].state == 1)
  5053                           
  5054                           ; BSR set to: 6
  5055  00664C  0100               	movlb	0	; () banked
  5056  00664E  0566               	decf	(_joystick+6)& (0+255),w,b
  5057  006650  A4D8               	btfss	status,2,c
  5058  006652  D002               	goto	l675
  5059                           
  5060                           ; BSR set to: 0
  5061                           ;joystick.c: 242: joystick_input_j1.members.buttons.x = 1;
  5062  006654  0106               	movlb	6	; () banked
  5063  006656  8313               	bsf	19,1,b
  5064  006658                     l675:
  5065                           
  5066                           ;joystick.c: 243: }
  5067                           ;joystick.c: 246: lastTransmission_j1 = USBTransferOnePacket(1,1,(BYTE*)&joystick_input_
      +                          j1,sizeof(joystick_input_j1));
  5068                           
  5069                           ; BSR set to: 6
  5070                           
  5071                           ; BSR set to: 6
  5072  006658  0E01               	movlw	1
  5073  00665A  6E01               	movwf	USBTransferOnePacket@dir,c
  5074  00665C  0E13               	movlw	19
  5075  00665E  6E02               	movwf	USBTransferOnePacket@data,c
  5076  006660  0E06               	movlw	6
  5077  006662  6E03               	movwf	USBTransferOnePacket@data+1,c
  5078  006664  0E07               	movlw	7
  5079  006666  6E04               	movwf	USBTransferOnePacket@len,c
  5080  006668  0E01               	movlw	1
  5081  00666A  ECC6  F02E         	call	_USBTransferOnePacket
  5082  00666E  C001  F0B1         	movff	?_USBTransferOnePacket,_lastTransmission_j1
  5083  006672  C002  F0B2         	movff	?_USBTransferOnePacket+1,_lastTransmission_j1+1
  5084  006676  0012               	return	
  5085  006678                     __end_of_processJoystick_j1:
  5086                           	opt stack 0
  5087                           tblptru	equ	0xFF8
  5088                           tblptrh	equ	0xFF7
  5089                           tblptrl	equ	0xFF6
  5090                           tablat	equ	0xFF5
  5091                           prodh	equ	0xFF4
  5092                           prodl	equ	0xFF3
  5093                           intcon2	equ	0xFF1
  5094                           postinc0	equ	0xFEE
  5095                           wreg	equ	0xFE8
  5096                           indf2	equ	0xFDF
  5097                           postinc2	equ	0xFDE
  5098                           postdec2	equ	0xFDD
  5099                           fsr2h	equ	0xFDA
  5100                           fsr2l	equ	0xFD9
  5101                           status	equ	0xFD8
  5102                           
  5103 ;; *************** function _keyboardBlocking *****************
  5104 ;; Defined at:
  5105 ;;		line 125 in file "../keyboard.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;		None
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;  column          1    6[COMRAM] unsigned char 
  5110 ;;  currentKeyNu    1    5[COMRAM] unsigned char 
  5111 ;;  row             1    4[COMRAM] unsigned char 
  5112 ;;  adjacentRowC    1    3[COMRAM] unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  1    wreg      void 
  5115 ;; Registers used:
  5116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  5123 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0
  5124 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0
  5125 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0
  5126 ;;Total ram usage:        7 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; This function calls:
  5129 ;;		Nothing
  5130 ;; This function is called by:
  5131 ;;		_main
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text15
  5136  005ED6                     __ptext15:
  5137                           	opt stack 0
  5138  005ED6                     _keyboardBlocking:
  5139                           	opt stack 30
  5140                           
  5141                           ;keyboard.c: 137: unsigned char row;
  5142                           ;keyboard.c: 138: unsigned char column;
  5143                           ;keyboard.c: 139: unsigned char currentKeyNumber;
  5144                           ;keyboard.c: 140: unsigned char adjacentRowCount;
  5145                           ;keyboard.c: 142: for (row = 0; row < 7; row++)
  5146                           
  5147                           ;incstack = 0
  5148  005ED6  0E00               	movlw	0
  5149  005ED8  6E05               	movwf	keyboardBlocking@row,c
  5150  005EDA                     l4808:
  5151  005EDA  0E06               	movlw	6
  5152  005EDC  6405               	cpfsgt	keyboardBlocking@row,c
  5153  005EDE  D001               	goto	l883
  5154  005EE0  0012               	return	
  5155  005EE2                     l883:
  5156                           
  5157                           ;keyboard.c: 143: {
  5158                           ;keyboard.c: 144: adjacentRowCount = 0;
  5159  005EE2  0E00               	movlw	0
  5160  005EE4  6E04               	movwf	keyboardBlocking@adjacentRowCount,c
  5161                           
  5162                           ;keyboard.c: 146: for (column = 0; column < 8; column++)
  5163  005EE6  0E00               	movlw	0
  5164  005EE8  6E07               	movwf	keyboardBlocking@column,c
  5165  005EEA                     l4814:
  5166  005EEA  0E07               	movlw	7
  5167  005EEC  6407               	cpfsgt	keyboardBlocking@column,c
  5168  005EEE  D001               	goto	l885
  5169  005EF0  D022               	goto	u5370
  5170  005EF2                     l885:
  5171                           
  5172                           ;keyboard.c: 147: {
  5173                           ;keyboard.c: 148: currentKeyNumber = (column * 8) + row;
  5174  005EF2  5007               	movf	keyboardBlocking@column,w,c
  5175  005EF4  0D08               	mullw	8
  5176  005EF6  50F3               	movf	prodl,w,c
  5177  005EF8  2405               	addwf	keyboardBlocking@row,w,c
  5178  005EFA  6E06               	movwf	keyboardBlocking@currentKeyNumber,c
  5179                           
  5180                           ;keyboard.c: 149: if (rawKeyboardState[currentKeyNumber] == 1 && rawKeyboardState[curren
      +                          tKeyNumber + 1] == 1)
  5181  005EFC  5006               	movf	keyboardBlocking@currentKeyNumber,w,c
  5182  005EFE  0D01               	mullw	1
  5183  005F00  0E82               	movlw	low _rawKeyboardState
  5184  005F02  24F3               	addwf	prodl,w,c
  5185  005F04  6ED9               	movwf	fsr2l,c
  5186  005F06  0E01               	movlw	high _rawKeyboardState
  5187  005F08  20F4               	addwfc	prodh,w,c
  5188  005F0A  6EDA               	movwf	fsr2h,c
  5189  005F0C  04DE               	decf	postinc2,w,c
  5190  005F0E  A4D8               	btfss	status,2,c
  5191  005F10  D010               	goto	l887
  5192  005F12  5006               	movf	keyboardBlocking@currentKeyNumber,w,c
  5193  005F14  6E01               	movwf	??_keyboardBlocking& (0+255),c
  5194  005F16  6A02               	clrf	(??_keyboardBlocking+1)& (0+255),c
  5195  005F18  0E01               	movlw	1
  5196  005F1A  2601               	addwf	??_keyboardBlocking,f,c
  5197  005F1C  0E00               	movlw	0
  5198  005F1E  2202               	addwfc	??_keyboardBlocking+1,f,c
  5199  005F20  0E82               	movlw	low _rawKeyboardState
  5200  005F22  2401               	addwf	??_keyboardBlocking,w,c
  5201  005F24  6ED9               	movwf	fsr2l,c
  5202  005F26  0E01               	movlw	high _rawKeyboardState
  5203  005F28  2002               	addwfc	??_keyboardBlocking+1,w,c
  5204  005F2A  6EDA               	movwf	fsr2h,c
  5205  005F2C  04DE               	decf	postinc2,w,c
  5206  005F2E  B4D8               	btfsc	status,2,c
  5207                           
  5208                           ;keyboard.c: 150: adjacentRowCount++;
  5209  005F30  2A04               	incf	keyboardBlocking@adjacentRowCount,f,c
  5210  005F32                     l887:
  5211  005F32  2A07               	incf	keyboardBlocking@column,f,c
  5212  005F34  D7DA               	goto	l4814
  5213  005F36                     u5370:
  5214                           
  5215                           ;keyboard.c: 151: }
  5216                           ;keyboard.c: 154: if (adjacentRowCount > 1)
  5217  005F36  0E01               	movlw	1
  5218  005F38  6404               	cpfsgt	keyboardBlocking@adjacentRowCount,c
  5219  005F3A  D026               	goto	u5400
  5220                           
  5221                           ;keyboard.c: 155: {
  5222                           ;keyboard.c: 156: for (column = 0; column < 8; column++)
  5223  005F3C  0E00               	movlw	0
  5224  005F3E  6E07               	movwf	keyboardBlocking@column,c
  5225  005F40                     l4832:
  5226  005F40  0E07               	movlw	7
  5227  005F42  6407               	cpfsgt	keyboardBlocking@column,c
  5228  005F44  D001               	goto	l889
  5229  005F46  D020               	goto	u5400
  5230  005F48                     l889:
  5231                           
  5232                           ;keyboard.c: 157: {
  5233                           ;keyboard.c: 158: currentKeyNumber = (column * 8) + row;
  5234  005F48  5007               	movf	keyboardBlocking@column,w,c
  5235  005F4A  0D08               	mullw	8
  5236  005F4C  50F3               	movf	prodl,w,c
  5237  005F4E  2405               	addwf	keyboardBlocking@row,w,c
  5238  005F50  6E06               	movwf	keyboardBlocking@currentKeyNumber,c
  5239                           
  5240                           ;keyboard.c: 159: rawKeyboardState[currentKeyNumber] = 0;
  5241  005F52  5006               	movf	keyboardBlocking@currentKeyNumber,w,c
  5242  005F54  0D01               	mullw	1
  5243  005F56  0E82               	movlw	low _rawKeyboardState
  5244  005F58  24F3               	addwf	prodl,w,c
  5245  005F5A  6ED9               	movwf	fsr2l,c
  5246  005F5C  0E01               	movlw	high _rawKeyboardState
  5247  005F5E  20F4               	addwfc	prodh,w,c
  5248  005F60  6EDA               	movwf	fsr2h,c
  5249  005F62  0E00               	movlw	0
  5250  005F64  6EDF               	movwf	indf2,c
  5251                           
  5252                           ;keyboard.c: 160: rawKeyboardState[currentKeyNumber + 1] = 0;
  5253  005F66  5006               	movf	keyboardBlocking@currentKeyNumber,w,c
  5254  005F68  6E01               	movwf	??_keyboardBlocking& (0+255),c
  5255  005F6A  6A02               	clrf	(??_keyboardBlocking+1)& (0+255),c
  5256  005F6C  0E01               	movlw	1
  5257  005F6E  2601               	addwf	??_keyboardBlocking,f,c
  5258  005F70  0E00               	movlw	0
  5259  005F72  2202               	addwfc	??_keyboardBlocking+1,f,c
  5260  005F74  0E82               	movlw	low _rawKeyboardState
  5261  005F76  2401               	addwf	??_keyboardBlocking,w,c
  5262  005F78  6ED9               	movwf	fsr2l,c
  5263  005F7A  0E01               	movlw	high _rawKeyboardState
  5264  005F7C  2002               	addwfc	??_keyboardBlocking+1,w,c
  5265  005F7E  6EDA               	movwf	fsr2h,c
  5266  005F80  0E00               	movlw	0
  5267  005F82  6EDF               	movwf	indf2,c
  5268  005F84  2A07               	incf	keyboardBlocking@column,f,c
  5269  005F86  D7DC               	goto	l4832
  5270  005F88                     u5400:
  5271  005F88  2A05               	incf	keyboardBlocking@row,f,c
  5272  005F8A  D7A7               	goto	l4808
  5273  005F8C                     __end_of_keyboardBlocking:
  5274                           	opt stack 0
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           intcon2	equ	0xFF1
  5282                           postinc0	equ	0xFEE
  5283                           wreg	equ	0xFE8
  5284                           indf2	equ	0xFDF
  5285                           postinc2	equ	0xFDE
  5286                           postdec2	equ	0xFDD
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function _initialise *****************
  5292 ;; Defined at:
  5293 ;;		line 60 in file "../main.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;		None
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;		None
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  1    wreg      void 
  5300 ;; Registers used:
  5301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  5307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  5308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  5309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  5310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  5311 ;;Total ram usage:        0 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    1
  5314 ;; This function calls:
  5315 ;;		_initialiseJoysticks
  5316 ;;		_initialiseKeyboard
  5317 ;; This function is called by:
  5318 ;;		_main
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text16
  5323  005628                     __ptext16:
  5324                           	opt stack 0
  5325  005628                     _initialise:
  5326                           	opt stack 29
  5327                           
  5328                           ;main.c: 62: initialiseJoysticks();
  5329                           
  5330                           ;incstack = 0
  5331  005628  ECE3  F031         	call	_initialiseJoysticks	;wreg free
  5332                           
  5333                           ;main.c: 63: initialiseKeyboard();
  5334  00562C  EC7C  F02C         	call	_initialiseKeyboard	;wreg free
  5335  005630  0012               	return		;funcret
  5336  005632                     __end_of_initialise:
  5337                           	opt stack 0
  5338                           tblptru	equ	0xFF8
  5339                           tblptrh	equ	0xFF7
  5340                           tblptrl	equ	0xFF6
  5341                           tablat	equ	0xFF5
  5342                           prodh	equ	0xFF4
  5343                           prodl	equ	0xFF3
  5344                           intcon2	equ	0xFF1
  5345                           postinc0	equ	0xFEE
  5346                           wreg	equ	0xFE8
  5347                           indf2	equ	0xFDF
  5348                           postinc2	equ	0xFDE
  5349                           postdec2	equ	0xFDD
  5350                           fsr2h	equ	0xFDA
  5351                           fsr2l	equ	0xFD9
  5352                           status	equ	0xFD8
  5353                           
  5354 ;; *************** function _initialiseKeyboard *****************
  5355 ;; Defined at:
  5356 ;;		line 54 in file "../keyboard.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;		None
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;  key             1    0[COMRAM] unsigned char 
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  1    wreg      void 
  5363 ;; Registers used:
  5364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  5370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  5371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0
  5372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  5373 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0
  5374 ;;Total ram usage:        1 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_initialise
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text17
  5384  0058F8                     __ptext17:
  5385                           	opt stack 0
  5386  0058F8                     _initialiseKeyboard:
  5387                           	opt stack 29
  5388                           
  5389                           ;keyboard.c: 56: unsigned char key;
  5390                           ;keyboard.c: 59: for (key = 0; key < 65; key++)
  5391                           
  5392                           ;incstack = 0
  5393  0058F8  0E00               	movlw	0
  5394  0058FA  6E01               	movwf	initialiseKeyboard@key,c
  5395  0058FC                     l4410:
  5396  0058FC  0E40               	movlw	64
  5397  0058FE  6401               	cpfsgt	initialiseKeyboard@key,c
  5398  005900  D001               	goto	l843
  5399  005902  D024               	goto	u4340
  5400  005904                     l843:
  5401                           
  5402                           ;keyboard.c: 60: {
  5403                           ;keyboard.c: 61: keyboard[key].state = 0;
  5404  005904  5001               	movf	initialiseKeyboard@key,w,c
  5405  005906  0D02               	mullw	2
  5406  005908  0E00               	movlw	low _keyboard
  5407  00590A  24F3               	addwf	prodl,w,c
  5408  00590C  6ED9               	movwf	fsr2l,c
  5409  00590E  0E01               	movlw	high _keyboard
  5410  005910  20F4               	addwfc	prodh,w,c
  5411  005912  6EDA               	movwf	fsr2h,c
  5412  005914  0E00               	movlw	0
  5413  005916  6EDF               	movwf	indf2,c
  5414                           
  5415                           ;keyboard.c: 62: keyboard[key].debounceCount = 0;
  5416  005918  5001               	movf	initialiseKeyboard@key,w,c
  5417  00591A  0D02               	mullw	2
  5418  00591C  0E01               	movlw	1
  5419  00591E  26F3               	addwf	prodl,f,c
  5420  005920  0E00               	movlw	0
  5421  005922  22F4               	addwfc	prodh,f,c
  5422  005924  0E00               	movlw	low _keyboard
  5423  005926  24F3               	addwf	prodl,w,c
  5424  005928  6ED9               	movwf	fsr2l,c
  5425  00592A  0E01               	movlw	high _keyboard
  5426  00592C  20F4               	addwfc	prodh,w,c
  5427  00592E  6EDA               	movwf	fsr2h,c
  5428  005930  0E00               	movlw	0
  5429  005932  6EDF               	movwf	indf2,c
  5430                           
  5431                           ;keyboard.c: 64: rawKeyboardState[key] = 0;
  5432  005934  5001               	movf	initialiseKeyboard@key,w,c
  5433  005936  0D01               	mullw	1
  5434  005938  0E82               	movlw	low _rawKeyboardState
  5435  00593A  24F3               	addwf	prodl,w,c
  5436  00593C  6ED9               	movwf	fsr2l,c
  5437  00593E  0E01               	movlw	high _rawKeyboardState
  5438  005940  20F4               	addwfc	prodh,w,c
  5439  005942  6EDA               	movwf	fsr2h,c
  5440  005944  0E00               	movlw	0
  5441  005946  6EDF               	movwf	indf2,c
  5442  005948  2A01               	incf	initialiseKeyboard@key,f,c
  5443  00594A  D7D8               	goto	l4410
  5444  00594C                     u4340:
  5445                           
  5446                           ;keyboard.c: 65: }
  5447                           ;keyboard.c: 68: lastINTransmission_k1 = 0;
  5448  00594C  0E00               	movlw	0
  5449  00594E  0100               	movlb	0	; () banked
  5450  005950  6FB5               	movwf	_lastINTransmission_k1& (0+255),b
  5451  005952  0E00               	movlw	0
  5452  005954  6FB6               	movwf	(_lastINTransmission_k1+1)& (0+255),b
  5453                           
  5454                           ;keyboard.c: 69: lastOUTTransmission_k1 = 0;
  5455  005956  0E00               	movlw	0
  5456  005958  6FB3               	movwf	_lastOUTTransmission_k1& (0+255),b
  5457  00595A  0E00               	movlw	0
  5458  00595C  6FB4               	movwf	(_lastOUTTransmission_k1+1)& (0+255),b
  5459                           
  5460                           ; BSR set to: 0
  5461  00595E  0012               	return		;funcret
  5462  005960                     __end_of_initialiseKeyboard:
  5463                           	opt stack 0
  5464                           tblptru	equ	0xFF8
  5465                           tblptrh	equ	0xFF7
  5466                           tblptrl	equ	0xFF6
  5467                           tablat	equ	0xFF5
  5468                           prodh	equ	0xFF4
  5469                           prodl	equ	0xFF3
  5470                           intcon2	equ	0xFF1
  5471                           postinc0	equ	0xFEE
  5472                           wreg	equ	0xFE8
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function _initialiseJoysticks *****************
  5481 ;; Defined at:
  5482 ;;		line 41 in file "../joystick.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;		None
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  loop            2    4[COMRAM] int 
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  1    wreg      void 
  5489 ;; Registers used:
  5490 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  5496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  5497 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0
  5498 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0
  5499 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0
  5500 ;;Total ram usage:        6 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; This function calls:
  5503 ;;		Nothing
  5504 ;; This function is called by:
  5505 ;;		_initialise
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text18
  5510  0063C6                     __ptext18:
  5511                           	opt stack 0
  5512  0063C6                     _initialiseJoysticks:
  5513                           	opt stack 29
  5514                           
  5515                           ;joystick.c: 43: int loop;
  5516                           ;joystick.c: 46: for (loop = 0; loop < 5; loop++)
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;incstack = 0
  5520  0063C6  0E00               	movlw	0
  5521  0063C8  6E06               	movwf	initialiseJoysticks@loop+1,c
  5522  0063CA  0E00               	movlw	0
  5523  0063CC  6E05               	movwf	initialiseJoysticks@loop,c
  5524  0063CE                     l4380:
  5525  0063CE  BE06               	btfsc	initialiseJoysticks@loop+1,7,c
  5526  0063D0  D006               	goto	l612
  5527  0063D2  5006               	movf	initialiseJoysticks@loop+1,w,c
  5528  0063D4  E160               	bnz	l4406
  5529  0063D6  0E05               	movlw	5
  5530  0063D8  5C05               	subwf	initialiseJoysticks@loop,w,c
  5531  0063DA  B0D8               	btfsc	status,0,c
  5532  0063DC  D05C               	goto	u4320
  5533  0063DE                     l612:
  5534                           
  5535                           ;joystick.c: 47: {
  5536                           ;joystick.c: 48: joystick[0].joystickSwitch[loop].state = 0;
  5537  0063DE  90D8               	bcf	status,0,c
  5538  0063E0  3405               	rlcf	initialiseJoysticks@loop,w,c
  5539  0063E2  6ED9               	movwf	fsr2l,c
  5540  0063E4  3406               	rlcf	initialiseJoysticks@loop+1,w,c
  5541  0063E6  6EDA               	movwf	fsr2h,c
  5542  0063E8  0E60               	movlw	low _joystick
  5543  0063EA  26D9               	addwf	fsr2l,f,c
  5544  0063EC  0E00               	movlw	high _joystick
  5545  0063EE  22DA               	addwfc	fsr2h,f,c
  5546  0063F0  0E00               	movlw	0
  5547  0063F2  6EDF               	movwf	indf2,c
  5548                           
  5549                           ;joystick.c: 49: joystick[0].joystickSwitch[loop].debounceCount = 0;
  5550  0063F4  C005  F001         	movff	initialiseJoysticks@loop,??_initialiseJoysticks
  5551  0063F8  C006  F002         	movff	initialiseJoysticks@loop+1,??_initialiseJoysticks+1
  5552  0063FC  90D8               	bcf	status,0,c
  5553  0063FE  3601               	rlcf	??_initialiseJoysticks,f,c
  5554  006400  3602               	rlcf	??_initialiseJoysticks+1,f,c
  5555  006402  0E01               	movlw	1
  5556  006404  2601               	addwf	??_initialiseJoysticks,f,c
  5557  006406  0E00               	movlw	0
  5558  006408  2202               	addwfc	??_initialiseJoysticks+1,f,c
  5559  00640A  0E60               	movlw	low _joystick
  5560  00640C  2401               	addwf	??_initialiseJoysticks,w,c
  5561  00640E  6ED9               	movwf	fsr2l,c
  5562  006410  0E00               	movlw	high _joystick
  5563  006412  2002               	addwfc	??_initialiseJoysticks+1,w,c
  5564  006414  6EDA               	movwf	fsr2h,c
  5565  006416  0E00               	movlw	0
  5566  006418  6EDF               	movwf	indf2,c
  5567                           
  5568                           ;joystick.c: 50: joystick[0].paddleConnected = FALSE;
  5569  00641A  0E00               	movlw	0
  5570  00641C  0100               	movlb	0	; () banked
  5571  00641E  6F6A               	movwf	(_joystick+10)& (0+255),b
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;joystick.c: 51: joystick[0].paddleX = 0;
  5575  006420  0E00               	movlw	0
  5576  006422  6F6C               	movwf	(_joystick+12)& (0+255),b
  5577  006424  0E00               	movlw	0
  5578  006426  6F6B               	movwf	(_joystick+11)& (0+255),b
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;joystick.c: 52: joystick[0].paddleY = 0;
  5582  006428  0E00               	movlw	0
  5583  00642A  6F6E               	movwf	(_joystick+14)& (0+255),b
  5584  00642C  0E00               	movlw	0
  5585  00642E  6F6D               	movwf	(_joystick+13)& (0+255),b
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;joystick.c: 54: joystick[1].joystickSwitch[loop].state = 0;
  5589  006430  90D8               	bcf	status,0,c
  5590  006432  3405               	rlcf	initialiseJoysticks@loop,w,c
  5591  006434  6ED9               	movwf	fsr2l,c
  5592  006436  3406               	rlcf	initialiseJoysticks@loop+1,w,c
  5593  006438  6EDA               	movwf	fsr2h,c
  5594  00643A  0E6F               	movlw	low (_joystick+15)
  5595  00643C  26D9               	addwf	fsr2l,f,c
  5596  00643E  0E00               	movlw	high (_joystick+15)
  5597  006440  22DA               	addwfc	fsr2h,f,c
  5598  006442  0E00               	movlw	0
  5599  006444  6EDF               	movwf	indf2,c
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;joystick.c: 55: joystick[1].joystickSwitch[loop].debounceCount = 0;
  5603  006446  C005  F001         	movff	initialiseJoysticks@loop,??_initialiseJoysticks
  5604  00644A  C006  F002         	movff	initialiseJoysticks@loop+1,??_initialiseJoysticks+1
  5605  00644E  90D8               	bcf	status,0,c
  5606  006450  3601               	rlcf	??_initialiseJoysticks,f,c
  5607  006452  3602               	rlcf	??_initialiseJoysticks+1,f,c
  5608  006454  0E60               	movlw	low _joystick
  5609  006456  6E03               	movwf	(??_initialiseJoysticks+2)& (0+255),c
  5610  006458  0E00               	movlw	high _joystick
  5611  00645A  6E04               	movwf	(??_initialiseJoysticks+3)& (0+255),c
  5612  00645C  0E0F               	movlw	15
  5613  00645E  2603               	addwf	??_initialiseJoysticks+2,f,c
  5614  006460  0E00               	movlw	0
  5615  006462  2204               	addwfc	??_initialiseJoysticks+3,f,c
  5616  006464  5001               	movf	??_initialiseJoysticks,w,c
  5617  006466  2603               	addwf	??_initialiseJoysticks+2,f,c
  5618  006468  5002               	movf	??_initialiseJoysticks+1,w,c
  5619  00646A  2204               	addwfc	??_initialiseJoysticks+3,f,c
  5620  00646C  0E01               	movlw	1
  5621  00646E  2403               	addwf	??_initialiseJoysticks+2,w,c
  5622  006470  6ED9               	movwf	fsr2l,c
  5623  006472  0E00               	movlw	0
  5624  006474  2004               	addwfc	??_initialiseJoysticks+3,w,c
  5625  006476  6EDA               	movwf	fsr2h,c
  5626  006478  0E00               	movlw	0
  5627  00647A  6EDF               	movwf	indf2,c
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;joystick.c: 56: joystick[1].paddleConnected = FALSE;
  5631  00647C  0E00               	movlw	0
  5632  00647E  6F79               	movwf	(_joystick+25)& (0+255),b
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;joystick.c: 57: joystick[1].paddleX = 0;
  5636  006480  0E00               	movlw	0
  5637  006482  6F7B               	movwf	(_joystick+27)& (0+255),b
  5638  006484  0E00               	movlw	0
  5639  006486  6F7A               	movwf	(_joystick+26)& (0+255),b
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;joystick.c: 58: joystick[1].paddleY = 0;
  5643  006488  0E00               	movlw	0
  5644  00648A  6F7D               	movwf	(_joystick+29)& (0+255),b
  5645  00648C  0E00               	movlw	0
  5646  00648E  6F7C               	movwf	(_joystick+28)& (0+255),b
  5647                           
  5648                           ; BSR set to: 0
  5649  006490  4A05               	infsnz	initialiseJoysticks@loop,f,c
  5650  006492  2A06               	incf	initialiseJoysticks@loop+1,f,c
  5651  006494  D79C               	goto	l4380
  5652  006496                     u4320:
  5653  006496                     l4406:
  5654                           
  5655                           ;joystick.c: 59: }
  5656                           ;joystick.c: 62: lastTransmission_j1 = 0;
  5657  006496  0E00               	movlw	0
  5658  006498  0100               	movlb	0	; () banked
  5659  00649A  6FB1               	movwf	_lastTransmission_j1& (0+255),b
  5660  00649C  0E00               	movlw	0
  5661  00649E  6FB2               	movwf	(_lastTransmission_j1+1)& (0+255),b
  5662                           
  5663                           ;joystick.c: 63: lastTransmission_j2 = 0;
  5664  0064A0  0E00               	movlw	0
  5665  0064A2  6FAF               	movwf	_lastTransmission_j2& (0+255),b
  5666  0064A4  0E00               	movlw	0
  5667  0064A6  6FB0               	movwf	(_lastTransmission_j2+1)& (0+255),b
  5668                           
  5669                           ; BSR set to: 0
  5670  0064A8  0012               	return		;funcret
  5671  0064AA                     __end_of_initialiseJoysticks:
  5672                           	opt stack 0
  5673                           tblptru	equ	0xFF8
  5674                           tblptrh	equ	0xFF7
  5675                           tblptrl	equ	0xFF6
  5676                           tablat	equ	0xFF5
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           intcon2	equ	0xFF1
  5680                           postinc0	equ	0xFEE
  5681                           wreg	equ	0xFE8
  5682                           indf2	equ	0xFDF
  5683                           postinc2	equ	0xFDE
  5684                           postdec2	equ	0xFDD
  5685                           fsr2h	equ	0xFDA
  5686                           fsr2l	equ	0xFD9
  5687                           status	equ	0xFD8
  5688                           
  5689 ;; *************** function _debounceKeyboard *****************
  5690 ;; Defined at:
  5691 ;;		line 167 in file "../keyboard.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;		None
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;  currentKeyNu    1    2[COMRAM] unsigned char 
  5696 ;; Return value:  Size  Location     Type
  5697 ;;                  1    wreg      void 
  5698 ;; Registers used:
  5699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  5705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  5706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0
  5707 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0
  5708 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0
  5709 ;;Total ram usage:        3 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; This function calls:
  5712 ;;		Nothing
  5713 ;; This function is called by:
  5714 ;;		_main
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           	psect	text19
  5719  006E66                     __ptext19:
  5720                           	opt stack 0
  5721  006E66                     _debounceKeyboard:
  5722                           	opt stack 30
  5723                           
  5724                           ;keyboard.c: 169: unsigned char currentKeyNumber;
  5725                           ;keyboard.c: 171: for (currentKeyNumber = 0; currentKeyNumber < 65; currentKeyNumber++)
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;incstack = 0
  5729  006E66  0E00               	movlw	0
  5730  006E68  6E03               	movwf	debounceKeyboard@currentKeyNumber,c
  5731  006E6A                     l4852:
  5732  006E6A  0E40               	movlw	64
  5733  006E6C  6403               	cpfsgt	debounceKeyboard@currentKeyNumber,c
  5734  006E6E  D001               	goto	l894
  5735  006E70  0012               	return	
  5736  006E72                     l894:
  5737                           
  5738                           ;keyboard.c: 172: {
  5739                           ;keyboard.c: 174: if (rawKeyboardState[currentKeyNumber]== 1 && keyboard[currentKeyNumbe
      +                          r].state == 0)
  5740  006E72  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5741  006E74  0D01               	mullw	1
  5742  006E76  0E82               	movlw	low _rawKeyboardState
  5743  006E78  24F3               	addwf	prodl,w,c
  5744  006E7A  6ED9               	movwf	fsr2l,c
  5745  006E7C  0E01               	movlw	high _rawKeyboardState
  5746  006E7E  20F4               	addwfc	prodh,w,c
  5747  006E80  6EDA               	movwf	fsr2h,c
  5748  006E82  04DE               	decf	postinc2,w,c
  5749  006E84  A4D8               	btfss	status,2,c
  5750  006E86  D032               	goto	l898
  5751  006E88  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5752  006E8A  0D02               	mullw	2
  5753  006E8C  0E00               	movlw	low _keyboard
  5754  006E8E  24F3               	addwf	prodl,w,c
  5755  006E90  6ED9               	movwf	fsr2l,c
  5756  006E92  0E01               	movlw	high _keyboard
  5757  006E94  20F4               	addwfc	prodh,w,c
  5758  006E96  6EDA               	movwf	fsr2h,c
  5759  006E98  50DF               	movf	indf2,w,c
  5760  006E9A  A4D8               	btfss	status,2,c
  5761  006E9C  D027               	goto	l898
  5762                           
  5763                           ;keyboard.c: 175: if (keyboard[currentKeyNumber].debounceCount > 5)
  5764  006E9E  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5765  006EA0  0D02               	mullw	2
  5766  006EA2  0E01               	movlw	1
  5767  006EA4  26F3               	addwf	prodl,f,c
  5768  006EA6  0E00               	movlw	0
  5769  006EA8  22F4               	addwfc	prodh,f,c
  5770  006EAA  0E00               	movlw	low _keyboard
  5771  006EAC  24F3               	addwf	prodl,w,c
  5772  006EAE  6ED9               	movwf	fsr2l,c
  5773  006EB0  0E01               	movlw	high _keyboard
  5774  006EB2  20F4               	addwfc	prodh,w,c
  5775  006EB4  6EDA               	movwf	fsr2h,c
  5776  006EB6  0E05               	movlw	5
  5777  006EB8  64DF               	cpfsgt	indf2,c
  5778  006EBA  D00B               	goto	l897
  5779                           
  5780                           ;keyboard.c: 176: keyboard[currentKeyNumber].state = 1;
  5781  006EBC  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5782  006EBE  0D02               	mullw	2
  5783  006EC0  0E00               	movlw	low _keyboard
  5784  006EC2  24F3               	addwf	prodl,w,c
  5785  006EC4  6ED9               	movwf	fsr2l,c
  5786  006EC6  0E01               	movlw	high _keyboard
  5787  006EC8  20F4               	addwfc	prodh,w,c
  5788  006ECA  6EDA               	movwf	fsr2h,c
  5789  006ECC  0E01               	movlw	1
  5790  006ECE  6EDF               	movwf	indf2,c
  5791  006ED0  D00D               	goto	l898
  5792  006ED2                     l897:
  5793                           
  5794                           ;keyboard.c: 177: else keyboard[currentKeyNumber].debounceCount++;
  5795  006ED2  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5796  006ED4  0D02               	mullw	2
  5797  006ED6  0E01               	movlw	1
  5798  006ED8  26F3               	addwf	prodl,f,c
  5799  006EDA  0E00               	movlw	0
  5800  006EDC  22F4               	addwfc	prodh,f,c
  5801  006EDE  0E00               	movlw	low _keyboard
  5802  006EE0  24F3               	addwf	prodl,w,c
  5803  006EE2  6ED9               	movwf	fsr2l,c
  5804  006EE4  0E01               	movlw	high _keyboard
  5805  006EE6  20F4               	addwfc	prodh,w,c
  5806  006EE8  6EDA               	movwf	fsr2h,c
  5807  006EEA  2ADF               	incf	indf2,f,c
  5808  006EEC                     l898:
  5809                           
  5810                           ;keyboard.c: 180: if (rawKeyboardState[currentKeyNumber] == 0 && keyboard[currentKeyNumb
      +                          er].state == 1)
  5811  006EEC  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5812  006EEE  0D01               	mullw	1
  5813  006EF0  0E82               	movlw	low _rawKeyboardState
  5814  006EF2  24F3               	addwf	prodl,w,c
  5815  006EF4  6ED9               	movwf	fsr2l,c
  5816  006EF6  0E01               	movlw	high _rawKeyboardState
  5817  006EF8  20F4               	addwfc	prodh,w,c
  5818  006EFA  6EDA               	movwf	fsr2h,c
  5819  006EFC  50DF               	movf	indf2,w,c
  5820  006EFE  A4D8               	btfss	status,2,c
  5821  006F00  D032               	goto	l901
  5822  006F02  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5823  006F04  0D02               	mullw	2
  5824  006F06  0E00               	movlw	low _keyboard
  5825  006F08  24F3               	addwf	prodl,w,c
  5826  006F0A  6ED9               	movwf	fsr2l,c
  5827  006F0C  0E01               	movlw	high _keyboard
  5828  006F0E  20F4               	addwfc	prodh,w,c
  5829  006F10  6EDA               	movwf	fsr2h,c
  5830  006F12  04DE               	decf	postinc2,w,c
  5831  006F14  A4D8               	btfss	status,2,c
  5832  006F16  D027               	goto	l901
  5833                           
  5834                           ;keyboard.c: 181: if (keyboard[currentKeyNumber].debounceCount > 5)
  5835  006F18  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5836  006F1A  0D02               	mullw	2
  5837  006F1C  0E01               	movlw	1
  5838  006F1E  26F3               	addwf	prodl,f,c
  5839  006F20  0E00               	movlw	0
  5840  006F22  22F4               	addwfc	prodh,f,c
  5841  006F24  0E00               	movlw	low _keyboard
  5842  006F26  24F3               	addwf	prodl,w,c
  5843  006F28  6ED9               	movwf	fsr2l,c
  5844  006F2A  0E01               	movlw	high _keyboard
  5845  006F2C  20F4               	addwfc	prodh,w,c
  5846  006F2E  6EDA               	movwf	fsr2h,c
  5847  006F30  0E05               	movlw	5
  5848  006F32  64DF               	cpfsgt	indf2,c
  5849  006F34  D00B               	goto	l900
  5850                           
  5851                           ;keyboard.c: 182: keyboard[currentKeyNumber].state = 0;
  5852  006F36  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5853  006F38  0D02               	mullw	2
  5854  006F3A  0E00               	movlw	low _keyboard
  5855  006F3C  24F3               	addwf	prodl,w,c
  5856  006F3E  6ED9               	movwf	fsr2l,c
  5857  006F40  0E01               	movlw	high _keyboard
  5858  006F42  20F4               	addwfc	prodh,w,c
  5859  006F44  6EDA               	movwf	fsr2h,c
  5860  006F46  0E00               	movlw	0
  5861  006F48  6EDF               	movwf	indf2,c
  5862  006F4A  D00D               	goto	l901
  5863  006F4C                     l900:
  5864                           
  5865                           ;keyboard.c: 183: else keyboard[currentKeyNumber].debounceCount++;
  5866  006F4C  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5867  006F4E  0D02               	mullw	2
  5868  006F50  0E01               	movlw	1
  5869  006F52  26F3               	addwf	prodl,f,c
  5870  006F54  0E00               	movlw	0
  5871  006F56  22F4               	addwfc	prodh,f,c
  5872  006F58  0E00               	movlw	low _keyboard
  5873  006F5A  24F3               	addwf	prodl,w,c
  5874  006F5C  6ED9               	movwf	fsr2l,c
  5875  006F5E  0E01               	movlw	high _keyboard
  5876  006F60  20F4               	addwfc	prodh,w,c
  5877  006F62  6EDA               	movwf	fsr2h,c
  5878  006F64  2ADF               	incf	indf2,f,c
  5879  006F66                     l901:
  5880                           
  5881                           ;keyboard.c: 186: if (rawKeyboardState[currentKeyNumber] == keyboard[currentKeyNumber].s
      +                          tate)
  5882  006F66  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5883  006F68  0D01               	mullw	1
  5884  006F6A  0E82               	movlw	low _rawKeyboardState
  5885  006F6C  24F3               	addwf	prodl,w,c
  5886  006F6E  6ED9               	movwf	fsr2l,c
  5887  006F70  0E01               	movlw	high _rawKeyboardState
  5888  006F72  20F4               	addwfc	prodh,w,c
  5889  006F74  6EDA               	movwf	fsr2h,c
  5890  006F76  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5891  006F78  0D02               	mullw	2
  5892  006F7A  0E00               	movlw	low _keyboard
  5893  006F7C  24F3               	addwf	prodl,w,c
  5894  006F7E  6EE1               	movwf	fsr1l,c
  5895  006F80  0E01               	movlw	high _keyboard
  5896  006F82  20F4               	addwfc	prodh,w,c
  5897  006F84  6EE2               	movwf	fsr1h,c
  5898  006F86  50DE               	movf	postinc2,w,c
  5899  006F88  18E6               	xorwf	postinc1,w,c
  5900  006F8A  A4D8               	btfss	status,2,c
  5901  006F8C  D00E               	goto	l902
  5902                           
  5903                           ;keyboard.c: 187: keyboard[currentKeyNumber].debounceCount = 0;
  5904  006F8E  5003               	movf	debounceKeyboard@currentKeyNumber,w,c
  5905  006F90  0D02               	mullw	2
  5906  006F92  0E01               	movlw	1
  5907  006F94  26F3               	addwf	prodl,f,c
  5908  006F96  0E00               	movlw	0
  5909  006F98  22F4               	addwfc	prodh,f,c
  5910  006F9A  0E00               	movlw	low _keyboard
  5911  006F9C  24F3               	addwf	prodl,w,c
  5912  006F9E  6ED9               	movwf	fsr2l,c
  5913  006FA0  0E01               	movlw	high _keyboard
  5914  006FA2  20F4               	addwfc	prodh,w,c
  5915  006FA4  6EDA               	movwf	fsr2h,c
  5916  006FA6  0E00               	movlw	0
  5917  006FA8  6EDF               	movwf	indf2,c
  5918  006FAA                     l902:
  5919  006FAA  2A03               	incf	debounceKeyboard@currentKeyNumber,f,c
  5920  006FAC  D75E               	goto	l4852
  5921  006FAE                     __end_of_debounceKeyboard:
  5922                           	opt stack 0
  5923                           tblptru	equ	0xFF8
  5924                           tblptrh	equ	0xFF7
  5925                           tblptrl	equ	0xFF6
  5926                           tablat	equ	0xFF5
  5927                           prodh	equ	0xFF4
  5928                           prodl	equ	0xFF3
  5929                           intcon2	equ	0xFF1
  5930                           postinc0	equ	0xFEE
  5931                           wreg	equ	0xFE8
  5932                           postinc1	equ	0xFE6
  5933                           fsr1h	equ	0xFE2
  5934                           fsr1l	equ	0xFE1
  5935                           indf2	equ	0xFDF
  5936                           postinc2	equ	0xFDE
  5937                           postdec2	equ	0xFDD
  5938                           fsr2h	equ	0xFDA
  5939                           fsr2l	equ	0xFD9
  5940                           status	equ	0xFD8
  5941                           
  5942 ;; *************** function _USBDeviceTasks *****************
  5943 ;; Defined at:
  5944 ;;		line 781 in file "../USB Stack/usb_device.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;		None
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;  i               1   23[COMRAM] unsigned char 
  5949 ;; Return value:  Size  Location     Type
  5950 ;;                  1    wreg      void 
  5951 ;; Registers used:
  5952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5953 ;; Tracked objects:
  5954 ;;		On entry : 0/0
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  5958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  5959 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0
  5960 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0
  5961 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0
  5962 ;;Total ram usage:        2 bytes
  5963 ;; Hardware stack levels used:    1
  5964 ;; Hardware stack levels required when called:    8
  5965 ;; This function calls:
  5966 ;;		_USBCtrlEPService
  5967 ;;		_USBDeviceInit
  5968 ;;		_USBStallHandler
  5969 ;;		_USBSuspend
  5970 ;;		_USBWakeFromSuspend
  5971 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  5972 ;; This function is called by:
  5973 ;;		_main
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text20
  5978  006D36                     __ptext20:
  5979                           	opt stack 0
  5980  006D36                     _USBDeviceTasks:
  5981                           	opt stack 22
  5982                           
  5983                           ;usb_device.c: 849: }
  5984                           ;usb_device.c: 871: if(USBDeviceState == DETACHED_STATE)
  5985                           
  5986                           ;usb_device.c: 848: return;
  5987                           
  5988                           ;usb_device.c: 847: PIR2bits.USBIF = 0;;
  5989                           
  5990                           ;usb_device.c: 819: USBDeviceState = DETACHED_STATE;
  5991                           
  5992                           ;usb_device.c: 816: UIE = 0;
  5993                           
  5994                           ;usb_device.c: 811: {
  5995                           ;usb_device.c: 813: UCON = 0;
  5996                           
  5997                           ;usb_device.c: 784: BYTE i;
  5998                           ;usb_device.c: 810: if (1 != 1)
  5999                           
  6000                           ;incstack = 0
  6001  006D36  505C               	movf	_USBDeviceState,w,c
  6002  006D38  A4D8               	btfss	status,2,c
  6003  006D3A  D010               	goto	l241
  6004                           
  6005                           ;usb_device.c: 872: {
  6006                           ;usb_device.c: 874: UCON = 0;
  6007  006D3C  0E00               	movlw	0
  6008  006D3E  6E6D               	movwf	3949,c	;volatile
  6009                           
  6010                           ;usb_device.c: 877: UIE = 0;
  6011  006D40  0E00               	movlw	0
  6012  006D42  6E69               	movwf	3945,c	;volatile
  6013                           
  6014                           ;usb_device.c: 881: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  6015  006D44  0E16               	movlw	22
  6016  006D46  6E6F               	movwf	3951,c	;volatile
  6017  006D48  0E9F               	movlw	159
  6018  006D4A  6E6B               	movwf	3947,c	;volatile
  6019  006D4C  0E7B               	movlw	123
  6020  006D4E  6E69               	movwf	3945,c	;volatile
  6021                           
  6022                           ;usb_device.c: 884: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  6023  006D50  D001               	goto	l242
  6024  006D52                     l243:
  6025  006D52  866D               	bsf	3949,3,c	;volatile
  6026  006D54                     l242:
  6027  006D54  A66D               	btfss	3949,3,c	;volatile
  6028  006D56  D7FD               	goto	l243
  6029                           
  6030                           ;usb_device.c: 887: USBDeviceState = ATTACHED_STATE;
  6031  006D58  0E01               	movlw	1
  6032  006D5A  6E5C               	movwf	_USBDeviceState,c
  6033  006D5C                     l241:
  6034                           
  6035                           ;usb_device.c: 892: }
  6036                           ;usb_device.c: 895: if(USBDeviceState == ATTACHED_STATE)
  6037  006D5C  045C               	decf	_USBDeviceState,w,c
  6038  006D5E  B4D8               	btfsc	status,2,c
  6039                           
  6040                           ;usb_device.c: 896: {
  6041                           ;usb_device.c: 906: if(!SE0)
  6042  006D60  BA6D               	btfsc	3949,5,c	;volatile
  6043  006D62  D008               	goto	l246
  6044                           
  6045                           ;usb_device.c: 907: {
  6046                           ;usb_device.c: 908: UIR = 0;;
  6047  006D64  0E00               	movlw	0
  6048  006D66  6E68               	movwf	3944,c	;volatile
  6049                           
  6050                           ;usb_device.c: 910: UIE=0;
  6051  006D68  0E00               	movlw	0
  6052  006D6A  6E69               	movwf	3945,c	;volatile
  6053                           
  6054                           ;usb_device.c: 912: UIEbits.URSTIE = 1;
  6055  006D6C  8069               	bsf	3945,0,c	;volatile
  6056                           
  6057                           ;usb_device.c: 913: UIEbits.IDLEIE = 1;
  6058  006D6E  8869               	bsf	3945,4,c	;volatile
  6059                           
  6060                           ;usb_device.c: 914: USBDeviceState = POWERED_STATE;
  6061  006D70  0E02               	movlw	2
  6062  006D72  6E5C               	movwf	_USBDeviceState,c
  6063  006D74                     l246:
  6064                           
  6065                           ;usb_device.c: 915: }
  6066                           ;usb_device.c: 916: }
  6067                           ;usb_device.c: 932: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  6068  006D74  B468               	btfsc	3944,2,c	;volatile
  6069  006D76  A469               	btfss	3945,2,c	;volatile
  6070  006D78  D003               	goto	l247
  6071                           
  6072                           ;usb_device.c: 933: {
  6073                           ;usb_device.c: 934: (UIR &= 0xFB);
  6074  006D7A  9468               	bcf	3944,2,c	;volatile
  6075                           
  6076                           ;usb_device.c: 938: USBWakeFromSuspend();
  6077  006D7C  EC3D  F02B         	call	_USBWakeFromSuspend	;wreg free
  6078  006D80                     l247:
  6079                           
  6080                           ;usb_device.c: 940: }
  6081                           ;usb_device.c: 945: if(SUSPND==1)
  6082  006D80  A26D               	btfss	3949,1,c	;volatile
  6083  006D82  D002               	goto	l248
  6084                           
  6085                           ;usb_device.c: 946: {
  6086                           ;usb_device.c: 947: PIR2bits.USBIF = 0;;
  6087  006D84  9AA1               	bcf	4001,5,c	;volatile
  6088                           
  6089                           ;usb_device.c: 948: return;
  6090  006D86  0012               	return	
  6091  006D88                     l248:
  6092                           
  6093                           ;usb_device.c: 949: }
  6094                           ;usb_device.c: 961: if(UIRbits.URSTIF && UIEbits.URSTIE)
  6095  006D88  B068               	btfsc	3944,0,c	;volatile
  6096  006D8A  A069               	btfss	3945,0,c	;volatile
  6097  006D8C  D010               	goto	l249
  6098                           
  6099                           ;usb_device.c: 962: {
  6100                           ;usb_device.c: 963: USBDeviceInit();
  6101  006D8E  EC33  F02E         	call	_USBDeviceInit	;wreg free
  6102                           
  6103                           ;usb_device.c: 964: USBDeviceState = DEFAULT_STATE;
  6104  006D92  0E04               	movlw	4
  6105  006D94  6E5C               	movwf	_USBDeviceState,c
  6106                           
  6107                           ;usb_device.c: 976: BDT[0].ADR = (BYTE*)&SetupPkt;
  6108  006D96  0E00               	movlw	0
  6109  006D98  0104               	movlb	4	; () banked
  6110  006D9A  6F02               	movwf	2,b	;volatile
  6111  006D9C  0E05               	movlw	5
  6112  006D9E  6F03               	movwf	3,b	;volatile
  6113                           
  6114                           ; BSR set to: 4
  6115                           ;usb_device.c: 977: BDT[0].CNT = 8;
  6116  006DA0  0E08               	movlw	8
  6117  006DA2  6F01               	movwf	1,b	;volatile
  6118                           
  6119                           ; BSR set to: 4
  6120                           ;usb_device.c: 978: BDT[0].STAT.Val &= ~0xFF;
  6121  006DA4  0E00               	movlw	0
  6122  006DA6  6F00               	movwf	0,b	;volatile
  6123                           
  6124                           ; BSR set to: 4
  6125                           ;usb_device.c: 979: BDT[0].STAT.Val |= 0x80|0x00|0x08|0x04;
  6126  006DA8  0E8C               	movlw	140
  6127  006DAA  1300               	iorwf	0,f,b	;volatile
  6128                           
  6129                           ; BSR set to: 4
  6130                           ;usb_device.c: 989: (UIR &= 0xFE);
  6131  006DAC  9068               	bcf	3944,0,c	;volatile
  6132  006DAE                     l249:
  6133                           
  6134                           ;usb_device.c: 990: }
  6135                           ;usb_device.c: 995: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  6136                           
  6137                           ; BSR set to: 4
  6138  006DAE  B868               	btfsc	3944,4,c	;volatile
  6139  006DB0  A869               	btfss	3945,4,c	;volatile
  6140  006DB2  D003               	goto	l250
  6141                           
  6142                           ;usb_device.c: 996: {
  6143                           ;usb_device.c: 1001: USBSuspend();
  6144  006DB4  EC19  F02B         	call	_USBSuspend	;wreg free
  6145                           
  6146                           ;usb_device.c: 1004: (UIR &= 0xEF);
  6147  006DB8  9868               	bcf	3944,4,c	;volatile
  6148  006DBA                     l250:
  6149                           
  6150                           ;usb_device.c: 1005: }
  6151                           ;usb_device.c: 1007: if(UIRbits.SOFIF && UIEbits.SOFIE)
  6152  006DBA  BC68               	btfsc	3944,6,c	;volatile
  6153  006DBC  AC69               	btfss	3945,6,c	;volatile
  6154  006DBE  D00F               	goto	l251
  6155                           
  6156                           ;usb_device.c: 1008: {
  6157                           ;usb_device.c: 1009: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
  6158  006DC0  0E00               	movlw	0
  6159  006DC2  6E0D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
  6160  006DC4  0E73               	movlw	115
  6161  006DC6  6E0C               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
  6162  006DC8  0E00               	movlw	0
  6163  006DCA  6E0E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
  6164  006DCC  0E00               	movlw	0
  6165  006DCE  6E0F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
  6166  006DD0  0E00               	movlw	0
  6167  006DD2  6E11               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
  6168  006DD4  0E01               	movlw	1
  6169  006DD6  6E10               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
  6170  006DD8  EC21  F02D         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
  6171                           
  6172                           ;usb_device.c: 1010: (UIR &= 0xBF);
  6173  006DDC  9C68               	bcf	3944,6,c	;volatile
  6174  006DDE                     l251:
  6175                           
  6176                           ;usb_device.c: 1011: }
  6177                           ;usb_device.c: 1013: if(UIRbits.STALLIF && UIEbits.STALLIE)
  6178  006DDE  BA68               	btfsc	3944,5,c	;volatile
  6179  006DE0  AA69               	btfss	3945,5,c	;volatile
  6180  006DE2  D002               	goto	l252
  6181                           
  6182                           ;usb_device.c: 1014: {
  6183                           ;usb_device.c: 1015: USBStallHandler();
  6184  006DE4  EC97  F02B         	call	_USBStallHandler	;wreg free
  6185  006DE8                     l252:
  6186                           
  6187                           ;usb_device.c: 1016: }
  6188                           ;usb_device.c: 1018: if(UIRbits.UERRIF && UIEbits.UERRIE)
  6189  006DE8  B268               	btfsc	3944,1,c	;volatile
  6190  006DEA  A269               	btfss	3945,1,c	;volatile
  6191  006DEC  D00F               	goto	l253
  6192                           
  6193                           ;usb_device.c: 1019: {
  6194                           ;usb_device.c: 1020: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
  6195  006DEE  0E7F               	movlw	127
  6196  006DF0  6E0D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
  6197  006DF2  680C               	setf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
  6198  006DF4  0E00               	movlw	0
  6199  006DF6  6E0E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
  6200  006DF8  0E00               	movlw	0
  6201  006DFA  6E0F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
  6202  006DFC  0E00               	movlw	0
  6203  006DFE  6E11               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
  6204  006E00  0E01               	movlw	1
  6205  006E02  6E10               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
  6206  006E04  EC21  F02D         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
  6207                           
  6208                           ;usb_device.c: 1021: UEIR = 0;;
  6209  006E08  0E00               	movlw	0
  6210  006E0A  6E6A               	movwf	3946,c	;volatile
  6211  006E0C                     l253:
  6212                           
  6213                           ;usb_device.c: 1022: }
  6214                           ;usb_device.c: 1029: if(USBDeviceState < DEFAULT_STATE)
  6215  006E0C  0E04               	movlw	4
  6216  006E0E  605C               	cpfslt	_USBDeviceState,c
  6217  006E10  D002               	goto	l254
  6218                           
  6219                           ;usb_device.c: 1030: {
  6220                           ;usb_device.c: 1031: PIR2bits.USBIF = 0;;
  6221  006E12  9AA1               	bcf	4001,5,c	;volatile
  6222                           
  6223                           ;usb_device.c: 1032: return;
  6224  006E14  0012               	return	
  6225  006E16                     l254:
  6226                           
  6227                           ;usb_device.c: 1033: }
  6228                           ;usb_device.c: 1038: if(UIEbits.TRNIE)
  6229  006E16  A669               	btfss	3945,3,c	;volatile
  6230  006E18  D024               	goto	u4600
  6231                           
  6232                           ;usb_device.c: 1039: {
  6233                           ;usb_device.c: 1040: for(i = 0; i < 4; i++)
  6234  006E1A  0E00               	movlw	0
  6235  006E1C  6E18               	movwf	USBDeviceTasks@i,c
  6236  006E1E                     l4540:
  6237  006E1E  0E03               	movlw	3
  6238  006E20  6418               	cpfsgt	USBDeviceTasks@i,c
  6239  006E22  D001               	goto	l256
  6240  006E24  D01E               	goto	u4600
  6241  006E26                     l256:
  6242                           
  6243                           ;usb_device.c: 1041: {
  6244                           ;usb_device.c: 1042: if(UIRbits.TRNIF)
  6245  006E26  A668               	btfss	3944,3,c	;volatile
  6246  006E28  D01C               	goto	u4600
  6247                           
  6248                           ;usb_device.c: 1043: {
  6249                           ;usb_device.c: 1044: USTATcopy = USTAT;
  6250  006E2A  CF6C F05D          	movff	3948,_USTATcopy	;volatile
  6251                           
  6252                           ;usb_device.c: 1046: (UIR &= 0xF7);
  6253  006E2E  9668               	bcf	3944,3,c	;volatile
  6254                           
  6255                           ;usb_device.c: 1053: if((USTATcopy & 0b01111000) == 0)
  6256  006E30  C05D  F017         	movff	_USTATcopy,??_USBDeviceTasks
  6257  006E34  0E78               	movlw	120
  6258  006E36  1617               	andwf	??_USBDeviceTasks,f,c
  6259  006E38  A4D8               	btfss	status,2,c
  6260  006E3A  D003               	goto	l259
  6261                           
  6262                           ;usb_device.c: 1054: {
  6263                           ;usb_device.c: 1055: USBCtrlEPService();
  6264  006E3C  ECC6  F02F         	call	_USBCtrlEPService	;wreg free
  6265                           
  6266                           ;usb_device.c: 1056: }
  6267  006E40  D00E               	goto	l261
  6268  006E42                     l259:
  6269                           
  6270                           ;usb_device.c: 1057: else
  6271                           ;usb_device.c: 1058: {
  6272                           ;usb_device.c: 1059: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(BYTE*)&USTATcopy,0)
      +                          ;
  6273  006E42  0E00               	movlw	0
  6274  006E44  6E0D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
  6275  006E46  0E72               	movlw	114
  6276  006E48  6E0C               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
  6277  006E4A  0E5D               	movlw	low _USTATcopy
  6278  006E4C  6E0E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
  6279  006E4E  0E00               	movlw	high _USTATcopy
  6280  006E50  6E0F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
  6281  006E52  0E00               	movlw	0
  6282  006E54  6E11               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
  6283  006E56  0E00               	movlw	0
  6284  006E58  6E10               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
  6285  006E5A  EC21  F02D         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
  6286  006E5E                     l261:
  6287  006E5E  2A18               	incf	USBDeviceTasks@i,f,c
  6288  006E60  D7DE               	goto	l4540
  6289  006E62                     u4600:
  6290                           
  6291                           ;usb_device.c: 1067: }
  6292                           ;usb_device.c: 1068: }
  6293                           ;usb_device.c: 1070: PIR2bits.USBIF = 0;;
  6294  006E62  9AA1               	bcf	4001,5,c	;volatile
  6295  006E64  0012               	return		;funcret
  6296  006E66                     __end_of_USBDeviceTasks:
  6297                           	opt stack 0
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           prodh	equ	0xFF4
  6303                           prodl	equ	0xFF3
  6304                           intcon2	equ	0xFF1
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           postinc1	equ	0xFE6
  6308                           fsr1h	equ	0xFE2
  6309                           fsr1l	equ	0xFE1
  6310                           indf2	equ	0xFDF
  6311                           postinc2	equ	0xFDE
  6312                           postdec2	equ	0xFDD
  6313                           fsr2h	equ	0xFDA
  6314                           fsr2l	equ	0xFD9
  6315                           status	equ	0xFD8
  6316                           
  6317 ;; *************** function _USBWakeFromSuspend *****************
  6318 ;; Defined at:
  6319 ;;		line 1189 in file "../USB Stack/usb_device.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;		None
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;		None
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  1    wreg      void 
  6326 ;; Registers used:
  6327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  6333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  6334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  6335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  6336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  6337 ;;Total ram usage:        0 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:    4
  6340 ;; This function calls:
  6341 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  6342 ;; This function is called by:
  6343 ;;		_USBDeviceTasks
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text21
  6348  00567A                     __ptext21:
  6349                           	opt stack 0
  6350  00567A                     _USBWakeFromSuspend:
  6351                           	opt stack 25
  6352                           
  6353                           ;usb_device.c: 1195: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
  6354                           
  6355                           ;incstack = 0
  6356  00567A  0E00               	movlw	0
  6357  00567C  6E0D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
  6358  00567E  0E74               	movlw	116
  6359  005680  6E0C               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
  6360  005682  0E00               	movlw	0
  6361  005684  6E0E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
  6362  005686  0E00               	movlw	0
  6363  005688  6E0F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
  6364  00568A  0E00               	movlw	0
  6365  00568C  6E11               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
  6366  00568E  0E00               	movlw	0
  6367  005690  6E10               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
  6368  005692  EC21  F02D         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
  6369                           
  6370                           ;usb_device.c: 1202: UCONbits.SUSPND = 0;
  6371  005696  926D               	bcf	3949,1,c	;volatile
  6372                           
  6373                           ;usb_device.c: 1207: UIEbits.ACTVIE = 0;
  6374  005698  9469               	bcf	3945,2,c	;volatile
  6375                           
  6376                           ;usb_device.c: 1225: while(UIRbits.ACTVIF)
  6377  00569A  D001               	goto	l272
  6378  00569C                     
  6379                           ;usb_device.c: 1227: {
  6380                           ;usb_device.c: 1228: (UIR &= 0xFB);
  6381  00569C  9468               	bcf	3944,2,c	;volatile
  6382  00569E                     l272:
  6383  00569E  A468               	btfss	3944,2,c	;volatile
  6384  0056A0  0012               	return	
  6385  0056A2  D7FC               	goto	l273
  6386  0056A4                     __end_of_USBWakeFromSuspend:
  6387                           	opt stack 0
  6388                           tblptru	equ	0xFF8
  6389                           tblptrh	equ	0xFF7
  6390                           tblptrl	equ	0xFF6
  6391                           tablat	equ	0xFF5
  6392                           prodh	equ	0xFF4
  6393                           prodl	equ	0xFF3
  6394                           intcon2	equ	0xFF1
  6395                           postinc0	equ	0xFEE
  6396                           wreg	equ	0xFE8
  6397                           postinc1	equ	0xFE6
  6398                           fsr1h	equ	0xFE2
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8
  6406                           
  6407 ;; *************** function _USBSuspend *****************
  6408 ;; Defined at:
  6409 ;;		line 1132 in file "../USB Stack/usb_device.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;		None
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  1    wreg      void 
  6416 ;; Registers used:
  6417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  6423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  6424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  6425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  6426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  6427 ;;Total ram usage:        0 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    4
  6430 ;; This function calls:
  6431 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  6432 ;; This function is called by:
  6433 ;;		_USBDeviceTasks
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           	psect	text22
  6438  005632                     __ptext22:
  6439                           	opt stack 0
  6440  005632                     _USBSuspend:
  6441                           	opt stack 25
  6442                           
  6443                           ;usb_device.c: 1157: UIEbits.ACTVIE = 1;
  6444                           
  6445                           ;incstack = 0
  6446  005632  8469               	bsf	3945,2,c	;volatile
  6447                           
  6448                           ;usb_device.c: 1158: (UIR &= 0xEF);
  6449  005634  9868               	bcf	3944,4,c	;volatile
  6450                           
  6451                           ;usb_device.c: 1161: UCONbits.SUSPND = 1;
  6452  005636  826D               	bsf	3949,1,c	;volatile
  6453                           
  6454                           ;usb_device.c: 1171: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
  6455  005638  0E00               	movlw	0
  6456  00563A  6E0D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
  6457  00563C  0E75               	movlw	117
  6458  00563E  6E0C               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
  6459  005640  0E00               	movlw	0
  6460  005642  6E0E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
  6461  005644  0E00               	movlw	0
  6462  005646  6E0F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
  6463  005648  0E00               	movlw	0
  6464  00564A  6E11               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
  6465  00564C  0E00               	movlw	0
  6466  00564E  6E10               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
  6467  005650  EC21  F02D         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
  6468  005654  0012               	return		;funcret
  6469  005656                     __end_of_USBSuspend:
  6470                           	opt stack 0
  6471                           tblptru	equ	0xFF8
  6472                           tblptrh	equ	0xFF7
  6473                           tblptrl	equ	0xFF6
  6474                           tablat	equ	0xFF5
  6475                           prodh	equ	0xFF4
  6476                           prodl	equ	0xFF3
  6477                           intcon2	equ	0xFF1
  6478                           postinc0	equ	0xFEE
  6479                           wreg	equ	0xFE8
  6480                           postinc1	equ	0xFE6
  6481                           fsr1h	equ	0xFE2
  6482                           fsr1l	equ	0xFE1
  6483                           indf2	equ	0xFDF
  6484                           postinc2	equ	0xFDE
  6485                           postdec2	equ	0xFDD
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _USBStallHandler *****************
  6491 ;; Defined at:
  6492 ;;		line 1089 in file "../USB Stack/usb_device.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      void 
  6499 ;; Registers used:
  6500 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  6506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  6508 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0
  6509 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0
  6510 ;;Total ram usage:        1 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; This function calls:
  6513 ;;		Nothing
  6514 ;; This function is called by:
  6515 ;;		_USBDeviceTasks
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           	psect	text23
  6520  00572E                     __ptext23:
  6521                           	opt stack 0
  6522  00572E                     _USBStallHandler:
  6523                           	opt stack 29
  6524                           
  6525                           ;usb_device.c: 1102: if(UEP0bits.EPSTALL == 1)
  6526                           
  6527                           ;incstack = 0
  6528  00572E  A070               	btfss	3952,0,c	;volatile
  6529  005730  D017               	goto	l264
  6530                           
  6531                           ;usb_device.c: 1103: {
  6532                           ;usb_device.c: 1105: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
  6533  005732  C058  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
  6534  005736  C059  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
  6535  00573A  0E80               	movlw	128
  6536  00573C  18DE               	xorwf	postinc2,w,c
  6537  00573E  A4D8               	btfss	status,2,c
  6538  005740  D00E               	goto	l265
  6539  005742  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
  6540  005746  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
  6541  00574A  0E84               	movlw	132
  6542  00574C  18DE               	xorwf	postinc2,w,c
  6543  00574E  A4D8               	btfss	status,2,c
  6544  005750  D006               	goto	l265
  6545                           
  6546                           ;usb_device.c: 1106: {
  6547                           ;usb_device.c: 1108: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x00|0x08|0x04;
  6548  005752  C058  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
  6549  005756  C059  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
  6550  00575A  0E8C               	movlw	140
  6551  00575C  6EDF               	movwf	indf2,c
  6552  00575E                     l265:
  6553                           
  6554                           ;usb_device.c: 1109: }
  6555                           ;usb_device.c: 1110: UEP0bits.EPSTALL = 0;
  6556  00575E  9070               	bcf	3952,0,c	;volatile
  6557  005760                     l264:
  6558                           
  6559                           ;usb_device.c: 1111: }
  6560                           ;usb_device.c: 1113: (UIR &= 0xDF);
  6561  005760  9A68               	bcf	3944,5,c	;volatile
  6562  005762  0012               	return		;funcret
  6563  005764                     __end_of_USBStallHandler:
  6564                           	opt stack 0
  6565                           tblptru	equ	0xFF8
  6566                           tblptrh	equ	0xFF7
  6567                           tblptrl	equ	0xFF6
  6568                           tablat	equ	0xFF5
  6569                           prodh	equ	0xFF4
  6570                           prodl	equ	0xFF3
  6571                           intcon2	equ	0xFF1
  6572                           postinc0	equ	0xFEE
  6573                           wreg	equ	0xFE8
  6574                           postinc1	equ	0xFE6
  6575                           fsr1h	equ	0xFE2
  6576                           fsr1l	equ	0xFE1
  6577                           indf2	equ	0xFDF
  6578                           postinc2	equ	0xFDE
  6579                           postdec2	equ	0xFDD
  6580                           fsr2h	equ	0xFDA
  6581                           fsr2l	equ	0xFD9
  6582                           status	equ	0xFD8
  6583                           
  6584 ;; *************** function _USBDeviceInit *****************
  6585 ;; Defined at:
  6586 ;;		line 675 in file "../USB Stack/usb_device.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;		None
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  i               1    8[COMRAM] unsigned char 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      void 
  6593 ;; Registers used:
  6594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  6600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  6601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  6603 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0
  6604 ;;Total ram usage:        1 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    1
  6607 ;; This function calls:
  6608 ;;		_memset
  6609 ;; This function is called by:
  6610 ;;		_USBDeviceTasks
  6611 ;;		_main
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           	psect	text24
  6616  005C66                     __ptext24:
  6617                           	opt stack 0
  6618  005C66                     _USBDeviceInit:
  6619                           	opt stack 28
  6620                           
  6621                           ;usb_device.c: 677: BYTE i;
  6622                           ;usb_device.c: 680: UEIR = 0;;
  6623                           
  6624                           ;incstack = 0
  6625  005C66  0E00               	movlw	0
  6626  005C68  6E6A               	movwf	3946,c	;volatile
  6627                           
  6628                           ;usb_device.c: 683: UIR = 0;;
  6629  005C6A  0E00               	movlw	0
  6630  005C6C  6E68               	movwf	3944,c	;volatile
  6631                           
  6632                           ;usb_device.c: 685: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  6633  005C6E  0E16               	movlw	22
  6634  005C70  6E6F               	movwf	3951,c	;volatile
  6635  005C72  0E9F               	movlw	159
  6636  005C74  6E6B               	movwf	3947,c	;volatile
  6637  005C76  0E7B               	movlw	123
  6638  005C78  6E69               	movwf	3945,c	;volatile
  6639                           
  6640                           ;usb_device.c: 688: ;
  6641                           ;usb_device.c: 691: ;
  6642                           ;usb_device.c: 694: UCONbits.PPBRST = 1;
  6643  005C7A  8C6D               	bsf	3949,6,c	;volatile
  6644                           
  6645                           ;usb_device.c: 697: UADDR = 0x00;
  6646  005C7C  0E00               	movlw	0
  6647  005C7E  6E6E               	movwf	3950,c	;volatile
  6648                           
  6649                           ;usb_device.c: 700: memset((void*)&UEP1,0x00,(3-1));
  6650  005C80  0E71               	movlw	113
  6651  005C82  6E01               	movwf	memset@p1,c
  6652  005C84  0E0F               	movlw	15
  6653  005C86  6E02               	movwf	memset@p1+1,c
  6654  005C88  0E00               	movlw	0
  6655  005C8A  6E04               	movwf	memset@c+1,c
  6656  005C8C  0E00               	movlw	0
  6657  005C8E  6E03               	movwf	memset@c,c
  6658  005C90  0E00               	movlw	0
  6659  005C92  6E06               	movwf	memset@n+1,c
  6660  005C94  0E02               	movlw	2
  6661  005C96  6E05               	movwf	memset@n,c
  6662  005C98  EC52  F02B         	call	_memset	;wreg free
  6663                           
  6664                           ;usb_device.c: 703: UCONbits.PPBRST = 0;
  6665  005C9C  9C6D               	bcf	3949,6,c	;volatile
  6666                           
  6667                           ;usb_device.c: 706: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
  6668  005C9E  0E00               	movlw	0
  6669  005CA0  6E09               	movwf	USBDeviceInit@i,c
  6670  005CA2                     l4300:
  6671  005CA2  0E0F               	movlw	15
  6672  005CA4  6409               	cpfsgt	USBDeviceInit@i,c
  6673  005CA6  D001               	goto	l231
  6674  005CA8  D00E               	goto	u4220
  6675  005CAA                     l231:
  6676                           
  6677                           ;usb_device.c: 707: {
  6678                           ;usb_device.c: 708: BDT[i].Val = 0x00;
  6679  005CAA  5009               	movf	USBDeviceInit@i,w,c
  6680  005CAC  0D04               	mullw	4
  6681  005CAE  0E00               	movlw	0
  6682  005CB0  24F3               	addwf	prodl,w,c
  6683  005CB2  6ED9               	movwf	fsr2l,c
  6684  005CB4  0E04               	movlw	4
  6685  005CB6  20F4               	addwfc	prodh,w,c
  6686  005CB8  6EDA               	movwf	fsr2h,c
  6687  005CBA  6ADE               	clrf	postinc2,c
  6688  005CBC  6ADE               	clrf	postinc2,c
  6689  005CBE  6ADE               	clrf	postinc2,c
  6690  005CC0  6ADD               	clrf	postdec2,c
  6691  005CC2  2A09               	incf	USBDeviceInit@i,f,c
  6692  005CC4  D7EE               	goto	l4300
  6693  005CC6                     u4220:
  6694                           
  6695                           ;usb_device.c: 709: }
  6696                           ;usb_device.c: 712: UEP0 = 0x06|0x10;
  6697  005CC6  0E16               	movlw	22
  6698  005CC8  6E70               	movwf	3952,c	;volatile
  6699                           
  6700                           ;usb_device.c: 715: while(UIRbits.TRNIF == 1)
  6701  005CCA  D001               	goto	l233
  6702  005CCC                     
  6703                           ;usb_device.c: 716: {
  6704                           ;usb_device.c: 717: (UIR &= 0xF7);
  6705  005CCC  9668               	bcf	3944,3,c	;volatile
  6706  005CCE                     l233:
  6707  005CCE  B668               	btfsc	3944,3,c	;volatile
  6708  005CD0  D7FD               	goto	l234
  6709                           
  6710                           ;usb_device.c: 718: }
  6711                           ;usb_device.c: 721: inPipes[0].info.Val = 0;
  6712  005CD2  0E00               	movlw	0
  6713  005CD4  6E53               	movwf	_inPipes+3,c
  6714                           
  6715                           ;usb_device.c: 722: outPipes[0].info.Val = 0;
  6716  005CD6  0E00               	movlw	0
  6717  005CD8  0100               	movlb	0	; () banked
  6718  005CDA  6F9A               	movwf	(_outPipes+3)& (0+255),b
  6719                           
  6720                           ;usb_device.c: 723: outPipes[0].wCount.Val = 0;
  6721  005CDC  0E00               	movlw	0
  6722  005CDE  6F9C               	movwf	(_outPipes+5)& (0+255),b
  6723  005CE0  0E00               	movlw	0
  6724  005CE2  6F9B               	movwf	(_outPipes+4)& (0+255),b
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;usb_device.c: 726: PKTDIS = 0;
  6728  005CE4  986D               	bcf	3949,4,c	;volatile
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;usb_device.c: 729: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  6732  005CE6  0E08               	movlw	8
  6733  005CE8  6E48               	movwf	_pBDTEntryIn,c
  6734  005CEA  0E04               	movlw	4
  6735  005CEC  6E49               	movwf	_pBDTEntryIn+1,c
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;usb_device.c: 732: USBActiveConfiguration = 0;
  6739  005CEE  0E00               	movlw	0
  6740  005CF0  6E5F               	movwf	_USBActiveConfiguration,c
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;usb_device.c: 735: USBDeviceState = DETACHED_STATE;
  6744  005CF2  0E00               	movlw	0
  6745  005CF4  6E5C               	movwf	_USBDeviceState,c
  6746                           
  6747                           ; BSR set to: 0
  6748  005CF6  0012               	return		;funcret
  6749  005CF8                     __end_of_USBDeviceInit:
  6750                           	opt stack 0
  6751                           tblptru	equ	0xFF8
  6752                           tblptrh	equ	0xFF7
  6753                           tblptrl	equ	0xFF6
  6754                           tablat	equ	0xFF5
  6755                           prodh	equ	0xFF4
  6756                           prodl	equ	0xFF3
  6757                           intcon2	equ	0xFF1
  6758                           postinc0	equ	0xFEE
  6759                           wreg	equ	0xFE8
  6760                           postinc1	equ	0xFE6
  6761                           fsr1h	equ	0xFE2
  6762                           fsr1l	equ	0xFE1
  6763                           indf2	equ	0xFDF
  6764                           postinc2	equ	0xFDE
  6765                           postdec2	equ	0xFDD
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function _USBCtrlEPService *****************
  6771 ;; Defined at:
  6772 ;;		line 1254 in file "../USB Stack/usb_device.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;  setup_cnt       1   21[COMRAM] unsigned char 
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  6786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  6787 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0
  6788 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0
  6789 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0
  6790 ;;Total ram usage:        3 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    7
  6793 ;; This function calls:
  6794 ;;		_USBCtrlTrfInHandler
  6795 ;;		_USBCtrlTrfOutHandler
  6796 ;;		_USBCtrlTrfSetupHandler
  6797 ;; This function is called by:
  6798 ;;		_USBDeviceTasks
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text25
  6803  005F8C                     __ptext25:
  6804                           	opt stack 0
  6805  005F8C                     _USBCtrlEPService:
  6806                           	opt stack 22
  6807                           
  6808                           ;usb_device.c: 1257: if((USTATcopy & ~0x02) == 0x00)
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;incstack = 0
  6812  005F8C  C05D  F014         	movff	_USTATcopy,??_USBCtrlEPService
  6813  005F90  0EFD               	movlw	253
  6814  005F92  1614               	andwf	??_USBCtrlEPService,f,c
  6815  005F94  A4D8               	btfss	status,2,c
  6816  005F96  D055               	goto	l278
  6817                           
  6818                           ;usb_device.c: 1258: {
  6819                           ;usb_device.c: 1261: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy & 0x7
      +                          E)>>1];
  6820  005F98  C05D  F014         	movff	_USTATcopy,??_USBCtrlEPService
  6821  005F9C  90D8               	bcf	status,0,c
  6822  005F9E  3214               	rrcf	??_USBCtrlEPService,f,c
  6823  005FA0  0E3F               	movlw	63
  6824  005FA2  1614               	andwf	??_USBCtrlEPService,f,c
  6825  005FA4  5014               	movf	??_USBCtrlEPService,w,c
  6826  005FA6  0D04               	mullw	4
  6827  005FA8  0E00               	movlw	0
  6828  005FAA  24F3               	addwf	prodl,w,c
  6829  005FAC  6E58               	movwf	_pBDTEntryEP0OutCurrent,c
  6830  005FAE  0E04               	movlw	4
  6831  005FB0  20F4               	addwfc	prodh,w,c
  6832  005FB2  6E59               	movwf	_pBDTEntryEP0OutCurrent+1,c
  6833                           
  6834                           ;usb_device.c: 1269: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  6835  005FB4  C058  F056         	movff	_pBDTEntryEP0OutCurrent,_pBDTEntryEP0OutNext
  6836  005FB8  C059  F057         	movff	_pBDTEntryEP0OutCurrent+1,_pBDTEntryEP0OutNext+1
  6837                           
  6838                           ;usb_device.c: 1271: ((BYTE_VAL*)&pBDTEntryEP0OutNext)->Val ^= 0x0004;
  6839  005FBC  0E04               	movlw	4
  6840  005FBE  1A56               	xorwf	_pBDTEntryEP0OutNext,f,c
  6841                           
  6842                           ;usb_device.c: 1274: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  6843  005FC0  C058  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
  6844  005FC4  C059  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
  6845  005FC8  30DF               	rrcf	indf2,w,c
  6846  005FCA  32E8               	rrcf	wreg,f,c
  6847  005FCC  0B0F               	andlw	15
  6848  005FCE  0A0D               	xorlw	13
  6849  005FD0  A4D8               	btfss	status,2,c
  6850  005FD2  D034               	goto	l279
  6851                           
  6852                           ;usb_device.c: 1275: {
  6853                           ;usb_device.c: 1279: if(pBDTEntryEP0OutCurrent->ADR == (BYTE*)&CtrlTrfData)
  6854  005FD4  EE20 F002          	lfsr	2,2
  6855  005FD8  5058               	movf	_pBDTEntryEP0OutCurrent,w,c
  6856  005FDA  26D9               	addwf	fsr2l,f,c
  6857  005FDC  5059               	movf	_pBDTEntryEP0OutCurrent+1,w,c
  6858  005FDE  22DA               	addwfc	fsr2h,f,c
  6859  005FE0  0E20               	movlw	32
  6860  005FE2  18DE               	xorwf	postinc2,w,c
  6861  005FE4  E128               	bnz	l4370
  6862  005FE6  0E05               	movlw	5
  6863  005FE8  18DE               	xorwf	postinc2,w,c
  6864  005FEA  A4D8               	btfss	status,2,c
  6865  005FEC  D024               	goto	u4290
  6866                           
  6867                           ;usb_device.c: 1280: {
  6868                           ;usb_device.c: 1281: unsigned char setup_cnt;
  6869                           ;usb_device.c: 1283: pBDTEntryEP0OutCurrent->ADR = (BYTE*)&SetupPkt;
  6870  005FEE  EE20 F002          	lfsr	2,2
  6871  005FF2  5058               	movf	_pBDTEntryEP0OutCurrent,w,c
  6872  005FF4  26D9               	addwf	fsr2l,f,c
  6873  005FF6  5059               	movf	_pBDTEntryEP0OutCurrent+1,w,c
  6874  005FF8  22DA               	addwfc	fsr2h,f,c
  6875  005FFA  0E00               	movlw	0
  6876  005FFC  6EDE               	movwf	postinc2,c
  6877  005FFE  0E05               	movlw	5
  6878  006000  6EDD               	movwf	postdec2,c
  6879                           
  6880                           ;usb_device.c: 1284: for(setup_cnt = 0; setup_cnt < sizeof(CTRL_TRF_SETUP); setup_cnt++)
  6881  006002  0E00               	movlw	0
  6882  006004  6E16               	movwf	USBCtrlEPService@setup_cnt,c
  6883  006006                     l4360:
  6884  006006  0E07               	movlw	7
  6885  006008  6416               	cpfsgt	USBCtrlEPService@setup_cnt,c
  6886  00600A  D001               	goto	l281
  6887  00600C  D014               	goto	u4290
  6888  00600E                     l281:
  6889                           
  6890                           ;usb_device.c: 1285: {
  6891                           ;usb_device.c: 1286: *(((BYTE*)&SetupPkt)+setup_cnt) = *(((BYTE*)&CtrlTrfData)+setup_cnt
      +                          );
  6892  00600E  5016               	movf	USBCtrlEPService@setup_cnt,w,c
  6893  006010  0D01               	mullw	1
  6894  006012  0E20               	movlw	32
  6895  006014  24F3               	addwf	prodl,w,c
  6896  006016  6ED9               	movwf	fsr2l,c
  6897  006018  0E05               	movlw	5
  6898  00601A  20F4               	addwfc	prodh,w,c
  6899  00601C  6EDA               	movwf	fsr2h,c
  6900  00601E  5016               	movf	USBCtrlEPService@setup_cnt,w,c
  6901  006020  0D01               	mullw	1
  6902  006022  0E00               	movlw	0
  6903  006024  24F3               	addwf	prodl,w,c
  6904  006026  6EE1               	movwf	fsr1l,c
  6905  006028  0E05               	movlw	5
  6906  00602A  20F4               	addwfc	prodh,w,c
  6907  00602C  6EE2               	movwf	fsr1h,c
  6908  00602E  CFDF FFE7          	movff	indf2,indf1
  6909  006032  2A16               	incf	USBCtrlEPService@setup_cnt,f,c
  6910  006034  D7E8               	goto	l4360
  6911  006036                     u4290:
  6912  006036                     l4370:
  6913                           
  6914                           ;usb_device.c: 1287: }
  6915                           ;usb_device.c: 1288: }
  6916                           ;usb_device.c: 1291: USBCtrlTrfSetupHandler();
  6917  006036  EC53  F02C         	call	_USBCtrlTrfSetupHandler	;wreg free
  6918                           
  6919                           ;usb_device.c: 1292: }
  6920  00603A  0012               	return	
  6921  00603C                     l279:
  6922                           
  6923                           ;usb_device.c: 1293: else
  6924                           ;usb_device.c: 1294: {
  6925                           ;usb_device.c: 1296: USBCtrlTrfOutHandler();
  6926  00603C  EC2A  F02C         	call	_USBCtrlTrfOutHandler	;wreg free
  6927                           
  6928                           ;usb_device.c: 1297: }
  6929                           ;usb_device.c: 1298: }
  6930  006040  0012               	return	
  6931  006042                     l278:
  6932                           
  6933                           ;usb_device.c: 1299: else if((USTATcopy & ~0x02) == 0x04)
  6934  006042  505D               	movf	_USTATcopy,w,c
  6935  006044  0BFD               	andlw	253
  6936  006046  0A04               	xorlw	4
  6937  006048  A4D8               	btfss	status,2,c
  6938  00604A  0012               	return	
  6939                           
  6940                           ;usb_device.c: 1300: {
  6941                           ;usb_device.c: 1303: USBCtrlTrfInHandler();
  6942  00604C  EC61  F02D         	call	_USBCtrlTrfInHandler	;wreg free
  6943  006050  0012               	return	
  6944  006052                     __end_of_USBCtrlEPService:
  6945                           	opt stack 0
  6946                           tblptru	equ	0xFF8
  6947                           tblptrh	equ	0xFF7
  6948                           tblptrl	equ	0xFF6
  6949                           tablat	equ	0xFF5
  6950                           prodh	equ	0xFF4
  6951                           prodl	equ	0xFF3
  6952                           intcon2	equ	0xFF1
  6953                           postinc0	equ	0xFEE
  6954                           wreg	equ	0xFE8
  6955                           indf1	equ	0xFE7
  6956                           postinc1	equ	0xFE6
  6957                           fsr1h	equ	0xFE2
  6958                           fsr1l	equ	0xFE1
  6959                           indf2	equ	0xFDF
  6960                           postinc2	equ	0xFDE
  6961                           postdec2	equ	0xFDD
  6962                           fsr2h	equ	0xFDA
  6963                           fsr2l	equ	0xFD9
  6964                           status	equ	0xFD8
  6965                           
  6966 ;; *************** function _USBCtrlTrfSetupHandler *****************
  6967 ;; Defined at:
  6968 ;;		line 1348 in file "../USB Stack/usb_device.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;		None
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;		None
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  1    wreg      void 
  6975 ;; Registers used:
  6976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  6982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  6983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  6984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  6985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  6986 ;;Total ram usage:        0 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    6
  6989 ;; This function calls:
  6990 ;;		_USBCheckStdRequest
  6991 ;;		_USBCtrlEPServiceComplete
  6992 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  6993 ;; This function is called by:
  6994 ;;		_USBCtrlEPService
  6995 ;; This function uses a non-reentrant model
  6996 ;;
  6997                           
  6998                           	psect	text26
  6999  0058A6                     __ptext26:
  7000                           	opt stack 0
  7001  0058A6                     _USBCtrlTrfSetupHandler:
  7002                           	opt stack 22
  7003                           
  7004                           ;usb_device.c: 1351: if(pBDTEntryIn[0]->STAT.UOWN != 0)
  7005                           
  7006                           ;incstack = 0
  7007  0058A6  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
  7008  0058AA  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
  7009  0058AE  AEDF               	btfss	indf2,7,c
  7010  0058B0  D006               	goto	l289
  7011                           
  7012                           ;usb_device.c: 1352: {
  7013                           ;usb_device.c: 1355: pBDTEntryIn[0]->STAT.Val = 0x00;
  7014  0058B2  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
  7015  0058B6  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
  7016  0058BA  0E00               	movlw	0
  7017  0058BC  6EDF               	movwf	indf2,c
  7018  0058BE                     l289:
  7019                           
  7020                           ;usb_device.c: 1356: }
  7021                           ;usb_device.c: 1359: shortPacketStatus = 0;
  7022  0058BE  0E00               	movlw	0
  7023  0058C0  6E5B               	movwf	_shortPacketStatus,c
  7024                           
  7025                           ;usb_device.c: 1362: controlTransferState = 0;
  7026  0058C2  0E00               	movlw	0
  7027  0058C4  6E5A               	movwf	_controlTransferState,c
  7028                           
  7029                           ;usb_device.c: 1364: inPipes[0].wCount.Val = 0;
  7030  0058C6  0E00               	movlw	0
  7031  0058C8  6E55               	movwf	_inPipes+5,c
  7032  0058CA  0E00               	movlw	0
  7033  0058CC  6E54               	movwf	_inPipes+4,c
  7034                           
  7035                           ;usb_device.c: 1365: inPipes[0].info.Val = 0;
  7036  0058CE  0E00               	movlw	0
  7037  0058D0  6E53               	movwf	_inPipes+3,c
  7038                           
  7039                           ;usb_device.c: 1368: USBCheckStdRequest();
  7040  0058D2  EC29  F030         	call	_USBCheckStdRequest	;wreg free
  7041                           
  7042                           ;usb_device.c: 1369: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
  7043  0058D6  0E00               	movlw	0
  7044  0058D8  6E0D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
  7045  0058DA  0E03               	movlw	3
  7046  0058DC  6E0C               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
  7047  0058DE  0E00               	movlw	0
  7048  0058E0  6E0E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
  7049  0058E2  0E00               	movlw	0
  7050  0058E4  6E0F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
  7051  0058E6  0E00               	movlw	0
  7052  0058E8  6E11               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
  7053  0058EA  0E00               	movlw	0
  7054  0058EC  6E10               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
  7055  0058EE  EC21  F02D         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
  7056                           
  7057                           ;usb_device.c: 1372: USBCtrlEPServiceComplete();
  7058  0058F2  ECF4  F039         	call	_USBCtrlEPServiceComplete	;wreg free
  7059  0058F6  0012               	return		;funcret
  7060  0058F8                     __end_of_USBCtrlTrfSetupHandler:
  7061                           	opt stack 0
  7062                           tblptru	equ	0xFF8
  7063                           tblptrh	equ	0xFF7
  7064                           tblptrl	equ	0xFF6
  7065                           tablat	equ	0xFF5
  7066                           prodh	equ	0xFF4
  7067                           prodl	equ	0xFF3
  7068                           intcon2	equ	0xFF1
  7069                           postinc0	equ	0xFEE
  7070                           wreg	equ	0xFE8
  7071                           indf1	equ	0xFE7
  7072                           postinc1	equ	0xFE6
  7073                           fsr1h	equ	0xFE2
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           postinc2	equ	0xFDE
  7077                           postdec2	equ	0xFDD
  7078                           fsr2h	equ	0xFDA
  7079                           fsr2l	equ	0xFD9
  7080                           status	equ	0xFD8
  7081                           
  7082 ;; *************** function _USBCtrlEPServiceComplete *****************
  7083 ;; Defined at:
  7084 ;;		line 1914 in file "../USB Stack/usb_device.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;		None
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;		None
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      void 
  7091 ;; Registers used:
  7092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  7098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  7099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  7100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  7101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  7102 ;;Total ram usage:        0 bytes
  7103 ;; Hardware stack levels used:    1
  7104 ;; Hardware stack levels required when called:    1
  7105 ;; This function calls:
  7106 ;;		_USBCtrlTrfTxService
  7107 ;; This function is called by:
  7108 ;;		_USBCtrlTrfSetupHandler
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text27
  7113  0073E8                     __ptext27:
  7114                           	opt stack 0
  7115  0073E8                     _USBCtrlEPServiceComplete:
  7116                           	opt stack 26
  7117                           
  7118                           ;usb_device.c: 1920: PKTDIS = 0;
  7119                           
  7120                           ;incstack = 0
  7121  0073E8  986D               	bcf	3949,4,c	;volatile
  7122                           
  7123                           ;usb_device.c: 1922: if(inPipes[0].info.bits.busy == 0)
  7124  0073EA  BE53               	btfsc	_inPipes+3,7,c
  7125  0073EC  D04B               	goto	l374
  7126                           
  7127                           ;usb_device.c: 1923: {
  7128                           ;usb_device.c: 1924: if(outPipes[0].info.bits.busy == 1)
  7129  0073EE  0100               	movlb	0	; () banked
  7130  0073F0  AF9A               	btfss	(_outPipes+3)& (0+255),7,b
  7131  0073F2  D029               	goto	l375
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;usb_device.c: 1925: {
  7135                           ;usb_device.c: 1926: controlTransferState = 2;
  7136  0073F4  0E02               	movlw	2
  7137  0073F6  6E5A               	movwf	_controlTransferState,c
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;usb_device.c: 1936: pBDTEntryIn[0]->CNT = 0;
  7141  0073F8  EE20 F001          	lfsr	2,1
  7142  0073FC  5048               	movf	_pBDTEntryIn,w,c
  7143  0073FE  26D9               	addwf	fsr2l,f,c
  7144  007400  5049               	movf	_pBDTEntryIn+1,w,c
  7145  007402  22DA               	addwfc	fsr2h,f,c
  7146  007404  0E00               	movlw	0
  7147  007406  6EDF               	movwf	indf2,c
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;usb_device.c: 1937: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|0x08;
  7151  007408  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
  7152  00740C  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
  7153  007410  0EC8               	movlw	200
  7154  007412  6EDF               	movwf	indf2,c
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;usb_device.c: 1942: pBDTEntryEP0OutNext->CNT = 8;
  7158  007414  EE20 F001          	lfsr	2,1
  7159  007418  5056               	movf	_pBDTEntryEP0OutNext,w,c
  7160  00741A  26D9               	addwf	fsr2l,f,c
  7161  00741C  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
  7162  00741E  22DA               	addwfc	fsr2h,f,c
  7163  007420  0E08               	movlw	8
  7164  007422  6EDF               	movwf	indf2,c
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;usb_device.c: 1943: pBDTEntryEP0OutNext->ADR = (BYTE*)&CtrlTrfData;
  7168  007424  EE20 F002          	lfsr	2,2
  7169  007428  5056               	movf	_pBDTEntryEP0OutNext,w,c
  7170  00742A  26D9               	addwf	fsr2l,f,c
  7171  00742C  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
  7172  00742E  22DA               	addwfc	fsr2h,f,c
  7173  007430  0E20               	movlw	32
  7174  007432  6EDE               	movwf	postinc2,c
  7175  007434  0E05               	movlw	5
  7176  007436  6EDD               	movwf	postdec2,c
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;usb_device.c: 1944: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|0x08;
  7180  007438  C056  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
  7181  00743C  C057  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
  7182  007440  0EC8               	movlw	200
  7183  007442  6EDF               	movwf	indf2,c
  7184                           
  7185                           ;usb_device.c: 1945: }
  7186  007444  0012               	return	
  7187  007446                     l375:
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;usb_device.c: 1946: else
  7191                           ;usb_device.c: 1947: {
  7192                           ;usb_device.c: 1952: pBDTEntryEP0OutNext->CNT = 8;
  7193                           
  7194                           ; BSR set to: 0
  7195  007446  EE20 F001          	lfsr	2,1
  7196  00744A  5056               	movf	_pBDTEntryEP0OutNext,w,c
  7197  00744C  26D9               	addwf	fsr2l,f,c
  7198  00744E  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
  7199  007450  22DA               	addwfc	fsr2h,f,c
  7200  007452  0E08               	movlw	8
  7201  007454  6EDF               	movwf	indf2,c
  7202                           
  7203                           ;usb_device.c: 1953: pBDTEntryEP0OutNext->ADR = (BYTE*)&SetupPkt;
  7204  007456  EE20 F002          	lfsr	2,2
  7205  00745A  5056               	movf	_pBDTEntryEP0OutNext,w,c
  7206  00745C  26D9               	addwf	fsr2l,f,c
  7207  00745E  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
  7208  007460  22DA               	addwfc	fsr2h,f,c
  7209  007462  0E00               	movlw	0
  7210  007464  6EDE               	movwf	postinc2,c
  7211  007466  0E05               	movlw	5
  7212  007468  6EDD               	movwf	postdec2,c
  7213                           
  7214                           ; BSR set to: 0
  7215                           ;usb_device.c: 1954: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|0x08|0x04;
  7216  00746A  C056  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
  7217  00746E  C057  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
  7218  007472  0E8C               	movlw	140
  7219  007474  6EDF               	movwf	indf2,c
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;usb_device.c: 1955: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  7223  007476  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
  7224  00747A  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
  7225  00747E  0E84               	movlw	132
  7226  007480  6EDF               	movwf	indf2,c
  7227                           
  7228                           ; BSR set to: 0
  7229                           ;usb_device.c: 1956: }
  7230                           ;usb_device.c: 1957: }
  7231  007482  0012               	return	
  7232  007484                     l374:
  7233                           
  7234                           ;usb_device.c: 1958: else
  7235                           ;usb_device.c: 1959: {
  7236                           ;usb_device.c: 1960: if(outPipes[0].info.bits.busy == 0)
  7237  007484  0100               	movlb	0	; () banked
  7238  007486  BF9A               	btfsc	(_outPipes+3)& (0+255),7,b
  7239  007488  0012               	return	
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;usb_device.c: 1961: {
  7243                           ;usb_device.c: 1962: if(SetupPkt.DataDir == (0x80>>7))
  7244  00748A  0105               	movlb	5	; () banked
  7245  00748C  AF00               	btfss	0,7,b	;volatile
  7246  00748E  D054               	goto	l379
  7247                           
  7248                           ; BSR set to: 5
  7249                           ;usb_device.c: 1963: {
  7250                           ;usb_device.c: 1964: if(SetupPkt.wLength < inPipes[0].wCount.Val)
  7251  007490  5054               	movf	_inPipes+4,w,c
  7252  007492  5D06               	subwf	6,w,b	;volatile
  7253  007494  5055               	movf	_inPipes+5,w,c
  7254  007496  5907               	subwfb	7,w,b	;volatile
  7255  007498  B0D8               	btfsc	status,0,c
  7256  00749A  D004               	goto	l380
  7257                           
  7258                           ; BSR set to: 5
  7259                           ;usb_device.c: 1965: {
  7260                           ;usb_device.c: 1966: inPipes[0].wCount.Val = SetupPkt.wLength;
  7261  00749C  C506 F054          	movff	1286,_inPipes+4	;volatile
  7262  0074A0  C507 F055          	movff	1287,_inPipes+5	;volatile
  7263  0074A4                     l380:
  7264                           
  7265                           ; BSR set to: 5
  7266                           ;usb_device.c: 1967: }
  7267                           ;usb_device.c: 1968: USBCtrlTrfTxService();
  7268                           
  7269                           ; BSR set to: 5
  7270  0074A4  EC10  F036         	call	_USBCtrlTrfTxService	;wreg free
  7271                           
  7272                           ;usb_device.c: 1969: controlTransferState = 1;
  7273  0074A8  0E01               	movlw	1
  7274  0074AA  6E5A               	movwf	_controlTransferState,c
  7275                           
  7276                           ;usb_device.c: 1991: pBDTEntryEP0OutNext->CNT = 8;
  7277  0074AC  EE20 F001          	lfsr	2,1
  7278  0074B0  5056               	movf	_pBDTEntryEP0OutNext,w,c
  7279  0074B2  26D9               	addwf	fsr2l,f,c
  7280  0074B4  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
  7281  0074B6  22DA               	addwfc	fsr2h,f,c
  7282  0074B8  0E08               	movlw	8
  7283  0074BA  6EDF               	movwf	indf2,c
  7284                           
  7285                           ;usb_device.c: 1992: pBDTEntryEP0OutNext->ADR = (BYTE*)&SetupPkt;
  7286  0074BC  EE20 F002          	lfsr	2,2
  7287  0074C0  5056               	movf	_pBDTEntryEP0OutNext,w,c
  7288  0074C2  26D9               	addwf	fsr2l,f,c
  7289  0074C4  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
  7290  0074C6  22DA               	addwfc	fsr2h,f,c
  7291  0074C8  0E00               	movlw	0
  7292  0074CA  6EDE               	movwf	postinc2,c
  7293  0074CC  0E05               	movlw	5
  7294  0074CE  6EDD               	movwf	postdec2,c
  7295                           
  7296                           ;usb_device.c: 1993: pBDTEntryEP0OutNext->STAT.Val = 0x80;
  7297  0074D0  C056  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
  7298  0074D4  C057  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
  7299  0074D8  0E80               	movlw	128
  7300  0074DA  6EDF               	movwf	indf2,c
  7301                           
  7302                           ;usb_device.c: 1994: BothEP0OutUOWNsSet = FALSE;
  7303  0074DC  0E00               	movlw	0
  7304  0074DE  0100               	movlb	0	; () banked
  7305  0074E0  6FBA               	movwf	_BothEP0OutUOWNsSet& (0+255),b
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;usb_device.c: 1997: pBDTEntryEP0OutCurrent->CNT = 8;
  7309  0074E2  EE20 F001          	lfsr	2,1
  7310  0074E6  5058               	movf	_pBDTEntryEP0OutCurrent,w,c
  7311  0074E8  26D9               	addwf	fsr2l,f,c
  7312  0074EA  5059               	movf	_pBDTEntryEP0OutCurrent+1,w,c
  7313  0074EC  22DA               	addwfc	fsr2h,f,c
  7314  0074EE  0E08               	movlw	8
  7315  0074F0  6EDF               	movwf	indf2,c
  7316                           
  7317                           ; BSR set to: 0
  7318                           ;usb_device.c: 1998: pBDTEntryEP0OutCurrent->ADR = (BYTE*)&SetupPkt;
  7319  0074F2  EE20 F002          	lfsr	2,2
  7320  0074F6  5058               	movf	_pBDTEntryEP0OutCurrent,w,c
  7321  0074F8  26D9               	addwf	fsr2l,f,c
  7322  0074FA  5059               	movf	_pBDTEntryEP0OutCurrent+1,w,c
  7323  0074FC  22DA               	addwfc	fsr2h,f,c
  7324  0074FE  0E00               	movlw	0
  7325  007500  6EDE               	movwf	postinc2,c
  7326  007502  0E05               	movlw	5
  7327  007504  6EDD               	movwf	postdec2,c
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;usb_device.c: 1999: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x04;
  7331  007506  C058  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
  7332  00750A  C059  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
  7333  00750E  0E84               	movlw	132
  7334  007510  6EDF               	movwf	indf2,c
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;usb_device.c: 2000: BothEP0OutUOWNsSet = TRUE;
  7338  007512  0E01               	movlw	1
  7339  007514  6FBA               	movwf	_BothEP0OutUOWNsSet& (0+255),b
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;usb_device.c: 2007: pBDTEntryIn[0]->ADR = (BYTE*)&CtrlTrfData;
  7343  007516  EE20 F002          	lfsr	2,2
  7344  00751A  5048               	movf	_pBDTEntryIn,w,c
  7345  00751C  26D9               	addwf	fsr2l,f,c
  7346  00751E  5049               	movf	_pBDTEntryIn+1,w,c
  7347  007520  22DA               	addwfc	fsr2h,f,c
  7348  007522  0E20               	movlw	32
  7349  007524  6EDE               	movwf	postinc2,c
  7350  007526  0E05               	movlw	5
  7351  007528  6EDD               	movwf	postdec2,c
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;usb_device.c: 2008: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|0x08;
  7355  00752A  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
  7356  00752E  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
  7357  007532  0EC8               	movlw	200
  7358  007534  6EDF               	movwf	indf2,c
  7359                           
  7360                           ;usb_device.c: 2009: }
  7361  007536  0012               	return	
  7362  007538                     l379:
  7363                           
  7364                           ;usb_device.c: 2010: else
  7365                           ;usb_device.c: 2011: {
  7366                           ;usb_device.c: 2012: controlTransferState = 2;
  7367                           
  7368                           ; BSR set to: 0
  7369  007538  0E02               	movlw	2
  7370  00753A  6E5A               	movwf	_controlTransferState,c
  7371                           
  7372                           ;usb_device.c: 2022: pBDTEntryIn[0]->CNT = 0;
  7373  00753C  EE20 F001          	lfsr	2,1
  7374  007540  5048               	movf	_pBDTEntryIn,w,c
  7375  007542  26D9               	addwf	fsr2l,f,c
  7376  007544  5049               	movf	_pBDTEntryIn+1,w,c
  7377  007546  22DA               	addwfc	fsr2h,f,c
  7378  007548  0E00               	movlw	0
  7379  00754A  6EDF               	movwf	indf2,c
  7380                           
  7381                           ;usb_device.c: 2023: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|0x08;
  7382  00754C  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
  7383  007550  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
  7384  007554  0EC8               	movlw	200
  7385  007556  6EDF               	movwf	indf2,c
  7386                           
  7387                           ;usb_device.c: 2028: pBDTEntryEP0OutNext->CNT = 8;
  7388  007558  EE20 F001          	lfsr	2,1
  7389  00755C  5056               	movf	_pBDTEntryEP0OutNext,w,c
  7390  00755E  26D9               	addwf	fsr2l,f,c
  7391  007560  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
  7392  007562  22DA               	addwfc	fsr2h,f,c
  7393  007564  0E08               	movlw	8
  7394  007566  6EDF               	movwf	indf2,c
  7395                           
  7396                           ;usb_device.c: 2029: pBDTEntryEP0OutNext->ADR = (BYTE*)&CtrlTrfData;
  7397  007568  EE20 F002          	lfsr	2,2
  7398  00756C  5056               	movf	_pBDTEntryEP0OutNext,w,c
  7399  00756E  26D9               	addwf	fsr2l,f,c
  7400  007570  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
  7401  007572  22DA               	addwfc	fsr2h,f,c
  7402  007574  0E20               	movlw	32
  7403  007576  6EDE               	movwf	postinc2,c
  7404  007578  0E05               	movlw	5
  7405  00757A  6EDD               	movwf	postdec2,c
  7406                           
  7407                           ;usb_device.c: 2030: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|0x08;
  7408  00757C  C056  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
  7409  007580  C057  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
  7410  007584  0EC8               	movlw	200
  7411  007586  6EDF               	movwf	indf2,c
  7412  007588  0012               	return	
  7413  00758A                     __end_of_USBCtrlEPServiceComplete:
  7414                           	opt stack 0
  7415                           tblptru	equ	0xFF8
  7416                           tblptrh	equ	0xFF7
  7417                           tblptrl	equ	0xFF6
  7418                           tablat	equ	0xFF5
  7419                           prodh	equ	0xFF4
  7420                           prodl	equ	0xFF3
  7421                           intcon2	equ	0xFF1
  7422                           postinc0	equ	0xFEE
  7423                           wreg	equ	0xFE8
  7424                           indf1	equ	0xFE7
  7425                           postinc1	equ	0xFE6
  7426                           fsr1h	equ	0xFE2
  7427                           fsr1l	equ	0xFE1
  7428                           indf2	equ	0xFDF
  7429                           postinc2	equ	0xFDE
  7430                           postdec2	equ	0xFDD
  7431                           fsr2h	equ	0xFDA
  7432                           fsr2l	equ	0xFD9
  7433                           status	equ	0xFD8
  7434                           
  7435 ;; *************** function _USBCheckStdRequest *****************
  7436 ;; Defined at:
  7437 ;;		line 1563 in file "../USB Stack/usb_device.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;		None
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;		None
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  1    wreg      void 
  7444 ;; Registers used:
  7445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  7451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  7452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  7453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  7454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  7455 ;;Total ram usage:        0 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    5
  7458 ;; This function calls:
  7459 ;;		_USBStdFeatureReqHandler
  7460 ;;		_USBStdGetDscHandler
  7461 ;;		_USBStdGetStatusHandler
  7462 ;;		_USBStdSetCfgHandler
  7463 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7464 ;; This function is called by:
  7465 ;;		_USBCtrlTrfSetupHandler
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           	psect	text28
  7470  006052                     __ptext28:
  7471                           	opt stack 0
  7472  006052                     _USBCheckStdRequest:
  7473                           	opt stack 22
  7474                           
  7475                           ;usb_device.c: 1565: if(SetupPkt.RequestType != (0x00>>5)) return;
  7476                           
  7477                           ;incstack = 0
  7478  006052  0105               	movlb	5	; () banked
  7479  006054  3900               	swapf	0,w,b	;volatile
  7480  006056  32E8               	rrcf	wreg,f,c
  7481  006058  0B03               	andlw	3
  7482  00605A  0900               	iorlw	0
  7483  00605C  A4D8               	btfss	status,2,c
  7484  00605E  0012               	return	
  7485  006060  D042               	goto	l319
  7486  006062                     l320:
  7487                           
  7488                           ; BSR set to: 5
  7489                           ;usb_device.c: 1570: inPipes[0].info.bits.busy = 1;
  7490  006062  8E53               	bsf	_inPipes+3,7,c
  7491                           
  7492                           ; BSR set to: 5
  7493                           ;usb_device.c: 1571: USBDeviceState = ADR_PENDING_STATE;
  7494  006064  0E08               	movlw	8
  7495  006066  6E5C               	movwf	_USBDeviceState,c
  7496                           
  7497                           ;usb_device.c: 1573: break;
  7498  006068  0012               	return	
  7499  00606A                     
  7500                           ; BSR set to: 5
  7501                           ;usb_device.c: 1575: USBStdGetDscHandler();
  7502                           
  7503                           ; BSR set to: 5
  7504  00606A  ECB0  F033         	call	_USBStdGetDscHandler	;wreg free
  7505                           
  7506                           ;usb_device.c: 1576: break;
  7507  00606E  0012               	return	
  7508  006070                     
  7509                           ;usb_device.c: 1578: USBStdSetCfgHandler();
  7510  006070  ECB0  F02C         	call	_USBStdSetCfgHandler	;wreg free
  7511                           
  7512                           ;usb_device.c: 1579: break;
  7513  006074  0012               	return	
  7514  006076                     
  7515                           ;usb_device.c: 1581: inPipes[0].pSrc.bRam = (BYTE*)&USBActiveConfiguration;
  7516  006076  0E5F               	movlw	low _USBActiveConfiguration
  7517  006078  6E50               	movwf	_inPipes,c
  7518  00607A  0E00               	movlw	high _USBActiveConfiguration
  7519  00607C  6E51               	movwf	_inPipes+1,c
  7520                           
  7521                           ;usb_device.c: 1582: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  7522  00607E  8053               	bsf	_inPipes+3,0,c
  7523                           
  7524                           ;usb_device.c: 1583: inPipes[0].wCount.v[0] = 1;
  7525  006080  0E01               	movlw	1
  7526  006082  6E54               	movwf	_inPipes+4,c
  7527                           
  7528                           ;usb_device.c: 1584: inPipes[0].info.bits.busy = 1;
  7529  006084  8E53               	bsf	_inPipes+3,7,c
  7530                           
  7531                           ;usb_device.c: 1585: break;
  7532  006086  0012               	return	
  7533  006088                     
  7534                           ;usb_device.c: 1587: USBStdGetStatusHandler();
  7535  006088  EC7C  F02E         	call	_USBStdGetStatusHandler	;wreg free
  7536                           
  7537                           ;usb_device.c: 1588: break;
  7538  00608C  0012               	return	
  7539  00608E                     
  7540                           ;usb_device.c: 1590: case 3:
  7541                           ;usb_device.c: 1591: USBStdFeatureReqHandler();
  7542  00608E  EC95  F035         	call	_USBStdFeatureReqHandler	;wreg free
  7543                           
  7544                           ;usb_device.c: 1592: break;
  7545  006092  0012               	return	
  7546  006094                     
  7547                           ;usb_device.c: 1594: inPipes[0].pSrc.bRam = (BYTE*)&USBAlternateInterface[SetupPkt.bIntf
      +                          ID];
  7548  006094  0105               	movlb	5	; () banked
  7549  006096  5104               	movf	4,w,b	;volatile
  7550  006098  0D01               	mullw	1
  7551  00609A  0E5E               	movlw	low _USBAlternateInterface
  7552  00609C  24F3               	addwf	prodl,w,c
  7553  00609E  6E50               	movwf	_inPipes,c
  7554  0060A0  0E00               	movlw	high _USBAlternateInterface
  7555  0060A2  20F4               	addwfc	prodh,w,c
  7556  0060A4  6E51               	movwf	_inPipes+1,c
  7557                           
  7558                           ; BSR set to: 5
  7559                           ;usb_device.c: 1595: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  7560  0060A6  8053               	bsf	_inPipes+3,0,c
  7561                           
  7562                           ; BSR set to: 5
  7563                           ;usb_device.c: 1596: inPipes[0].wCount.v[0] = 1;
  7564  0060A8  0E01               	movlw	1
  7565  0060AA  6E54               	movwf	_inPipes+4,c
  7566                           
  7567                           ; BSR set to: 5
  7568                           ;usb_device.c: 1597: inPipes[0].info.bits.busy = 1;
  7569  0060AC  8E53               	bsf	_inPipes+3,7,c
  7570                           
  7571                           ;usb_device.c: 1598: break;
  7572  0060AE  0012               	return	
  7573  0060B0                     l329:
  7574                           
  7575                           ; BSR set to: 5
  7576                           ;usb_device.c: 1600: inPipes[0].info.bits.busy = 1;
  7577  0060B0  8E53               	bsf	_inPipes+3,7,c
  7578                           
  7579                           ; BSR set to: 5
  7580                           ;usb_device.c: 1601: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
  7581  0060B2  5104               	movf	4,w,b	;volatile
  7582  0060B4  0D01               	mullw	1
  7583  0060B6  0E5E               	movlw	low _USBAlternateInterface
  7584  0060B8  24F3               	addwf	prodl,w,c
  7585  0060BA  6ED9               	movwf	fsr2l,c
  7586  0060BC  0E00               	movlw	high _USBAlternateInterface
  7587  0060BE  20F4               	addwfc	prodh,w,c
  7588  0060C0  6EDA               	movwf	fsr2h,c
  7589  0060C2  C502 FFDF          	movff	1282,indf2	;volatile
  7590                           
  7591                           ;usb_device.c: 1602: break;
  7592  0060C6  0012               	return	
  7593  0060C8                     
  7594                           ; BSR set to: 5
  7595                           ;usb_device.c: 1604: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
  7596                           
  7597                           ; BSR set to: 5
  7598  0060C8  0E00               	movlw	0
  7599  0060CA  6E0D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
  7600  0060CC  0E02               	movlw	2
  7601  0060CE  6E0C               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
  7602  0060D0  0E00               	movlw	0
  7603  0060D2  6E0E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
  7604  0060D4  0E00               	movlw	0
  7605  0060D6  6E0F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
  7606  0060D8  0E00               	movlw	0
  7607  0060DA  6E11               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
  7608  0060DC  0E00               	movlw	0
  7609  0060DE  6E10               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
  7610  0060E0  EC21  F02D         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
  7611                           
  7612                           ;usb_device.c: 1609: }
  7613                           
  7614                           ;usb_device.c: 1608: break;
  7615                           
  7616                           ;usb_device.c: 1607: default:
  7617                           
  7618                           ;usb_device.c: 1606: case 12:
  7619                           
  7620                           ;usb_device.c: 1605: break;
  7621  0060E4  0012               	return	
  7622  0060E6                     l319:
  7623  0060E6  0105               	movlb	5	; () banked
  7624  0060E8  5101               	movf	1,w,b	;volatile
  7625                           
  7626                           ; Switch size 1, requested type "space"
  7627                           ; Number of cases is 11, Range of values is 0 to 12
  7628                           ; switch strategies available:
  7629                           ; Name         Instructions Cycles
  7630                           ; simple_byte           34    18 (average)
  7631                           ;	Chosen strategy is simple_byte
  7632  0060EA  0A00               	xorlw	0	; case 0
  7633  0060EC  B4D8               	btfsc	status,2,c
  7634  0060EE  D7CC               	goto	l325
  7635  0060F0  0A01               	xorlw	1	; case 1
  7636  0060F2  B4D8               	btfsc	status,2,c
  7637  0060F4  D7CC               	goto	l326
  7638  0060F6  0A02               	xorlw	2	; case 3
  7639  0060F8  B4D8               	btfsc	status,2,c
  7640  0060FA  D7C9               	goto	l326
  7641  0060FC  0A06               	xorlw	6	; case 5
  7642  0060FE  B4D8               	btfsc	status,2,c
  7643  006100  D7B0               	goto	l320
  7644  006102  0A03               	xorlw	3	; case 6
  7645  006104  B4D8               	btfsc	status,2,c
  7646  006106  D7B1               	goto	l322
  7647  006108  0A01               	xorlw	1	; case 7
  7648  00610A  B4D8               	btfsc	status,2,c
  7649  00610C  D7DD               	goto	l330
  7650  00610E  0A0F               	xorlw	15	; case 8
  7651  006110  B4D8               	btfsc	status,2,c
  7652  006112  D7B1               	goto	l324
  7653  006114  0A01               	xorlw	1	; case 9
  7654  006116  B4D8               	btfsc	status,2,c
  7655  006118  D7AB               	goto	l323
  7656  00611A  0A03               	xorlw	3	; case 10
  7657  00611C  B4D8               	btfsc	status,2,c
  7658  00611E  D7BA               	goto	l328
  7659  006120  0A01               	xorlw	1	; case 11
  7660  006122  B4D8               	btfsc	status,2,c
  7661  006124  D7C5               	goto	l329
  7662  006126  0A07               	xorlw	7	; case 12
  7663  006128  0012               	return	
  7664  00612A                     __end_of_USBCheckStdRequest:
  7665                           	opt stack 0
  7666                           tblptru	equ	0xFF8
  7667                           tblptrh	equ	0xFF7
  7668                           tblptrl	equ	0xFF6
  7669                           tablat	equ	0xFF5
  7670                           prodh	equ	0xFF4
  7671                           prodl	equ	0xFF3
  7672                           intcon2	equ	0xFF1
  7673                           postinc0	equ	0xFEE
  7674                           wreg	equ	0xFE8
  7675                           indf1	equ	0xFE7
  7676                           postinc1	equ	0xFE6
  7677                           fsr1h	equ	0xFE2
  7678                           fsr1l	equ	0xFE1
  7679                           indf2	equ	0xFDF
  7680                           postinc2	equ	0xFDE
  7681                           postdec2	equ	0xFDD
  7682                           fsr2h	equ	0xFDA
  7683                           fsr2l	equ	0xFD9
  7684                           status	equ	0xFD8
  7685                           
  7686 ;; *************** function _USBStdSetCfgHandler *****************
  7687 ;; Defined at:
  7688 ;;		line 2234 in file "../USB Stack/usb_device.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  1    wreg      void 
  7695 ;; Registers used:
  7696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  7702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  7703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  7705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  7706 ;;Total ram usage:        0 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    4
  7709 ;; This function calls:
  7710 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7711 ;;		_memset
  7712 ;; This function is called by:
  7713 ;;		_USBCheckStdRequest
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           	psect	text29
  7718  005960                     __ptext29:
  7719                           	opt stack 0
  7720  005960                     _USBStdSetCfgHandler:
  7721                           	opt stack 22
  7722                           
  7723                           ;usb_device.c: 2237: inPipes[0].info.bits.busy = 1;
  7724                           
  7725                           ;incstack = 0
  7726  005960  8E53               	bsf	_inPipes+3,7,c
  7727                           
  7728                           ;usb_device.c: 2240: memset((void*)&UEP1,0x00,(3-1));
  7729  005962  0E71               	movlw	113
  7730  005964  6E01               	movwf	memset@p1,c
  7731  005966  0E0F               	movlw	15
  7732  005968  6E02               	movwf	memset@p1+1,c
  7733  00596A  0E00               	movlw	0
  7734  00596C  6E04               	movwf	memset@c+1,c
  7735  00596E  0E00               	movlw	0
  7736  005970  6E03               	movwf	memset@c,c
  7737  005972  0E00               	movlw	0
  7738  005974  6E06               	movwf	memset@n+1,c
  7739  005976  0E02               	movlw	2
  7740  005978  6E05               	movwf	memset@n,c
  7741  00597A  EC52  F02B         	call	_memset	;wreg free
  7742                           
  7743                           ;usb_device.c: 2243: memset((void*)&USBAlternateInterface,0x00,1);
  7744  00597E  0E5E               	movlw	low _USBAlternateInterface
  7745  005980  6E01               	movwf	memset@p1,c
  7746  005982  0E00               	movlw	high _USBAlternateInterface
  7747  005984  6E02               	movwf	memset@p1+1,c
  7748  005986  0E00               	movlw	0
  7749  005988  6E04               	movwf	memset@c+1,c
  7750  00598A  0E00               	movlw	0
  7751  00598C  6E03               	movwf	memset@c,c
  7752  00598E  0E00               	movlw	0
  7753  005990  6E06               	movwf	memset@n+1,c
  7754  005992  0E01               	movlw	1
  7755  005994  6E05               	movwf	memset@n,c
  7756  005996  EC52  F02B         	call	_memset	;wreg free
  7757                           
  7758                           ;usb_device.c: 2246: USBActiveConfiguration = SetupPkt.bConfigurationValue;
  7759  00599A  C502 F05F          	movff	1282,_USBActiveConfiguration	;volatile
  7760                           
  7761                           ;usb_device.c: 2249: if(USBActiveConfiguration == 0)
  7762  00599E  505F               	movf	_USBActiveConfiguration,w,c
  7763  0059A0  A4D8               	btfss	status,2,c
  7764  0059A2  D003               	goto	l414
  7765                           
  7766                           ;usb_device.c: 2250: {
  7767                           ;usb_device.c: 2252: USBDeviceState = ADDRESS_STATE;
  7768  0059A4  0E10               	movlw	16
  7769  0059A6  6E5C               	movwf	_USBDeviceState,c
  7770                           
  7771                           ;usb_device.c: 2253: }
  7772  0059A8  0012               	return	
  7773  0059AA                     l414:
  7774                           
  7775                           ;usb_device.c: 2254: else
  7776                           ;usb_device.c: 2255: {
  7777                           ;usb_device.c: 2257: USBDeviceState = CONFIGURED_STATE;
  7778  0059AA  0E20               	movlw	32
  7779  0059AC  6E5C               	movwf	_USBDeviceState,c
  7780                           
  7781                           ;usb_device.c: 2259: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
  7782  0059AE  0E00               	movlw	0
  7783  0059B0  6E0D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
  7784  0059B2  0E01               	movlw	1
  7785  0059B4  6E0C               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
  7786  0059B6  0E5F               	movlw	low _USBActiveConfiguration
  7787  0059B8  6E0E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
  7788  0059BA  0E00               	movlw	high _USBActiveConfiguration
  7789  0059BC  6E0F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
  7790  0059BE  0E00               	movlw	0
  7791  0059C0  6E11               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
  7792  0059C2  0E01               	movlw	1
  7793  0059C4  6E10               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
  7794  0059C6  EC21  F02D         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
  7795  0059CA  0012               	return	
  7796  0059CC                     __end_of_USBStdSetCfgHandler:
  7797                           	opt stack 0
  7798                           tblptru	equ	0xFF8
  7799                           tblptrh	equ	0xFF7
  7800                           tblptrl	equ	0xFF6
  7801                           tablat	equ	0xFF5
  7802                           prodh	equ	0xFF4
  7803                           prodl	equ	0xFF3
  7804                           intcon2	equ	0xFF1
  7805                           postinc0	equ	0xFEE
  7806                           wreg	equ	0xFE8
  7807                           indf1	equ	0xFE7
  7808                           postinc1	equ	0xFE6
  7809                           fsr1h	equ	0xFE2
  7810                           fsr1l	equ	0xFE1
  7811                           indf2	equ	0xFDF
  7812                           postinc2	equ	0xFDE
  7813                           postdec2	equ	0xFDD
  7814                           fsr2h	equ	0xFDA
  7815                           fsr2l	equ	0xFD9
  7816                           status	equ	0xFD8
  7817                           
  7818 ;; *************** function _memset *****************
  7819 ;; Defined at:
  7820 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/memset.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  p1              2    0[COMRAM] PTR void 
  7823 ;;		 -> USBAlternateInterface(1), UEP1(1), 
  7824 ;;  c               2    2[COMRAM] int 
  7825 ;;  n               2    4[COMRAM] unsigned int 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  p               2    6[COMRAM] PTR unsigned char 
  7828 ;;		 -> USBAlternateInterface(1), UEP1(1), 
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  2    0[COMRAM] PTR void 
  7831 ;; Registers used:
  7832 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  7838 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0
  7839 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0
  7840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  7841 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0
  7842 ;;Total ram usage:        8 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; This function calls:
  7845 ;;		Nothing
  7846 ;; This function is called by:
  7847 ;;		_USBDeviceInit
  7848 ;;		_USBStdSetCfgHandler
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           	psect	text30
  7853  0056A4                     __ptext30:
  7854                           	opt stack 0
  7855  0056A4                     _memset:
  7856                           	opt stack 28
  7857                           
  7858                           ;incstack = 0
  7859  0056A4  C001  F007         	movff	memset@p1,memset@p
  7860  0056A8  C002  F008         	movff	memset@p1+1,memset@p+1
  7861  0056AC  D008               	goto	l1350
  7862  0056AE                     l3604:
  7863  0056AE  C007  FFD9         	movff	memset@p,fsr2l
  7864  0056B2  C008  FFDA         	movff	memset@p+1,fsr2h
  7865  0056B6  C003  FFDF         	movff	memset@c,indf2
  7866  0056BA  4A07               	infsnz	memset@p,f,c
  7867  0056BC  2A08               	incf	memset@p+1,f,c
  7868  0056BE                     l1350:
  7869  0056BE  0605               	decf	memset@n,f,c
  7870  0056C0  A0D8               	btfss	status,0,c
  7871  0056C2  0606               	decf	memset@n+1,f,c
  7872  0056C4  2805               	incf	memset@n,w,c
  7873  0056C6  E1F3               	bnz	l3604
  7874  0056C8  2806               	incf	memset@n+1,w,c
  7875  0056CA  B4D8               	btfsc	status,2,c
  7876  0056CC  0012               	return	
  7877  0056CE  D7EF               	goto	l1351
  7878  0056D0                     __end_of_memset:
  7879                           	opt stack 0
  7880                           tblptru	equ	0xFF8
  7881                           tblptrh	equ	0xFF7
  7882                           tblptrl	equ	0xFF6
  7883                           tablat	equ	0xFF5
  7884                           prodh	equ	0xFF4
  7885                           prodl	equ	0xFF3
  7886                           intcon2	equ	0xFF1
  7887                           postinc0	equ	0xFEE
  7888                           wreg	equ	0xFE8
  7889                           indf1	equ	0xFE7
  7890                           postinc1	equ	0xFE6
  7891                           fsr1h	equ	0xFE2
  7892                           fsr1l	equ	0xFE1
  7893                           indf2	equ	0xFDF
  7894                           postinc2	equ	0xFDE
  7895                           postdec2	equ	0xFDD
  7896                           fsr2h	equ	0xFDA
  7897                           fsr2l	equ	0xFD9
  7898                           status	equ	0xFD8
  7899                           
  7900 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
  7901 ;; Defined at:
  7902 ;;		line 117 in file "../usb_callback.c"
  7903 ;; Parameters:    Size  Location     Type
  7904 ;;  event           2   11[COMRAM] enum E4449
  7905 ;;  pdata           2   13[COMRAM] PTR void 
  7906 ;;		 -> USTATcopy(1), NULL(0), USBActiveConfiguration(1), 
  7907 ;;  size            2   15[COMRAM] unsigned short 
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;		None
  7910 ;; Return value:  Size  Location     Type
  7911 ;;                  1    wreg      enum E3
  7912 ;; Registers used:
  7913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  7919 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0
  7920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  7921 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0
  7922 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0
  7923 ;;Total ram usage:        8 bytes
  7924 ;; Hardware stack levels used:    1
  7925 ;; Hardware stack levels required when called:    3
  7926 ;; This function calls:
  7927 ;;		_USBCBCheckOtherReq
  7928 ;;		_USBCBErrorHandler
  7929 ;;		_USBCBInitEP
  7930 ;;		_USBCBStdSetDscHandler
  7931 ;;		_USBCBSuspend
  7932 ;;		_USBCBWakeFromSuspend
  7933 ;;		_USBCB_SOF_Handler
  7934 ;; This function is called by:
  7935 ;;		_USBDeviceTasks
  7936 ;;		_USBSuspend
  7937 ;;		_USBWakeFromSuspend
  7938 ;;		_USBCtrlTrfSetupHandler
  7939 ;;		_USBCheckStdRequest
  7940 ;;		_USBStdSetCfgHandler
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	text31
  7945  005A42                     __ptext31:
  7946                           	opt stack 0
  7947  005A42                     _USER_USB_CALLBACK_EVENT_HANDLER:
  7948                           	opt stack 26
  7949                           
  7950                           ;usb_callback.c: 119: switch(event)
  7951                           
  7952                           ;incstack = 0
  7953  005A42  D017               	goto	l773
  7954  005A44                     
  7955                           ;usb_callback.c: 122: USBCBInitEP();
  7956  005A44  EC0B  F02C         	call	_USBCBInitEP	;wreg free
  7957                           
  7958                           ;usb_callback.c: 123: break;
  7959  005A48  0012               	return	
  7960  005A4A                     
  7961                           ;usb_callback.c: 125: USBCBStdSetDscHandler();
  7962  005A4A  EC10  F02B         	call	_USBCBStdSetDscHandler	;wreg free
  7963                           
  7964                           ;usb_callback.c: 126: break;
  7965  005A4E  0012               	return	
  7966  005A50                     
  7967                           ;usb_callback.c: 128: USBCBCheckOtherReq();
  7968  005A50  ECEC  F02B         	call	_USBCBCheckOtherReq	;wreg free
  7969                           
  7970                           ;usb_callback.c: 129: break;
  7971  005A54  0012               	return	
  7972  005A56                     
  7973                           ;usb_callback.c: 131: USBCB_SOF_Handler();
  7974  005A56  EC13  F02B         	call	_USBCB_SOF_Handler	;wreg free
  7975                           
  7976                           ;usb_callback.c: 132: break;
  7977  005A5A  0012               	return	
  7978  005A5C                     
  7979                           ;usb_callback.c: 134: USBCBSuspend();
  7980  005A5C  EC11  F02B         	call	_USBCBSuspend	;wreg free
  7981                           
  7982                           ;usb_callback.c: 135: break;
  7983  005A60  0012               	return	
  7984  005A62                     
  7985                           ;usb_callback.c: 137: USBCBWakeFromSuspend();
  7986  005A62  EC12  F02B         	call	_USBCBWakeFromSuspend	;wreg free
  7987                           
  7988                           ;usb_callback.c: 138: break;
  7989  005A66  0012               	return	
  7990  005A68                     
  7991                           ;usb_callback.c: 140: USBCBErrorHandler();
  7992  005A68  EC0F  F02B         	call	_USBCBErrorHandler	;wreg free
  7993                           
  7994                           ;usb_callback.c: 141: break;
  7995  005A6C  0012               	return	
  7996  005A6E                     l782:
  7997  005A6E  F000               	nop		;# 
  7998                           
  7999                           ;usb_callback.c: 147: }
  8000                           
  8001                           ;usb_callback.c: 146: break;
  8002                           
  8003                           ;usb_callback.c: 145: default:
  8004                           
  8005                           ;usb_callback.c: 144: break;
  8006  005A70  0012               	return	
  8007  005A72                     l773:
  8008  005A72  C00C  F012         	movff	USER_USB_CALLBACK_EVENT_HANDLER@event,??_USER_USB_CALLBACK_EVENT_HANDLER
  8009  005A76  C00D  F013         	movff	USER_USB_CALLBACK_EVENT_HANDLER@event+1,??_USER_USB_CALLBACK_EVENT_HANDLER+1
  8010                           
  8011                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  8012                           ; Switch size 1, requested type "space"
  8013                           ; Number of cases is 2, Range of values is 0 to 127
  8014                           ; switch strategies available:
  8015                           ; Name         Instructions Cycles
  8016                           ; simple_byte            7     4 (average)
  8017                           ;	Chosen strategy is simple_byte
  8018  005A7A  5013               	movf	??_USER_USB_CALLBACK_EVENT_HANDLER+1,w,c
  8019  005A7C  0A00               	xorlw	0	; case 0
  8020  005A7E  B4D8               	btfsc	status,2,c
  8021  005A80  D004               	goto	l5160
  8022  005A82  0A7F               	xorlw	127	; case 127
  8023  005A84  A4D8               	btfss	status,2,c
  8024  005A86  0012               	return	
  8025  005A88  D017               	goto	l5162
  8026  005A8A                     l5160:
  8027                           
  8028                           ; Switch size 1, requested type "space"
  8029                           ; Number of cases is 7, Range of values is 1 to 117
  8030                           ; switch strategies available:
  8031                           ; Name         Instructions Cycles
  8032                           ; simple_byte           22    12 (average)
  8033                           ;	Chosen strategy is simple_byte
  8034  005A8A  5012               	movf	??_USER_USB_CALLBACK_EVENT_HANDLER,w,c
  8035  005A8C  0A01               	xorlw	1	; case 1
  8036  005A8E  B4D8               	btfsc	status,2,c
  8037  005A90  D7D9               	goto	l774
  8038  005A92  0A03               	xorlw	3	; case 2
  8039  005A94  B4D8               	btfsc	status,2,c
  8040  005A96  D7D9               	goto	l776
  8041  005A98  0A01               	xorlw	1	; case 3
  8042  005A9A  B4D8               	btfsc	status,2,c
  8043  005A9C  D7D9               	goto	l777
  8044  005A9E  0A71               	xorlw	113	; case 114
  8045  005AA0  B4D8               	btfsc	status,2,c
  8046  005AA2  D7E5               	goto	l782
  8047  005AA4  0A01               	xorlw	1	; case 115
  8048  005AA6  B4D8               	btfsc	status,2,c
  8049  005AA8  D7D6               	goto	l778
  8050  005AAA  0A07               	xorlw	7	; case 116
  8051  005AAC  B4D8               	btfsc	status,2,c
  8052  005AAE  D7D9               	goto	l780
  8053  005AB0  0A01               	xorlw	1	; case 117
  8054  005AB2  A4D8               	btfss	status,2,c
  8055  005AB4  0012               	return	
  8056  005AB6  D7D2               	goto	l779
  8057  005AB8                     l5162:
  8058                           
  8059                           ; Switch size 1, requested type "space"
  8060                           ; Number of cases is 1, Range of values is 255 to 255
  8061                           ; switch strategies available:
  8062                           ; Name         Instructions Cycles
  8063                           ; simple_byte            4     3 (average)
  8064                           ;	Chosen strategy is simple_byte
  8065  005AB8  5012               	movf	??_USER_USB_CALLBACK_EVENT_HANDLER,w,c
  8066  005ABA  0AFF               	xorlw	255	; case 255
  8067  005ABC  A4D8               	btfss	status,2,c
  8068  005ABE  0012               	return	
  8069  005AC0  D7D3               	goto	l781
  8070  005AC2                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
  8071                           	opt stack 0
  8072                           tblptru	equ	0xFF8
  8073                           tblptrh	equ	0xFF7
  8074                           tblptrl	equ	0xFF6
  8075                           tablat	equ	0xFF5
  8076                           prodh	equ	0xFF4
  8077                           prodl	equ	0xFF3
  8078                           intcon2	equ	0xFF1
  8079                           postinc0	equ	0xFEE
  8080                           wreg	equ	0xFE8
  8081                           indf1	equ	0xFE7
  8082                           postinc1	equ	0xFE6
  8083                           fsr1h	equ	0xFE2
  8084                           fsr1l	equ	0xFE1
  8085                           indf2	equ	0xFDF
  8086                           postinc2	equ	0xFDE
  8087                           postdec2	equ	0xFDD
  8088                           fsr2h	equ	0xFDA
  8089                           fsr2l	equ	0xFD9
  8090                           status	equ	0xFD8
  8091                           
  8092 ;; *************** function _USBCB_SOF_Handler *****************
  8093 ;; Defined at:
  8094 ;;		line 57 in file "../usb_callback.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;		None
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;		None
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      void 
  8101 ;; Registers used:
  8102 ;;		None
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  8108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  8109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  8110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  8111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  8112 ;;Total ram usage:        0 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; This function calls:
  8115 ;;		Nothing
  8116 ;; This function is called by:
  8117 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           	psect	text32
  8122  005626                     __ptext32:
  8123                           	opt stack 0
  8124  005626                     _USBCB_SOF_Handler:
  8125                           	opt stack 28
  8126                           
  8127                           ;incstack = 0
  8128  005626  0012               	return		;funcret
  8129  005628                     __end_of_USBCB_SOF_Handler:
  8130                           	opt stack 0
  8131                           tblptru	equ	0xFF8
  8132                           tblptrh	equ	0xFF7
  8133                           tblptrl	equ	0xFF6
  8134                           tablat	equ	0xFF5
  8135                           prodh	equ	0xFF4
  8136                           prodl	equ	0xFF3
  8137                           intcon2	equ	0xFF1
  8138                           postinc0	equ	0xFEE
  8139                           wreg	equ	0xFE8
  8140                           indf1	equ	0xFE7
  8141                           postinc1	equ	0xFE6
  8142                           fsr1h	equ	0xFE2
  8143                           fsr1l	equ	0xFE1
  8144                           indf2	equ	0xFDF
  8145                           postinc2	equ	0xFDE
  8146                           postdec2	equ	0xFDD
  8147                           fsr2h	equ	0xFDA
  8148                           fsr2l	equ	0xFD9
  8149                           status	equ	0xFD8
  8150                           
  8151 ;; *************** function _USBCBWakeFromSuspend *****************
  8152 ;; Defined at:
  8153 ;;		line 52 in file "../usb_callback.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;		None
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      void 
  8160 ;; Registers used:
  8161 ;;		None
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  8167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  8168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  8170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  8171 ;;Total ram usage:        0 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; This function calls:
  8174 ;;		Nothing
  8175 ;; This function is called by:
  8176 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180                           	psect	text33
  8181  005624                     __ptext33:
  8182                           	opt stack 0
  8183  005624                     _USBCBWakeFromSuspend:
  8184                           	opt stack 28
  8185                           
  8186                           ;incstack = 0
  8187  005624  0012               	return		;funcret
  8188  005626                     __end_of_USBCBWakeFromSuspend:
  8189                           	opt stack 0
  8190                           tblptru	equ	0xFF8
  8191                           tblptrh	equ	0xFF7
  8192                           tblptrl	equ	0xFF6
  8193                           tablat	equ	0xFF5
  8194                           prodh	equ	0xFF4
  8195                           prodl	equ	0xFF3
  8196                           intcon2	equ	0xFF1
  8197                           postinc0	equ	0xFEE
  8198                           wreg	equ	0xFE8
  8199                           indf1	equ	0xFE7
  8200                           postinc1	equ	0xFE6
  8201                           fsr1h	equ	0xFE2
  8202                           fsr1l	equ	0xFE1
  8203                           indf2	equ	0xFDF
  8204                           postinc2	equ	0xFDE
  8205                           postdec2	equ	0xFDD
  8206                           fsr2h	equ	0xFDA
  8207                           fsr2l	equ	0xFD9
  8208                           status	equ	0xFD8
  8209                           
  8210 ;; *************** function _USBCBSuspend *****************
  8211 ;; Defined at:
  8212 ;;		line 40 in file "../usb_callback.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;		None
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;		None
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  1    wreg      void 
  8219 ;; Registers used:
  8220 ;;		None
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  8226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  8227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  8228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  8229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  8230 ;;Total ram usage:        0 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; This function calls:
  8233 ;;		Nothing
  8234 ;; This function is called by:
  8235 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           	psect	text34
  8240  005622                     __ptext34:
  8241                           	opt stack 0
  8242  005622                     _USBCBSuspend:
  8243                           	opt stack 28
  8244                           
  8245                           ;incstack = 0
  8246  005622  0012               	return		;funcret
  8247  005624                     __end_of_USBCBSuspend:
  8248                           	opt stack 0
  8249                           tblptru	equ	0xFF8
  8250                           tblptrh	equ	0xFF7
  8251                           tblptrl	equ	0xFF6
  8252                           tablat	equ	0xFF5
  8253                           prodh	equ	0xFF4
  8254                           prodl	equ	0xFF3
  8255                           intcon2	equ	0xFF1
  8256                           postinc0	equ	0xFEE
  8257                           wreg	equ	0xFE8
  8258                           indf1	equ	0xFE7
  8259                           postinc1	equ	0xFE6
  8260                           fsr1h	equ	0xFE2
  8261                           fsr1l	equ	0xFE1
  8262                           indf2	equ	0xFDF
  8263                           postinc2	equ	0xFDE
  8264                           postdec2	equ	0xFDD
  8265                           fsr2h	equ	0xFDA
  8266                           fsr2l	equ	0xFD9
  8267                           status	equ	0xFD8
  8268                           
  8269 ;; *************** function _USBCBStdSetDscHandler *****************
  8270 ;; Defined at:
  8271 ;;		line 85 in file "../usb_callback.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;		None
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;		None
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      void 
  8278 ;; Registers used:
  8279 ;;		None
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  8285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  8286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  8287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  8288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  8289 ;;Total ram usage:        0 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; This function calls:
  8292 ;;		Nothing
  8293 ;; This function is called by:
  8294 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text35
  8299  005620                     __ptext35:
  8300                           	opt stack 0
  8301  005620                     _USBCBStdSetDscHandler:
  8302                           	opt stack 28
  8303                           
  8304                           ;incstack = 0
  8305  005620  0012               	return		;funcret
  8306  005622                     __end_of_USBCBStdSetDscHandler:
  8307                           	opt stack 0
  8308                           tblptru	equ	0xFF8
  8309                           tblptrh	equ	0xFF7
  8310                           tblptrl	equ	0xFF6
  8311                           tablat	equ	0xFF5
  8312                           prodh	equ	0xFF4
  8313                           prodl	equ	0xFF3
  8314                           intcon2	equ	0xFF1
  8315                           postinc0	equ	0xFEE
  8316                           wreg	equ	0xFE8
  8317                           indf1	equ	0xFE7
  8318                           postinc1	equ	0xFE6
  8319                           fsr1h	equ	0xFE2
  8320                           fsr1l	equ	0xFE1
  8321                           indf2	equ	0xFDF
  8322                           postinc2	equ	0xFDE
  8323                           postdec2	equ	0xFDD
  8324                           fsr2h	equ	0xFDA
  8325                           fsr2l	equ	0xFD9
  8326                           status	equ	0xFD8
  8327                           
  8328 ;; *************** function _USBCBInitEP *****************
  8329 ;; Defined at:
  8330 ;;		line 91 in file "../usb_callback.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;		None
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;		None
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  1    wreg      void 
  8337 ;; Registers used:
  8338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  8344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  8345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  8346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  8347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  8348 ;;Total ram usage:        0 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    2
  8351 ;; This function calls:
  8352 ;;		_USBEnableEndpoint
  8353 ;;		_USBTransferOnePacket
  8354 ;; This function is called by:
  8355 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           	psect	text36
  8360  005816                     __ptext36:
  8361                           	opt stack 0
  8362  005816                     _USBCBInitEP:
  8363                           	opt stack 26
  8364                           
  8365                           ;usb_callback.c: 94: USBEnableEndpoint(1,0x04|0x02|0x10|0x08);
  8366                           
  8367                           ;incstack = 0
  8368  005816  0E1E               	movlw	30
  8369  005818  6E08               	movwf	USBEnableEndpoint@options,c
  8370  00581A  0E01               	movlw	1
  8371  00581C  ECCE  F02B         	call	_USBEnableEndpoint
  8372                           
  8373                           ;usb_callback.c: 95: USBEnableEndpoint(2,0x04|0x02|0x10|0x08);
  8374  005820  0E1E               	movlw	30
  8375  005822  6E08               	movwf	USBEnableEndpoint@options,c
  8376  005824  0E02               	movlw	2
  8377  005826  ECCE  F02B         	call	_USBEnableEndpoint
  8378                           
  8379                           ;usb_callback.c: 96: USBEnableEndpoint(3,0x04|0x02|0x10|0x08);
  8380  00582A  0E1E               	movlw	30
  8381  00582C  6E08               	movwf	USBEnableEndpoint@options,c
  8382  00582E  0E03               	movlw	3
  8383  005830  ECCE  F02B         	call	_USBEnableEndpoint
  8384                           
  8385                           ;usb_callback.c: 98: lastOUTTransmission_k1 = USBTransferOnePacket(3,0,(BYTE*)&hid_repor
      +                          t_out_k1,1);
  8386  005834  0E00               	movlw	0
  8387  005836  6E01               	movwf	USBTransferOnePacket@dir,c
  8388  005838  0E7A               	movlw	122
  8389  00583A  6E02               	movwf	USBTransferOnePacket@data,c
  8390  00583C  0E06               	movlw	6
  8391  00583E  6E03               	movwf	USBTransferOnePacket@data+1,c
  8392  005840  0E01               	movlw	1
  8393  005842  6E04               	movwf	USBTransferOnePacket@len,c
  8394  005844  0E03               	movlw	3
  8395  005846  ECC6  F02E         	call	_USBTransferOnePacket
  8396  00584A  C001  F0B3         	movff	?_USBTransferOnePacket,_lastOUTTransmission_k1
  8397  00584E  C002  F0B4         	movff	?_USBTransferOnePacket+1,_lastOUTTransmission_k1+1
  8398  005852  0012               	return		;funcret
  8399  005854                     __end_of_USBCBInitEP:
  8400                           	opt stack 0
  8401                           tblptru	equ	0xFF8
  8402                           tblptrh	equ	0xFF7
  8403                           tblptrl	equ	0xFF6
  8404                           tablat	equ	0xFF5
  8405                           prodh	equ	0xFF4
  8406                           prodl	equ	0xFF3
  8407                           intcon2	equ	0xFF1
  8408                           postinc0	equ	0xFEE
  8409                           wreg	equ	0xFE8
  8410                           indf1	equ	0xFE7
  8411                           postinc1	equ	0xFE6
  8412                           fsr1h	equ	0xFE2
  8413                           fsr1l	equ	0xFE1
  8414                           indf2	equ	0xFDF
  8415                           postinc2	equ	0xFDE
  8416                           postdec2	equ	0xFDD
  8417                           fsr2h	equ	0xFDA
  8418                           fsr2l	equ	0xFD9
  8419                           status	equ	0xFD8
  8420                           
  8421 ;; *************** function _USBTransferOnePacket *****************
  8422 ;; Defined at:
  8423 ;;		line 2480 in file "../USB Stack/usb_device.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;  ep              1    wreg     unsigned char 
  8426 ;;  dir             1    0[COMRAM] unsigned char 
  8427 ;;  data            2    1[COMRAM] PTR unsigned char 
  8428 ;;		 -> hid_report_in_k1(8), hid_report_out_k1(1), joystick_input_j2(7), joystick_input_j1(7), 
  8429 ;;  len             1    3[COMRAM] unsigned char 
  8430 ;; Auto vars:     Size  Location     Type
  8431 ;;  ep              1    4[COMRAM] unsigned char 
  8432 ;;  handle          2    5[COMRAM] PTR volatile struct __BD
  8433 ;;		 -> BDT(64), 
  8434 ;; Return value:  Size  Location     Type
  8435 ;;                  2    0[COMRAM] PTR void 
  8436 ;; Registers used:
  8437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  8443 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0
  8444 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0
  8445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  8446 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0
  8447 ;;Total ram usage:        7 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_processJoystick_j1
  8453 ;;		_processJoystick_j2
  8454 ;;		_USBCBInitEP
  8455 ;;		_processKeyboard
  8456 ;; This function uses a non-reentrant model
  8457 ;;
  8458                           
  8459                           	psect	text37
  8460  005D8C                     __ptext37:
  8461                           	opt stack 0
  8462  005D8C                     _USBTransferOnePacket:
  8463                           	opt stack 29
  8464                           
  8465                           ;incstack = 0
  8466                           ;USBTransferOnePacket@ep stored from wreg
  8467  005D8C  6E05               	movwf	USBTransferOnePacket@ep,c
  8468                           
  8469                           ;usb_device.c: 2482: volatile BDT_ENTRY* handle;
  8470                           ;usb_device.c: 2485: if(dir != 0)
  8471  005D8E  5001               	movf	USBTransferOnePacket@dir,w,c
  8472  005D90  B4D8               	btfsc	status,2,c
  8473  005D92  D007               	goto	l434
  8474                           
  8475                           ;usb_device.c: 2486: {
  8476                           ;usb_device.c: 2488: handle = pBDTEntryIn[ep];
  8477  005D94  5005               	movf	USBTransferOnePacket@ep,w,c
  8478  005D96  0D02               	mullw	2
  8479  005D98  0E48               	movlw	low _pBDTEntryIn
  8480  005D9A  24F3               	addwf	prodl,w,c
  8481  005D9C  6ED9               	movwf	fsr2l,c
  8482  005D9E  0E00               	movlw	high _pBDTEntryIn
  8483  005DA0  D006               	goto	L7
  8484  005DA2                     l434:
  8485                           
  8486                           ;usb_device.c: 2490: else
  8487                           ;usb_device.c: 2491: {
  8488                           ;usb_device.c: 2493: handle = pBDTEntryOut[ep];
  8489  005DA2  5005               	movf	USBTransferOnePacket@ep,w,c
  8490  005DA4  0D02               	mullw	2
  8491  005DA6  0E9F               	movlw	low _pBDTEntryOut
  8492  005DA8  24F3               	addwf	prodl,w,c
  8493  005DAA  6ED9               	movwf	fsr2l,c
  8494  005DAC  0E00               	movlw	high _pBDTEntryOut
  8495  005DAE                     L7:
  8496  005DAE  20F4               	addwfc	prodh,w,c
  8497  005DB0  6EDA               	movwf	fsr2h,c
  8498  005DB2  CFDE F006          	movff	postinc2,USBTransferOnePacket@handle
  8499  005DB6  CFDD F007          	movff	postdec2,USBTransferOnePacket@handle+1
  8500                           
  8501                           ;usb_device.c: 2494: }
  8502                           ;usb_device.c: 2507: handle->ADR = (BYTE*)data;
  8503  005DBA  EE20 F002          	lfsr	2,2
  8504  005DBE  5006               	movf	USBTransferOnePacket@handle,w,c
  8505  005DC0  26D9               	addwf	fsr2l,f,c
  8506  005DC2  5007               	movf	USBTransferOnePacket@handle+1,w,c
  8507  005DC4  22DA               	addwfc	fsr2h,f,c
  8508  005DC6  C002  FFDE         	movff	USBTransferOnePacket@data,postinc2	;volatile
  8509  005DCA  C003  FFDD         	movff	USBTransferOnePacket@data+1,postdec2	;volatile
  8510                           
  8511                           ;usb_device.c: 2508: handle->CNT = len;
  8512  005DCE  EE20 F001          	lfsr	2,1
  8513  005DD2  5006               	movf	USBTransferOnePacket@handle,w,c
  8514  005DD4  26D9               	addwf	fsr2l,f,c
  8515  005DD6  5007               	movf	USBTransferOnePacket@handle+1,w,c
  8516  005DD8  22DA               	addwfc	fsr2h,f,c
  8517  005DDA  C004  FFDF         	movff	USBTransferOnePacket@len,indf2
  8518                           
  8519                           ;usb_device.c: 2509: handle->STAT.Val &= 0x40;
  8520  005DDE  C006  FFD9         	movff	USBTransferOnePacket@handle,fsr2l
  8521  005DE2  C007  FFDA         	movff	USBTransferOnePacket@handle+1,fsr2h
  8522  005DE6  0E40               	movlw	64
  8523  005DE8  16DF               	andwf	indf2,f,c
  8524                           
  8525                           ;usb_device.c: 2510: handle->STAT.Val |= 0x80 | 0x08;
  8526  005DEA  C006  FFD9         	movff	USBTransferOnePacket@handle,fsr2l
  8527  005DEE  C007  FFDA         	movff	USBTransferOnePacket@handle+1,fsr2h
  8528  005DF2  0E88               	movlw	136
  8529  005DF4  12DF               	iorwf	indf2,f,c
  8530                           
  8531                           ;usb_device.c: 2513: if(dir != 0)
  8532  005DF6  5001               	movf	USBTransferOnePacket@dir,w,c
  8533  005DF8  B4D8               	btfsc	status,2,c
  8534  005DFA  D007               	goto	l436
  8535                           
  8536                           ;usb_device.c: 2514: {
  8537                           ;usb_device.c: 2516: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;
  8538  005DFC  5005               	movf	USBTransferOnePacket@ep,w,c
  8539  005DFE  0D02               	mullw	2
  8540  005E00  0E48               	movlw	low _pBDTEntryIn
  8541  005E02  24F3               	addwf	prodl,w,c
  8542  005E04  6ED9               	movwf	fsr2l,c
  8543  005E06  0E00               	movlw	high _pBDTEntryIn
  8544  005E08  D006               	goto	L8
  8545  005E0A                     l436:
  8546                           
  8547                           ;usb_device.c: 2518: else
  8548                           ;usb_device.c: 2519: {
  8549                           ;usb_device.c: 2521: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;
  8550  005E0A  5005               	movf	USBTransferOnePacket@ep,w,c
  8551  005E0C  0D02               	mullw	2
  8552  005E0E  0E9F               	movlw	low _pBDTEntryOut
  8553  005E10  24F3               	addwf	prodl,w,c
  8554  005E12  6ED9               	movwf	fsr2l,c
  8555  005E14  0E00               	movlw	high _pBDTEntryOut
  8556  005E16                     L8:
  8557  005E16  20F4               	addwfc	prodh,w,c
  8558  005E18  6EDA               	movwf	fsr2h,c
  8559  005E1A  0E04               	movlw	4
  8560  005E1C  1ADF               	xorwf	indf2,f,c
  8561                           
  8562                           ;usb_device.c: 2522: }
  8563                           ;usb_device.c: 2523: return (void*)handle;
  8564  005E1E  C006  F001         	movff	USBTransferOnePacket@handle,?_USBTransferOnePacket
  8565  005E22  C007  F002         	movff	USBTransferOnePacket@handle+1,?_USBTransferOnePacket+1
  8566  005E26  0012               	return	
  8567  005E28                     __end_of_USBTransferOnePacket:
  8568                           	opt stack 0
  8569                           tblptru	equ	0xFF8
  8570                           tblptrh	equ	0xFF7
  8571                           tblptrl	equ	0xFF6
  8572                           tablat	equ	0xFF5
  8573                           prodh	equ	0xFF4
  8574                           prodl	equ	0xFF3
  8575                           intcon2	equ	0xFF1
  8576                           postinc0	equ	0xFEE
  8577                           wreg	equ	0xFE8
  8578                           indf1	equ	0xFE7
  8579                           postinc1	equ	0xFE6
  8580                           fsr1h	equ	0xFE2
  8581                           fsr1l	equ	0xFE1
  8582                           indf2	equ	0xFDF
  8583                           postinc2	equ	0xFDE
  8584                           postdec2	equ	0xFDD
  8585                           fsr2h	equ	0xFDA
  8586                           fsr2l	equ	0xFD9
  8587                           status	equ	0xFD8
  8588                           
  8589 ;; *************** function _USBEnableEndpoint *****************
  8590 ;; Defined at:
  8591 ;;		line 2380 in file "../USB Stack/usb_device.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;  ep              1    wreg     unsigned char 
  8594 ;;  options         1    7[COMRAM] unsigned char 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  ep              1   10[COMRAM] unsigned char 
  8597 ;;  p               2    8[COMRAM] PTR unsigned char 
  8598 ;;		 -> UEP0(1), 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  1    wreg      void 
  8601 ;; Registers used:
  8602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  8608 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0
  8609 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0
  8610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  8611 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0
  8612 ;;Total ram usage:        4 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    1
  8615 ;; This function calls:
  8616 ;;		_USBConfigureEndpoint
  8617 ;; This function is called by:
  8618 ;;		_USBCBInitEP
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           	psect	text38
  8623  00579C                     __ptext38:
  8624                           	opt stack 0
  8625  00579C                     _USBEnableEndpoint:
  8626                           	opt stack 26
  8627                           
  8628                           ;incstack = 0
  8629                           ;USBEnableEndpoint@ep stored from wreg
  8630  00579C  6E0B               	movwf	USBEnableEndpoint@ep,c
  8631                           
  8632                           ;usb_device.c: 2384: {
  8633                           ;usb_device.c: 2385: unsigned char* p;
  8634                           ;usb_device.c: 2390: p = (unsigned char*)(&UEP0+ep);
  8635  00579E  500B               	movf	USBEnableEndpoint@ep,w,c
  8636  0057A0  0D01               	mullw	1
  8637  0057A2  0E70               	movlw	112
  8638  0057A4  24F3               	addwf	prodl,w,c
  8639  0057A6  6E09               	movwf	USBEnableEndpoint@p,c
  8640  0057A8  0E0F               	movlw	15
  8641  0057AA  20F4               	addwfc	prodh,w,c
  8642  0057AC  6E0A               	movwf	USBEnableEndpoint@p+1,c
  8643                           
  8644                           ;usb_device.c: 2392: *p = options;
  8645  0057AE  C009  FFD9         	movff	USBEnableEndpoint@p,fsr2l
  8646  0057B2  C00A  FFDA         	movff	USBEnableEndpoint@p+1,fsr2h
  8647  0057B6  C008  FFDF         	movff	USBEnableEndpoint@options,indf2
  8648                           
  8649                           ;usb_device.c: 2393: }
  8650                           ;usb_device.c: 2395: if(options & 0x04)
  8651  0057BA  A408               	btfss	USBEnableEndpoint@options,2,c
  8652  0057BC  D005               	goto	l424
  8653                           
  8654                           ;usb_device.c: 2396: {
  8655                           ;usb_device.c: 2397: USBConfigureEndpoint(ep,0);
  8656  0057BE  0E00               	movlw	0
  8657  0057C0  6E01               	movwf	USBConfigureEndpoint@direction,c
  8658  0057C2  500B               	movf	USBEnableEndpoint@ep,w,c
  8659  0057C4  ECA6  F02D         	call	_USBConfigureEndpoint
  8660  0057C8                     l424:
  8661                           
  8662                           ;usb_device.c: 2398: }
  8663                           ;usb_device.c: 2399: if(options & 0x02)
  8664  0057C8  A208               	btfss	USBEnableEndpoint@options,1,c
  8665  0057CA  0012               	return	
  8666                           
  8667                           ;usb_device.c: 2400: {
  8668                           ;usb_device.c: 2401: USBConfigureEndpoint(ep,1);
  8669  0057CC  0E01               	movlw	1
  8670  0057CE  6E01               	movwf	USBConfigureEndpoint@direction,c
  8671  0057D0  500B               	movf	USBEnableEndpoint@ep,w,c
  8672  0057D2  ECA6  F02D         	call	_USBConfigureEndpoint
  8673  0057D6  0012               	return	
  8674  0057D8                     __end_of_USBEnableEndpoint:
  8675                           	opt stack 0
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon2	equ	0xFF1
  8683                           postinc0	equ	0xFEE
  8684                           wreg	equ	0xFE8
  8685                           indf1	equ	0xFE7
  8686                           postinc1	equ	0xFE6
  8687                           fsr1h	equ	0xFE2
  8688                           fsr1l	equ	0xFE1
  8689                           indf2	equ	0xFDF
  8690                           postinc2	equ	0xFDE
  8691                           postdec2	equ	0xFDD
  8692                           fsr2h	equ	0xFDA
  8693                           fsr2l	equ	0xFD9
  8694                           status	equ	0xFD8
  8695                           
  8696 ;; *************** function _USBConfigureEndpoint *****************
  8697 ;; Defined at:
  8698 ;;		line 2281 in file "../USB Stack/usb_device.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;  EPNum           1    wreg     unsigned char 
  8701 ;;  direction       1    0[COMRAM] unsigned char 
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;  EPNum           1    4[COMRAM] unsigned char 
  8704 ;;  handle          2    5[COMRAM] PTR volatile struct __BD
  8705 ;;		 -> BDT(64), 
  8706 ;;  workaround      1    3[COMRAM] unsigned char 
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  1    wreg      void 
  8709 ;; Registers used:
  8710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  8716 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0
  8717 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0
  8718 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0
  8719 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0
  8720 ;;Total ram usage:        7 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; This function calls:
  8723 ;;		Nothing
  8724 ;; This function is called by:
  8725 ;;		_USBEnableEndpoint
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           	psect	text39
  8730  005B4C                     __ptext39:
  8731                           	opt stack 0
  8732  005B4C                     _USBConfigureEndpoint:
  8733                           	opt stack 26
  8734                           
  8735                           ;incstack = 0
  8736                           ;USBConfigureEndpoint@EPNum stored from wreg
  8737  005B4C  6E05               	movwf	USBConfigureEndpoint@EPNum,c
  8738                           
  8739                           ;usb_device.c: 2283: volatile BDT_ENTRY* handle;
  8740                           ;usb_device.c: 2285: unsigned char workaround;
  8741                           ;usb_device.c: 2288: handle = (volatile BDT_ENTRY*)&BDT[0];
  8742  005B4E  0E00               	movlw	0
  8743  005B50  6E06               	movwf	USBConfigureEndpoint@handle,c
  8744  005B52  0E04               	movlw	4
  8745  005B54  6E07               	movwf	USBConfigureEndpoint@handle+1,c
  8746                           
  8747                           ;usb_device.c: 2293: workaround = (4*(4*EPNum+2*direction+0));
  8748  005B56  5001               	movf	USBConfigureEndpoint@direction,w,c
  8749  005B58  0D02               	mullw	2
  8750  005B5A  CFF3 F002          	movff	prodl,??_USBConfigureEndpoint
  8751  005B5E  5005               	movf	USBConfigureEndpoint@EPNum,w,c
  8752  005B60  0D04               	mullw	4
  8753  005B62  50F3               	movf	prodl,w,c
  8754  005B64  2402               	addwf	??_USBConfigureEndpoint,w,c
  8755  005B66  6E03               	movwf	(??_USBConfigureEndpoint+1)& (0+255),c
  8756  005B68  90D8               	bcf	status,0,c
  8757  005B6A  3603               	rlcf	??_USBConfigureEndpoint+1,f,c
  8758  005B6C  90D8               	bcf	status,0,c
  8759  005B6E  3403               	rlcf	??_USBConfigureEndpoint+1,w,c
  8760  005B70  6E04               	movwf	USBConfigureEndpoint@workaround,c
  8761                           
  8762                           ;usb_device.c: 2294: workaround = workaround/sizeof(BDT_ENTRY);
  8763  005B72  4004               	rrncf	USBConfigureEndpoint@workaround,w,c
  8764  005B74  42E8               	rrncf	wreg,f,c
  8765  005B76  0B3F               	andlw	63
  8766  005B78  6E04               	movwf	USBConfigureEndpoint@workaround,c
  8767                           
  8768                           ;usb_device.c: 2295: handle += workaround;
  8769  005B7A  5004               	movf	USBConfigureEndpoint@workaround,w,c
  8770  005B7C  0D04               	mullw	4
  8771  005B7E  50F3               	movf	prodl,w,c
  8772  005B80  2606               	addwf	USBConfigureEndpoint@handle,f,c
  8773  005B82  50F4               	movf	prodh,w,c
  8774  005B84  2207               	addwfc	USBConfigureEndpoint@handle+1,f,c
  8775                           
  8776                           ;usb_device.c: 2299: handle->STAT.UOWN = 0;
  8777  005B86  C006  FFD9         	movff	USBConfigureEndpoint@handle,fsr2l
  8778  005B8A  C007  FFDA         	movff	USBConfigureEndpoint@handle+1,fsr2h
  8779  005B8E  9EDF               	bcf	indf2,7,c
  8780                           
  8781                           ;usb_device.c: 2301: if(direction == 0)
  8782  005B90  5001               	movf	USBConfigureEndpoint@direction,w,c
  8783  005B92  A4D8               	btfss	status,2,c
  8784  005B94  D007               	goto	l419
  8785                           
  8786                           ;usb_device.c: 2302: {
  8787                           ;usb_device.c: 2303: pBDTEntryOut[EPNum] = handle;
  8788  005B96  5005               	movf	USBConfigureEndpoint@EPNum,w,c
  8789  005B98  0D02               	mullw	2
  8790  005B9A  0E9F               	movlw	low _pBDTEntryOut
  8791  005B9C  24F3               	addwf	prodl,w,c
  8792  005B9E  6ED9               	movwf	fsr2l,c
  8793  005BA0  0E00               	movlw	high _pBDTEntryOut
  8794  005BA2  D006               	goto	L9
  8795  005BA4                     l419:
  8796                           
  8797                           ;usb_device.c: 2305: else
  8798                           ;usb_device.c: 2306: {
  8799                           ;usb_device.c: 2307: pBDTEntryIn[EPNum] = handle;
  8800  005BA4  5005               	movf	USBConfigureEndpoint@EPNum,w,c
  8801  005BA6  0D02               	mullw	2
  8802  005BA8  0E48               	movlw	low _pBDTEntryIn
  8803  005BAA  24F3               	addwf	prodl,w,c
  8804  005BAC  6ED9               	movwf	fsr2l,c
  8805  005BAE  0E00               	movlw	high _pBDTEntryIn
  8806  005BB0                     L9:
  8807  005BB0  20F4               	addwfc	prodh,w,c
  8808  005BB2  6EDA               	movwf	fsr2h,c
  8809  005BB4  C006  FFDE         	movff	USBConfigureEndpoint@handle,postinc2
  8810  005BB8  C007  FFDD         	movff	USBConfigureEndpoint@handle+1,postdec2
  8811                           
  8812                           ;usb_device.c: 2308: }
  8813                           ;usb_device.c: 2311: handle->STAT.DTS = 0;
  8814  005BBC  C006  FFD9         	movff	USBConfigureEndpoint@handle,fsr2l
  8815  005BC0  C007  FFDA         	movff	USBConfigureEndpoint@handle+1,fsr2h
  8816  005BC4  9CDF               	bcf	indf2,6,c
  8817                           
  8818                           ;usb_device.c: 2312: (handle+1)->STAT.DTS = 1;
  8819  005BC6  EE20 F004          	lfsr	2,4
  8820  005BCA  5006               	movf	USBConfigureEndpoint@handle,w,c
  8821  005BCC  26D9               	addwf	fsr2l,f,c
  8822  005BCE  5007               	movf	USBConfigureEndpoint@handle+1,w,c
  8823  005BD0  22DA               	addwfc	fsr2h,f,c
  8824  005BD2  8CDF               	bsf	indf2,6,c
  8825  005BD4  0012               	return		;funcret
  8826  005BD6                     __end_of_USBConfigureEndpoint:
  8827                           	opt stack 0
  8828                           tblptru	equ	0xFF8
  8829                           tblptrh	equ	0xFF7
  8830                           tblptrl	equ	0xFF6
  8831                           tablat	equ	0xFF5
  8832                           prodh	equ	0xFF4
  8833                           prodl	equ	0xFF3
  8834                           intcon2	equ	0xFF1
  8835                           postinc0	equ	0xFEE
  8836                           wreg	equ	0xFE8
  8837                           indf1	equ	0xFE7
  8838                           postinc1	equ	0xFE6
  8839                           fsr1h	equ	0xFE2
  8840                           fsr1l	equ	0xFE1
  8841                           indf2	equ	0xFDF
  8842                           postinc2	equ	0xFDE
  8843                           postdec2	equ	0xFDD
  8844                           fsr2h	equ	0xFDA
  8845                           fsr2l	equ	0xFD9
  8846                           status	equ	0xFD8
  8847                           
  8848 ;; *************** function _USBCBErrorHandler *****************
  8849 ;; Defined at:
  8850 ;;		line 66 in file "../usb_callback.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;		None
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;		None
  8855 ;; Return value:  Size  Location     Type
  8856 ;;                  1    wreg      void 
  8857 ;; Registers used:
  8858 ;;		None
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  8864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  8865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  8866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  8867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  8868 ;;Total ram usage:        0 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; This function calls:
  8871 ;;		Nothing
  8872 ;; This function is called by:
  8873 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           	psect	text40
  8878  00561E                     __ptext40:
  8879                           	opt stack 0
  8880  00561E                     _USBCBErrorHandler:
  8881                           	opt stack 28
  8882                           
  8883                           ;incstack = 0
  8884  00561E  0012               	return		;funcret
  8885  005620                     __end_of_USBCBErrorHandler:
  8886                           	opt stack 0
  8887                           tblptru	equ	0xFF8
  8888                           tblptrh	equ	0xFF7
  8889                           tblptrl	equ	0xFF6
  8890                           tablat	equ	0xFF5
  8891                           prodh	equ	0xFF4
  8892                           prodl	equ	0xFF3
  8893                           intcon2	equ	0xFF1
  8894                           postinc0	equ	0xFEE
  8895                           wreg	equ	0xFE8
  8896                           indf1	equ	0xFE7
  8897                           postinc1	equ	0xFE6
  8898                           fsr1h	equ	0xFE2
  8899                           fsr1l	equ	0xFE1
  8900                           indf2	equ	0xFDF
  8901                           postinc2	equ	0xFDE
  8902                           postdec2	equ	0xFDD
  8903                           fsr2h	equ	0xFDA
  8904                           fsr2l	equ	0xFD9
  8905                           status	equ	0xFD8
  8906                           
  8907 ;; *************** function _USBCBCheckOtherReq *****************
  8908 ;; Defined at:
  8909 ;;		line 73 in file "../usb_callback.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;		None
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;		None
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      void 
  8916 ;; Registers used:
  8917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  8923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  8924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  8925 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0
  8926 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0
  8927 ;;Total ram usage:        2 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    1
  8930 ;; This function calls:
  8931 ;;		_USBCheckHIDRequest_j1
  8932 ;;		_USBCheckHIDRequest_j2
  8933 ;;		_USBCheckHIDRequest_k1
  8934 ;; This function is called by:
  8935 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           	psect	text41
  8940  0057D8                     __ptext41:
  8941                           	opt stack 0
  8942  0057D8                     _USBCBCheckOtherReq:
  8943                           	opt stack 27
  8944                           
  8945                           ;usb_callback.c: 76: switch ( SetupPkt.wIndex ) {
  8946                           
  8947                           ;incstack = 0
  8948  0057D8  D009               	goto	l751
  8949  0057DA  EC95  F030         	call	_USBCheckHIDRequest_j1	;wreg free
  8950  0057DE  0012               	return	
  8951  0057E0  EC04  F031         	call	_USBCheckHIDRequest_j2	;wreg free
  8952  0057E4  0012               	return	
  8953  0057E6  EC73  F031         	call	_USBCheckHIDRequest_k1	;wreg free
  8954                           
  8955                           ;usb_callback.c: 81: }
  8956                           
  8957                           ;usb_callback.c: 80: default: break;
  8958  0057EA  0012               	return	
  8959  0057EC                     l751:
  8960  0057EC  EE25 F004          	lfsr	2,1284	;volatile
  8961  0057F0  CFDE F001          	movff	postinc2,??_USBCBCheckOtherReq
  8962  0057F4  CFDD F002          	movff	postdec2,??_USBCBCheckOtherReq+1
  8963                           
  8964                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8965                           ; Switch size 1, requested type "space"
  8966                           ; Number of cases is 1, Range of values is 0 to 0
  8967                           ; switch strategies available:
  8968                           ; Name         Instructions Cycles
  8969                           ; simple_byte            4     3 (average)
  8970                           ;	Chosen strategy is simple_byte
  8971  0057F8  5002               	movf	??_USBCBCheckOtherReq+1,w,c
  8972  0057FA  0A00               	xorlw	0	; case 0
  8973  0057FC  A4D8               	btfss	status,2,c
  8974  0057FE  0012               	return	
  8975                           
  8976                           ; Switch size 1, requested type "space"
  8977                           ; Number of cases is 3, Range of values is 0 to 2
  8978                           ; switch strategies available:
  8979                           ; Name         Instructions Cycles
  8980                           ; simple_byte           10     6 (average)
  8981                           ;	Chosen strategy is simple_byte
  8982  005800  5001               	movf	??_USBCBCheckOtherReq,w,c
  8983  005802  0A00               	xorlw	0	; case 0
  8984  005804  B4D8               	btfsc	status,2,c
  8985  005806  D7E9               	goto	l752
  8986  005808  0A01               	xorlw	1	; case 1
  8987  00580A  B4D8               	btfsc	status,2,c
  8988  00580C  D7E9               	goto	l754
  8989  00580E  0A03               	xorlw	3	; case 2
  8990  005810  A4D8               	btfss	status,2,c
  8991  005812  0012               	return	
  8992  005814  D7E8               	goto	l755
  8993  005816                     __end_of_USBCBCheckOtherReq:
  8994                           	opt stack 0
  8995                           tblptru	equ	0xFF8
  8996                           tblptrh	equ	0xFF7
  8997                           tblptrl	equ	0xFF6
  8998                           tablat	equ	0xFF5
  8999                           prodh	equ	0xFF4
  9000                           prodl	equ	0xFF3
  9001                           intcon2	equ	0xFF1
  9002                           postinc0	equ	0xFEE
  9003                           wreg	equ	0xFE8
  9004                           indf1	equ	0xFE7
  9005                           postinc1	equ	0xFE6
  9006                           fsr1h	equ	0xFE2
  9007                           fsr1l	equ	0xFE1
  9008                           indf2	equ	0xFDF
  9009                           postinc2	equ	0xFDE
  9010                           postdec2	equ	0xFDD
  9011                           fsr2h	equ	0xFDA
  9012                           fsr2l	equ	0xFD9
  9013                           status	equ	0xFD8
  9014                           
  9015 ;; *************** function _USBCheckHIDRequest_k1 *****************
  9016 ;; Defined at:
  9017 ;;		line 31 in file "../USB Stack/keyboard1_hid.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;		None
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;		None
  9022 ;; Return value:  Size  Location     Type
  9023 ;;                  1    wreg      void 
  9024 ;; Registers used:
  9025 ;;		wreg, status,2, status,0
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  9031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  9032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  9033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  9034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  9035 ;;Total ram usage:        0 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; This function calls:
  9038 ;;		Nothing
  9039 ;; This function is called by:
  9040 ;;		_USBCBCheckOtherReq
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           	psect	text42
  9045  0062E6                     __ptext42:
  9046                           	opt stack 0
  9047  0062E6                     _USBCheckHIDRequest_k1:
  9048                           	opt stack 27
  9049                           
  9050                           ;keyboard1_hid.c: 33: if(SetupPkt.Recipient != (0x01)) return;
  9051                           
  9052                           ;incstack = 0
  9053  0062E6  0105               	movlb	5	; () banked
  9054  0062E8  5100               	movf	0,w,b	;volatile
  9055  0062EA  0B1F               	andlw	31
  9056  0062EC  06E8               	decf	wreg,f,c
  9057  0062EE  A4D8               	btfss	status,2,c
  9058  0062F0  0012               	return	
  9059                           
  9060                           ; BSR set to: 5
  9061                           ;keyboard1_hid.c: 34: if(SetupPkt.bIntfID != 0x02) return;
  9062                           
  9063                           ; BSR set to: 5
  9064                           
  9065                           ; BSR set to: 5
  9066  0062F2  0E02               	movlw	2
  9067  0062F4  1904               	xorwf	4,w,b	;volatile
  9068  0062F6  A4D8               	btfss	status,2,c
  9069  0062F8  0012               	return	
  9070                           
  9071                           ; BSR set to: 5
  9072                           ;keyboard1_hid.c: 36: if(SetupPkt.bRequest == 6)
  9073                           
  9074                           ; BSR set to: 5
  9075                           
  9076                           ; BSR set to: 5
  9077  0062FA  0E06               	movlw	6
  9078  0062FC  1901               	xorwf	1,w,b	;volatile
  9079  0062FE  B4D8               	btfsc	status,2,c
  9080  006300  D01D               	goto	l463
  9081  006302  D026               	goto	l466
  9082  006304                     
  9083                           ; BSR set to: 5
  9084                           ;keyboard1_hid.c: 41: if(USBActiveConfiguration == 1)
  9085                           
  9086                           ; BSR set to: 5
  9087  006304  045F               	decf	_USBActiveConfiguration,w,c
  9088  006306  A4D8               	btfss	status,2,c
  9089  006308  D023               	goto	l466
  9090                           
  9091                           ; BSR set to: 5
  9092                           ;keyboard1_hid.c: 42: {
  9093                           ;keyboard1_hid.c: 43: { inPipes[0].pSrc.bRom = (const BYTE*)&configDescriptor1 + 18; inP
      +                          ipes[0].wCount.Val = sizeof(USB_HID_DSC_K1)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00;
      +                           };
  9094  00630A  0E24               	movlw	low (_configDescriptor1+18)
  9095  00630C  6E50               	movwf	_inPipes,c
  9096  00630E  0E7E               	movlw	high (_configDescriptor1+18)
  9097  006310  6E51               	movwf	_inPipes+1,c
  9098                           
  9099                           ; BSR set to: 5
  9100  006312  0E00               	movlw	0
  9101  006314  6E55               	movwf	_inPipes+5,c
  9102  006316  0E09               	movlw	9
  9103  006318  D00D               	goto	L10
  9104  00631A                     l3540:
  9105                           
  9106                           ; BSR set to: 5
  9107  00631A  0EC0               	movlw	192
  9108  00631C  6E53               	movwf	_inPipes+3,c
  9109                           
  9110                           ; BSR set to: 5
  9111                           ;keyboard1_hid.c: 47: }
  9112                           ;keyboard1_hid.c: 48: break;
  9113  00631E  D018               	goto	l466
  9114  006320                     
  9115                           ; BSR set to: 5
  9116                           ;keyboard1_hid.c: 50: if(USBActiveConfiguration == 1)
  9117                           
  9118                           ; BSR set to: 5
  9119  006320  045F               	decf	_USBActiveConfiguration,w,c
  9120  006322  A4D8               	btfss	status,2,c
  9121  006324  D015               	goto	l466
  9122                           
  9123                           ; BSR set to: 5
  9124                           ;keyboard1_hid.c: 51: {
  9125                           ;keyboard1_hid.c: 52: { inPipes[0].pSrc.bRom = (const BYTE*)&hid_rpt01_k1; inPipes[0].wC
      +                          ount.Val = sizeof(hid_rpt01_k1); inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
  9126  006326  0E0F               	movlw	low _hid_rpt01_k1
  9127  006328  6E50               	movwf	_inPipes,c
  9128  00632A  0E7F               	movlw	high _hid_rpt01_k1
  9129  00632C  6E51               	movwf	_inPipes+1,c
  9130                           
  9131                           ; BSR set to: 5
  9132  00632E  0E00               	movlw	0
  9133  006330  6E55               	movwf	_inPipes+5,c
  9134  006332  0E3F               	movlw	63
  9135  006334                     L10:
  9136  006334  6E54               	movwf	_inPipes+4,c
  9137  006336  D7F1               	goto	l3540
  9138  006338                     
  9139                           ; BSR set to: 5
  9140                           ;keyboard1_hid.c: 59: inPipes[0].info.Val = 0x00 | 0x80;
  9141                           
  9142                           ; BSR set to: 5
  9143  006338  0E80               	movlw	128
  9144  00633A  D7F0               	goto	L11
  9145  00633C                     l463:
  9146                           
  9147                           ; BSR set to: 5
  9148                           
  9149                           ; BSR set to: 5
  9150  00633C  5103               	movf	3,w,b	;volatile
  9151                           
  9152                           ; Switch size 1, requested type "space"
  9153                           ; Number of cases is 3, Range of values is 33 to 35
  9154                           ; switch strategies available:
  9155                           ; Name         Instructions Cycles
  9156                           ; simple_byte           10     6 (average)
  9157                           ;	Chosen strategy is simple_byte
  9158  00633E  0A21               	xorlw	33	; case 33
  9159  006340  B4D8               	btfsc	status,2,c
  9160  006342  D7E0               	goto	l464
  9161  006344  0A03               	xorlw	3	; case 34
  9162  006346  B4D8               	btfsc	status,2,c
  9163  006348  D7EB               	goto	l467
  9164  00634A  0A01               	xorlw	1	; case 35
  9165  00634C  B4D8               	btfsc	status,2,c
  9166  00634E  D7F4               	goto	l469
  9167  006350                     l466:
  9168                           
  9169                           ; BSR set to: 5
  9170                           ;keyboard1_hid.c: 62: }
  9171                           ;keyboard1_hid.c: 64: if(SetupPkt.RequestType != (0x20>>5))
  9172                           
  9173                           ; BSR set to: 5
  9174                           
  9175                           ; BSR set to: 5
  9176  006350  3900               	swapf	0,w,b	;volatile
  9177  006352  32E8               	rrcf	wreg,f,c
  9178  006354  0B03               	andlw	3
  9179  006356  06E8               	decf	wreg,f,c
  9180  006358  A4D8               	btfss	status,2,c
  9181  00635A  0012               	return	
  9182  00635C  D020               	goto	l471
  9183  00635E                     
  9184                           ; BSR set to: 5
  9185                           ;keyboard1_hid.c: 82: { inPipes[0].pSrc.bRam = (BYTE*)&idle_rate_k1; inPipes[0].wCount.V
      +                          al = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
  9186                           
  9187                           ; BSR set to: 5
  9188  00635E  0EBD               	movlw	low _idle_rate_k1
  9189  006360  6E50               	movwf	_inPipes,c
  9190  006362  0E00               	movlw	high _idle_rate_k1
  9191  006364  6E51               	movwf	_inPipes+1,c
  9192                           
  9193                           ; BSR set to: 5
  9194  006366  0E00               	movlw	0
  9195  006368  6E55               	movwf	_inPipes+5,c
  9196  00636A  0E01               	movlw	1
  9197  00636C  6E54               	movwf	_inPipes+4,c
  9198                           
  9199                           ; BSR set to: 5
  9200  00636E  0EC1               	movlw	193
  9201  006370  6E53               	movwf	_inPipes+3,c
  9202                           
  9203                           ;keyboard1_hid.c: 86: break;
  9204  006372  0012               	return	
  9205  006374                     
  9206                           ; BSR set to: 5
  9207                           ;keyboard1_hid.c: 88: inPipes[0].info.Val = 0x00 | 0x80;
  9208                           
  9209                           ; BSR set to: 5
  9210  006374  0E80               	movlw	128
  9211  006376  6E53               	movwf	_inPipes+3,c
  9212                           
  9213                           ; BSR set to: 5
  9214                           ;keyboard1_hid.c: 89: idle_rate_k1 = SetupPkt.W_Value.byte.HB;
  9215  006378  C503 F0BD          	movff	1283,_idle_rate_k1	;volatile
  9216                           
  9217                           ;keyboard1_hid.c: 90: break;
  9218  00637C  0012               	return	
  9219  00637E                     
  9220                           ; BSR set to: 5
  9221                           ;keyboard1_hid.c: 92: { inPipes[0].pSrc.bRam = (BYTE*)&active_protocol_k1; inPipes[0].wC
      +                          ount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
  9222                           
  9223                           ; BSR set to: 5
  9224  00637E  0EBC               	movlw	low _active_protocol_k1
  9225  006380  6E50               	movwf	_inPipes,c
  9226  006382  0E00               	movlw	high _active_protocol_k1
  9227  006384  6E51               	movwf	_inPipes+1,c
  9228                           
  9229                           ; BSR set to: 5
  9230  006386  0E00               	movlw	0
  9231  006388  6E55               	movwf	_inPipes+5,c
  9232  00638A  0E01               	movlw	1
  9233  00638C  6E54               	movwf	_inPipes+4,c
  9234                           
  9235                           ; BSR set to: 5
  9236  00638E  0E81               	movlw	129
  9237  006390  6E53               	movwf	_inPipes+3,c
  9238                           
  9239                           ;keyboard1_hid.c: 96: break;
  9240  006392  0012               	return	
  9241  006394                     
  9242                           ; BSR set to: 5
  9243                           ;keyboard1_hid.c: 98: inPipes[0].info.Val = 0x00 | 0x80;
  9244                           
  9245                           ; BSR set to: 5
  9246  006394  0E80               	movlw	128
  9247  006396  6E53               	movwf	_inPipes+3,c
  9248                           
  9249                           ; BSR set to: 5
  9250                           ;keyboard1_hid.c: 99: active_protocol_k1 = SetupPkt.W_Value.byte.LB;
  9251  006398  C502 F0BC          	movff	1282,_active_protocol_k1	;volatile
  9252                           
  9253                           ; BSR set to: 5
  9254                           ;keyboard1_hid.c: 101: }
  9255                           
  9256                           ;keyboard1_hid.c: 100: break;
  9257  00639C  0012               	return	
  9258  00639E                     l471:
  9259                           
  9260                           ; BSR set to: 5
  9261                           
  9262                           ; BSR set to: 5
  9263  00639E  5101               	movf	1,w,b	;volatile
  9264                           
  9265                           ; Switch size 1, requested type "space"
  9266                           ; Number of cases is 6, Range of values is 1 to 11
  9267                           ; switch strategies available:
  9268                           ; Name         Instructions Cycles
  9269                           ; simple_byte           19    10 (average)
  9270                           ;	Chosen strategy is simple_byte
  9271  0063A0  0A01               	xorlw	1	; case 1
  9272  0063A2  B4D8               	btfsc	status,2,c
  9273  0063A4  0012               	return	
  9274  0063A6  0A03               	xorlw	3	; case 2
  9275  0063A8  B4D8               	btfsc	status,2,c
  9276  0063AA  D7D9               	goto	l475
  9277  0063AC  0A01               	xorlw	1	; case 3
  9278  0063AE  B4D8               	btfsc	status,2,c
  9279  0063B0  D7E6               	goto	l477
  9280  0063B2  0A0A               	xorlw	10	; case 9
  9281  0063B4  B4D8               	btfsc	status,2,c
  9282  0063B6  0012               	return	
  9283  0063B8  0A03               	xorlw	3	; case 10
  9284  0063BA  B4D8               	btfsc	status,2,c
  9285  0063BC  D7DB               	goto	l476
  9286  0063BE  0A01               	xorlw	1	; case 11
  9287  0063C0  A4D8               	btfss	status,2,c
  9288  0063C2  0012               	return	
  9289  0063C4  D7E7               	goto	l478
  9290  0063C6                     __end_of_USBCheckHIDRequest_k1:
  9291                           	opt stack 0
  9292                           tblptru	equ	0xFF8
  9293                           tblptrh	equ	0xFF7
  9294                           tblptrl	equ	0xFF6
  9295                           tablat	equ	0xFF5
  9296                           prodh	equ	0xFF4
  9297                           prodl	equ	0xFF3
  9298                           intcon2	equ	0xFF1
  9299                           postinc0	equ	0xFEE
  9300                           wreg	equ	0xFE8
  9301                           indf1	equ	0xFE7
  9302                           postinc1	equ	0xFE6
  9303                           fsr1h	equ	0xFE2
  9304                           fsr1l	equ	0xFE1
  9305                           indf2	equ	0xFDF
  9306                           postinc2	equ	0xFDE
  9307                           postdec2	equ	0xFDD
  9308                           fsr2h	equ	0xFDA
  9309                           fsr2l	equ	0xFD9
  9310                           status	equ	0xFD8
  9311                           
  9312 ;; *************** function _USBCheckHIDRequest_j2 *****************
  9313 ;; Defined at:
  9314 ;;		line 31 in file "../USB Stack/joystick2_hid.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;		None
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;		None
  9319 ;; Return value:  Size  Location     Type
  9320 ;;                  1    wreg      void 
  9321 ;; Registers used:
  9322 ;;		wreg, status,2, status,0
  9323 ;; Tracked objects:
  9324 ;;		On entry : 0/0
  9325 ;;		On exit  : 0/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  9328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  9329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  9330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  9331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  9332 ;;Total ram usage:        0 bytes
  9333 ;; Hardware stack levels used:    1
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		_USBCBCheckOtherReq
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           	psect	text43
  9342  006208                     __ptext43:
  9343                           	opt stack 0
  9344  006208                     _USBCheckHIDRequest_j2:
  9345                           	opt stack 27
  9346                           
  9347                           ;joystick2_hid.c: 33: if(SetupPkt.Recipient != (0x01)) return;
  9348                           
  9349                           ; BSR set to: 5
  9350                           ;incstack = 0
  9351  006208  0105               	movlb	5	; () banked
  9352  00620A  5100               	movf	0,w,b	;volatile
  9353  00620C  0B1F               	andlw	31
  9354  00620E  06E8               	decf	wreg,f,c
  9355  006210  A4D8               	btfss	status,2,c
  9356  006212  0012               	return	
  9357                           
  9358                           ; BSR set to: 5
  9359                           ;joystick2_hid.c: 34: if(SetupPkt.bIntfID != 0x01) return;
  9360                           
  9361                           ; BSR set to: 5
  9362                           
  9363                           ; BSR set to: 5
  9364  006214  0504               	decf	4,w,b	;volatile
  9365  006216  A4D8               	btfss	status,2,c
  9366  006218  0012               	return	
  9367                           
  9368                           ; BSR set to: 5
  9369                           ;joystick2_hid.c: 36: if(SetupPkt.bRequest == 6)
  9370                           
  9371                           ; BSR set to: 5
  9372                           
  9373                           ; BSR set to: 5
  9374  00621A  0E06               	movlw	6
  9375  00621C  1901               	xorwf	1,w,b	;volatile
  9376  00621E  B4D8               	btfsc	status,2,c
  9377  006220  D01D               	goto	l57
  9378  006222  D026               	goto	l60
  9379  006224                     
  9380                           ; BSR set to: 5
  9381                           ;joystick2_hid.c: 41: if(USBActiveConfiguration == 1)
  9382                           
  9383                           ; BSR set to: 5
  9384  006224  045F               	decf	_USBActiveConfiguration,w,c
  9385  006226  A4D8               	btfss	status,2,c
  9386  006228  D023               	goto	l60
  9387                           
  9388                           ; BSR set to: 5
  9389                           ;joystick2_hid.c: 42: {
  9390                           ;joystick2_hid.c: 43: { inPipes[0].pSrc.bRom = (const BYTE*)&configDescriptor1 + 18; inP
      +                          ipes[0].wCount.Val = sizeof(USB_HID_DSC_J2)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00;
      +                           };
  9391  00622A  0E24               	movlw	low (_configDescriptor1+18)
  9392  00622C  6E50               	movwf	_inPipes,c
  9393  00622E  0E7E               	movlw	high (_configDescriptor1+18)
  9394  006230  6E51               	movwf	_inPipes+1,c
  9395                           
  9396                           ; BSR set to: 5
  9397  006232  0E00               	movlw	0
  9398  006234  6E55               	movwf	_inPipes+5,c
  9399  006236  0E09               	movlw	9
  9400  006238  D00D               	goto	L12
  9401  00623A                     l3442:
  9402                           
  9403                           ; BSR set to: 5
  9404  00623A  0EC0               	movlw	192
  9405  00623C  6E53               	movwf	_inPipes+3,c
  9406                           
  9407                           ; BSR set to: 5
  9408                           ;joystick2_hid.c: 47: }
  9409                           ;joystick2_hid.c: 48: break;
  9410  00623E  D018               	goto	l60
  9411  006240                     
  9412                           ; BSR set to: 5
  9413                           ;joystick2_hid.c: 50: if(USBActiveConfiguration == 1)
  9414                           
  9415                           ; BSR set to: 5
  9416  006240  045F               	decf	_USBActiveConfiguration,w,c
  9417  006242  A4D8               	btfss	status,2,c
  9418  006244  D015               	goto	l60
  9419                           
  9420                           ; BSR set to: 5
  9421                           ;joystick2_hid.c: 51: {
  9422                           ;joystick2_hid.c: 52: { inPipes[0].pSrc.bRom = (const BYTE*)&hid_rpt01_j2; inPipes[0].wC
      +                          ount.Val = sizeof(hid_rpt01_j2); inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
  9423  006246  0E7B               	movlw	low _hid_rpt01_j2
  9424  006248  6E50               	movwf	_inPipes,c
  9425  00624A  0E7E               	movlw	high _hid_rpt01_j2
  9426  00624C  6E51               	movwf	_inPipes+1,c
  9427                           
  9428                           ; BSR set to: 5
  9429  00624E  0E00               	movlw	0
  9430  006250  6E55               	movwf	_inPipes+5,c
  9431  006252  0E4A               	movlw	74
  9432  006254                     L12:
  9433  006254  6E54               	movwf	_inPipes+4,c
  9434  006256  D7F1               	goto	l3442
  9435  006258                     
  9436                           ; BSR set to: 5
  9437                           ;joystick2_hid.c: 59: inPipes[0].info.Val = 0x00 | 0x80;
  9438                           
  9439                           ; BSR set to: 5
  9440  006258  0E80               	movlw	128
  9441  00625A  D7F0               	goto	L13
  9442  00625C                     l57:
  9443                           
  9444                           ; BSR set to: 5
  9445                           
  9446                           ; BSR set to: 5
  9447  00625C  5103               	movf	3,w,b	;volatile
  9448                           
  9449                           ; Switch size 1, requested type "space"
  9450                           ; Number of cases is 3, Range of values is 33 to 35
  9451                           ; switch strategies available:
  9452                           ; Name         Instructions Cycles
  9453                           ; simple_byte           10     6 (average)
  9454                           ;	Chosen strategy is simple_byte
  9455  00625E  0A21               	xorlw	33	; case 33
  9456  006260  B4D8               	btfsc	status,2,c
  9457  006262  D7E0               	goto	l58
  9458  006264  0A03               	xorlw	3	; case 34
  9459  006266  B4D8               	btfsc	status,2,c
  9460  006268  D7EB               	goto	l61
  9461  00626A  0A01               	xorlw	1	; case 35
  9462  00626C  B4D8               	btfsc	status,2,c
  9463  00626E  D7F4               	goto	l63
  9464  006270                     l60:
  9465                           
  9466                           ; BSR set to: 5
  9467                           ;joystick2_hid.c: 62: }
  9468                           ;joystick2_hid.c: 64: if(SetupPkt.RequestType != (0x20>>5))
  9469                           
  9470                           ; BSR set to: 5
  9471                           
  9472                           ; BSR set to: 5
  9473  006270  3900               	swapf	0,w,b	;volatile
  9474  006272  32E8               	rrcf	wreg,f,c
  9475  006274  0B03               	andlw	3
  9476  006276  06E8               	decf	wreg,f,c
  9477  006278  A4D8               	btfss	status,2,c
  9478  00627A  0012               	return	
  9479  00627C  D020               	goto	l65
  9480  00627E                     
  9481                           ; BSR set to: 5
  9482                           ;joystick2_hid.c: 82: { inPipes[0].pSrc.bRam = (BYTE*)&idle_rate_j2; inPipes[0].wCount.V
      +                          al = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
  9483                           
  9484                           ; BSR set to: 5
  9485  00627E  0EBF               	movlw	low _idle_rate_j2
  9486  006280  6E50               	movwf	_inPipes,c
  9487  006282  0E00               	movlw	high _idle_rate_j2
  9488  006284  6E51               	movwf	_inPipes+1,c
  9489                           
  9490                           ; BSR set to: 5
  9491  006286  0E00               	movlw	0
  9492  006288  6E55               	movwf	_inPipes+5,c
  9493  00628A  0E01               	movlw	1
  9494  00628C  6E54               	movwf	_inPipes+4,c
  9495                           
  9496                           ; BSR set to: 5
  9497  00628E  0EC1               	movlw	193
  9498  006290  6E53               	movwf	_inPipes+3,c
  9499                           
  9500                           ;joystick2_hid.c: 86: break;
  9501  006292  0012               	return	
  9502  006294                     
  9503                           ; BSR set to: 5
  9504                           ;joystick2_hid.c: 88: inPipes[0].info.Val = 0x00 | 0x80;
  9505                           
  9506                           ; BSR set to: 5
  9507  006294  0E80               	movlw	128
  9508  006296  6E53               	movwf	_inPipes+3,c
  9509                           
  9510                           ; BSR set to: 5
  9511                           ;joystick2_hid.c: 89: idle_rate_j2 = SetupPkt.W_Value.byte.HB;
  9512  006298  C503 F0BF          	movff	1283,_idle_rate_j2	;volatile
  9513                           
  9514                           ;joystick2_hid.c: 90: break;
  9515  00629C  0012               	return	
  9516  00629E                     
  9517                           ; BSR set to: 5
  9518                           ;joystick2_hid.c: 92: { inPipes[0].pSrc.bRam = (BYTE*)&active_protocol_j2; inPipes[0].wC
      +                          ount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
  9519                           
  9520                           ; BSR set to: 5
  9521  00629E  0EBE               	movlw	low _active_protocol_j2
  9522  0062A0  6E50               	movwf	_inPipes,c
  9523  0062A2  0E00               	movlw	high _active_protocol_j2
  9524  0062A4  6E51               	movwf	_inPipes+1,c
  9525                           
  9526                           ; BSR set to: 5
  9527  0062A6  0E00               	movlw	0
  9528  0062A8  6E55               	movwf	_inPipes+5,c
  9529  0062AA  0E01               	movlw	1
  9530  0062AC  6E54               	movwf	_inPipes+4,c
  9531                           
  9532                           ; BSR set to: 5
  9533  0062AE  0E81               	movlw	129
  9534  0062B0  6E53               	movwf	_inPipes+3,c
  9535                           
  9536                           ;joystick2_hid.c: 96: break;
  9537  0062B2  0012               	return	
  9538  0062B4                     
  9539                           ; BSR set to: 5
  9540                           ;joystick2_hid.c: 98: inPipes[0].info.Val = 0x00 | 0x80;
  9541                           
  9542                           ; BSR set to: 5
  9543  0062B4  0E80               	movlw	128
  9544  0062B6  6E53               	movwf	_inPipes+3,c
  9545                           
  9546                           ; BSR set to: 5
  9547                           ;joystick2_hid.c: 99: active_protocol_j2 = SetupPkt.W_Value.byte.LB;
  9548  0062B8  C502 F0BE          	movff	1282,_active_protocol_j2	;volatile
  9549                           
  9550                           ; BSR set to: 5
  9551                           ;joystick2_hid.c: 101: }
  9552                           
  9553                           ;joystick2_hid.c: 100: break;
  9554  0062BC  0012               	return	
  9555  0062BE                     l65:
  9556                           
  9557                           ; BSR set to: 5
  9558                           
  9559                           ; BSR set to: 5
  9560  0062BE  5101               	movf	1,w,b	;volatile
  9561                           
  9562                           ; Switch size 1, requested type "space"
  9563                           ; Number of cases is 6, Range of values is 1 to 11
  9564                           ; switch strategies available:
  9565                           ; Name         Instructions Cycles
  9566                           ; simple_byte           19    10 (average)
  9567                           ;	Chosen strategy is simple_byte
  9568  0062C0  0A01               	xorlw	1	; case 1
  9569  0062C2  B4D8               	btfsc	status,2,c
  9570  0062C4  0012               	return	
  9571  0062C6  0A03               	xorlw	3	; case 2
  9572  0062C8  B4D8               	btfsc	status,2,c
  9573  0062CA  D7D9               	goto	l69
  9574  0062CC  0A01               	xorlw	1	; case 3
  9575  0062CE  B4D8               	btfsc	status,2,c
  9576  0062D0  D7E6               	goto	l71
  9577  0062D2  0A0A               	xorlw	10	; case 9
  9578  0062D4  B4D8               	btfsc	status,2,c
  9579  0062D6  0012               	return	
  9580  0062D8  0A03               	xorlw	3	; case 10
  9581  0062DA  B4D8               	btfsc	status,2,c
  9582  0062DC  D7DB               	goto	l70
  9583  0062DE  0A01               	xorlw	1	; case 11
  9584  0062E0  A4D8               	btfss	status,2,c
  9585  0062E2  0012               	return	
  9586  0062E4  D7E7               	goto	l72
  9587  0062E6                     __end_of_USBCheckHIDRequest_j2:
  9588                           	opt stack 0
  9589                           tblptru	equ	0xFF8
  9590                           tblptrh	equ	0xFF7
  9591                           tblptrl	equ	0xFF6
  9592                           tablat	equ	0xFF5
  9593                           prodh	equ	0xFF4
  9594                           prodl	equ	0xFF3
  9595                           intcon2	equ	0xFF1
  9596                           postinc0	equ	0xFEE
  9597                           wreg	equ	0xFE8
  9598                           indf1	equ	0xFE7
  9599                           postinc1	equ	0xFE6
  9600                           fsr1h	equ	0xFE2
  9601                           fsr1l	equ	0xFE1
  9602                           indf2	equ	0xFDF
  9603                           postinc2	equ	0xFDE
  9604                           postdec2	equ	0xFDD
  9605                           fsr2h	equ	0xFDA
  9606                           fsr2l	equ	0xFD9
  9607                           status	equ	0xFD8
  9608                           
  9609 ;; *************** function _USBCheckHIDRequest_j1 *****************
  9610 ;; Defined at:
  9611 ;;		line 31 in file "../USB Stack/joystick1_hid.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;		None
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;		None
  9616 ;; Return value:  Size  Location     Type
  9617 ;;                  1    wreg      void 
  9618 ;; Registers used:
  9619 ;;		wreg, status,2, status,0
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  9625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  9626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
  9627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
  9628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
  9629 ;;Total ram usage:        0 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; This function calls:
  9632 ;;		Nothing
  9633 ;; This function is called by:
  9634 ;;		_USBCBCheckOtherReq
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           	psect	text44
  9639  00612A                     __ptext44:
  9640                           	opt stack 0
  9641  00612A                     _USBCheckHIDRequest_j1:
  9642                           	opt stack 27
  9643                           
  9644                           ;joystick1_hid.c: 33: if(SetupPkt.Recipient != (0x01)) return;
  9645                           
  9646                           ; BSR set to: 5
  9647                           ;incstack = 0
  9648  00612A  0105               	movlb	5	; () banked
  9649  00612C  5100               	movf	0,w,b	;volatile
  9650  00612E  0B1F               	andlw	31
  9651  006130  06E8               	decf	wreg,f,c
  9652  006132  A4D8               	btfss	status,2,c
  9653  006134  0012               	return	
  9654                           
  9655                           ; BSR set to: 5
  9656                           ;joystick1_hid.c: 34: if(SetupPkt.bIntfID != 0x00) return;
  9657                           
  9658                           ; BSR set to: 5
  9659                           
  9660                           ; BSR set to: 5
  9661  006136  5104               	movf	4,w,b	;volatile
  9662  006138  A4D8               	btfss	status,2,c
  9663  00613A  0012               	return	
  9664                           
  9665                           ; BSR set to: 5
  9666                           ;joystick1_hid.c: 36: if(SetupPkt.bRequest == 6)
  9667                           
  9668                           ; BSR set to: 5
  9669                           
  9670                           ; BSR set to: 5
  9671  00613C  0E06               	movlw	6
  9672  00613E  1901               	xorwf	1,w,b	;volatile
  9673  006140  B4D8               	btfsc	status,2,c
  9674  006142  D01D               	goto	l21
  9675  006144  D026               	goto	l24
  9676  006146                     
  9677                           ; BSR set to: 5
  9678                           ;joystick1_hid.c: 41: if(USBActiveConfiguration == 1)
  9679                           
  9680                           ; BSR set to: 5
  9681  006146  045F               	decf	_USBActiveConfiguration,w,c
  9682  006148  A4D8               	btfss	status,2,c
  9683  00614A  D023               	goto	l24
  9684                           
  9685                           ; BSR set to: 5
  9686                           ;joystick1_hid.c: 42: {
  9687                           ;joystick1_hid.c: 43: { inPipes[0].pSrc.bRom = (const BYTE*)&configDescriptor1 + 18; inP
      +                          ipes[0].wCount.Val = sizeof(USB_HID_DSC_J1)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00;
      +                           };
  9688  00614C  0E24               	movlw	low (_configDescriptor1+18)
  9689  00614E  6E50               	movwf	_inPipes,c
  9690  006150  0E7E               	movlw	high (_configDescriptor1+18)
  9691  006152  6E51               	movwf	_inPipes+1,c
  9692                           
  9693                           ; BSR set to: 5
  9694  006154  0E00               	movlw	0
  9695  006156  6E55               	movwf	_inPipes+5,c
  9696  006158  0E09               	movlw	9
  9697  00615A  D00D               	goto	L14
  9698  00615C                     l3380:
  9699                           
  9700                           ; BSR set to: 5
  9701  00615C  0EC0               	movlw	192
  9702  00615E  6E53               	movwf	_inPipes+3,c
  9703                           
  9704                           ; BSR set to: 5
  9705                           ;joystick1_hid.c: 47: }
  9706                           ;joystick1_hid.c: 48: break;
  9707  006160  D018               	goto	l24
  9708  006162                     
  9709                           ; BSR set to: 5
  9710                           ;joystick1_hid.c: 50: if(USBActiveConfiguration == 1)
  9711                           
  9712                           ; BSR set to: 5
  9713  006162  045F               	decf	_USBActiveConfiguration,w,c
  9714  006164  A4D8               	btfss	status,2,c
  9715  006166  D015               	goto	l24
  9716                           
  9717                           ; BSR set to: 5
  9718                           ;joystick1_hid.c: 51: {
  9719                           ;joystick1_hid.c: 52: { inPipes[0].pSrc.bRom = (const BYTE*)&hid_rpt01_j1; inPipes[0].wC
      +                          ount.Val = sizeof(hid_rpt01_j1); inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
  9720  006168  0EC5               	movlw	low _hid_rpt01_j1
  9721  00616A  6E50               	movwf	_inPipes,c
  9722  00616C  0E7E               	movlw	high _hid_rpt01_j1
  9723  00616E  6E51               	movwf	_inPipes+1,c
  9724                           
  9725                           ; BSR set to: 5
  9726  006170  0E00               	movlw	0
  9727  006172  6E55               	movwf	_inPipes+5,c
  9728  006174  0E4A               	movlw	74
  9729  006176                     L14:
  9730  006176  6E54               	movwf	_inPipes+4,c
  9731  006178  D7F1               	goto	l3380
  9732  00617A                     
  9733                           ; BSR set to: 5
  9734                           ;joystick1_hid.c: 59: inPipes[0].info.Val = 0x00 | 0x80;
  9735                           
  9736                           ; BSR set to: 5
  9737  00617A  0E80               	movlw	128
  9738  00617C  D7F0               	goto	L15
  9739  00617E                     l21:
  9740                           
  9741                           ; BSR set to: 5
  9742                           
  9743                           ; BSR set to: 5
  9744  00617E  5103               	movf	3,w,b	;volatile
  9745                           
  9746                           ; Switch size 1, requested type "space"
  9747                           ; Number of cases is 3, Range of values is 33 to 35
  9748                           ; switch strategies available:
  9749                           ; Name         Instructions Cycles
  9750                           ; simple_byte           10     6 (average)
  9751                           ;	Chosen strategy is simple_byte
  9752  006180  0A21               	xorlw	33	; case 33
  9753  006182  B4D8               	btfsc	status,2,c
  9754  006184  D7E0               	goto	l22
  9755  006186  0A03               	xorlw	3	; case 34
  9756  006188  B4D8               	btfsc	status,2,c
  9757  00618A  D7EB               	goto	l25
  9758  00618C  0A01               	xorlw	1	; case 35
  9759  00618E  B4D8               	btfsc	status,2,c
  9760  006190  D7F4               	goto	l27
  9761  006192                     l24:
  9762                           
  9763                           ; BSR set to: 5
  9764                           ;joystick1_hid.c: 62: }
  9765                           ;joystick1_hid.c: 64: if(SetupPkt.RequestType != (0x20>>5))
  9766                           
  9767                           ; BSR set to: 5
  9768                           
  9769                           ; BSR set to: 5
  9770  006192  3900               	swapf	0,w,b	;volatile
  9771  006194  32E8               	rrcf	wreg,f,c
  9772  006196  0B03               	andlw	3
  9773  006198  06E8               	decf	wreg,f,c
  9774  00619A  A4D8               	btfss	status,2,c
  9775  00619C  0012               	return	
  9776  00619E  D020               	goto	l29
  9777  0061A0                     
  9778                           ; BSR set to: 5
  9779                           ;joystick1_hid.c: 82: { inPipes[0].pSrc.bRam = (BYTE*)&idle_rate_j1; inPipes[0].wCount.V
      +                          al = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
  9780                           
  9781                           ; BSR set to: 5
  9782  0061A0  0EC1               	movlw	low _idle_rate_j1
  9783  0061A2  6E50               	movwf	_inPipes,c
  9784  0061A4  0E00               	movlw	high _idle_rate_j1
  9785  0061A6  6E51               	movwf	_inPipes+1,c
  9786                           
  9787                           ; BSR set to: 5
  9788  0061A8  0E00               	movlw	0
  9789  0061AA  6E55               	movwf	_inPipes+5,c
  9790  0061AC  0E01               	movlw	1
  9791  0061AE  6E54               	movwf	_inPipes+4,c
  9792                           
  9793                           ; BSR set to: 5
  9794  0061B0  0EC1               	movlw	193
  9795  0061B2  6E53               	movwf	_inPipes+3,c
  9796                           
  9797                           ;joystick1_hid.c: 86: break;
  9798  0061B4  0012               	return	
  9799  0061B6                     
  9800                           ; BSR set to: 5
  9801                           ;joystick1_hid.c: 88: inPipes[0].info.Val = 0x00 | 0x80;
  9802                           
  9803                           ; BSR set to: 5
  9804  0061B6  0E80               	movlw	128
  9805  0061B8  6E53               	movwf	_inPipes+3,c
  9806                           
  9807                           ; BSR set to: 5
  9808                           ;joystick1_hid.c: 89: idle_rate_j1 = SetupPkt.W_Value.byte.HB;
  9809  0061BA  C503 F0C1          	movff	1283,_idle_rate_j1	;volatile
  9810                           
  9811                           ;joystick1_hid.c: 90: break;
  9812  0061BE  0012               	return	
  9813  0061C0                     
  9814                           ; BSR set to: 5
  9815                           ;joystick1_hid.c: 92: { inPipes[0].pSrc.bRam = (BYTE*)&active_protocol_j1; inPipes[0].wC
      +                          ount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
  9816                           
  9817                           ; BSR set to: 5
  9818  0061C0  0EC0               	movlw	low _active_protocol_j1
  9819  0061C2  6E50               	movwf	_inPipes,c
  9820  0061C4  0E00               	movlw	high _active_protocol_j1
  9821  0061C6  6E51               	movwf	_inPipes+1,c
  9822                           
  9823                           ; BSR set to: 5
  9824  0061C8  0E00               	movlw	0
  9825  0061CA  6E55               	movwf	_inPipes+5,c
  9826  0061CC  0E01               	movlw	1
  9827  0061CE  6E54               	movwf	_inPipes+4,c
  9828                           
  9829                           ; BSR set to: 5
  9830  0061D0  0E81               	movlw	129
  9831  0061D2  6E53               	movwf	_inPipes+3,c
  9832                           
  9833                           ;joystick1_hid.c: 96: break;
  9834  0061D4  0012               	return	
  9835  0061D6                     
  9836                           ; BSR set to: 5
  9837                           ;joystick1_hid.c: 98: inPipes[0].info.Val = 0x00 | 0x80;
  9838                           
  9839                           ; BSR set to: 5
  9840  0061D6  0E80               	movlw	128
  9841  0061D8  6E53               	movwf	_inPipes+3,c
  9842                           
  9843                           ; BSR set to: 5
  9844                           ;joystick1_hid.c: 99: active_protocol_j1 = SetupPkt.W_Value.byte.LB;
  9845  0061DA  C502 F0C0          	movff	1282,_active_protocol_j1	;volatile
  9846                           
  9847                           ; BSR set to: 5
  9848                           ;joystick1_hid.c: 101: }
  9849                           
  9850                           ;joystick1_hid.c: 100: break;
  9851  0061DE  0012               	return	
  9852  0061E0                     l29:
  9853                           
  9854                           ; BSR set to: 5
  9855                           
  9856                           ; BSR set to: 5
  9857  0061E0  5101               	movf	1,w,b	;volatile
  9858                           
  9859                           ; Switch size 1, requested type "space"
  9860                           ; Number of cases is 6, Range of values is 1 to 11
  9861                           ; switch strategies available:
  9862                           ; Name         Instructions Cycles
  9863                           ; simple_byte           19    10 (average)
  9864                           ;	Chosen strategy is simple_byte
  9865  0061E2  0A01               	xorlw	1	; case 1
  9866  0061E4  B4D8               	btfsc	status,2,c
  9867  0061E6  0012               	return	
  9868  0061E8  0A03               	xorlw	3	; case 2
  9869  0061EA  B4D8               	btfsc	status,2,c
  9870  0061EC  D7D9               	goto	l33
  9871  0061EE  0A01               	xorlw	1	; case 3
  9872  0061F0  B4D8               	btfsc	status,2,c
  9873  0061F2  D7E6               	goto	l35
  9874  0061F4  0A0A               	xorlw	10	; case 9
  9875  0061F6  B4D8               	btfsc	status,2,c
  9876  0061F8  0012               	return	
  9877  0061FA  0A03               	xorlw	3	; case 10
  9878  0061FC  B4D8               	btfsc	status,2,c
  9879  0061FE  D7DB               	goto	l34
  9880  006200  0A01               	xorlw	1	; case 11
  9881  006202  A4D8               	btfss	status,2,c
  9882  006204  0012               	return	
  9883  006206  D7E7               	goto	l36
  9884  006208                     __end_of_USBCheckHIDRequest_j1:
  9885                           	opt stack 0
  9886                           tblptru	equ	0xFF8
  9887                           tblptrh	equ	0xFF7
  9888                           tblptrl	equ	0xFF6
  9889                           tablat	equ	0xFF5
  9890                           prodh	equ	0xFF4
  9891                           prodl	equ	0xFF3
  9892                           intcon2	equ	0xFF1
  9893                           postinc0	equ	0xFEE
  9894                           wreg	equ	0xFE8
  9895                           indf1	equ	0xFE7
  9896                           postinc1	equ	0xFE6
  9897                           fsr1h	equ	0xFE2
  9898                           fsr1l	equ	0xFE1
  9899                           indf2	equ	0xFDF
  9900                           postinc2	equ	0xFDE
  9901                           postdec2	equ	0xFDD
  9902                           fsr2h	equ	0xFDA
  9903                           fsr2l	equ	0xFD9
  9904                           status	equ	0xFD8
  9905                           
  9906 ;; *************** function _USBStdGetStatusHandler *****************
  9907 ;; Defined at:
  9908 ;;		line 1829 in file "../USB Stack/usb_device.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;  p               2    1[COMRAM] PTR struct __BDT
  9913 ;;		 -> BDT(64), 
  9914 ;; Return value:  Size  Location     Type
  9915 ;;                  1    wreg      void 
  9916 ;; Registers used:
  9917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9918 ;; Tracked objects:
  9919 ;;		On entry : 0/0
  9920 ;;		On exit  : 0/0
  9921 ;;		Unchanged: 0/0
  9922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
  9923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
  9924 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0
  9925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0
  9926 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0
  9927 ;;Total ram usage:        3 bytes
  9928 ;; Hardware stack levels used:    1
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_USBCheckStdRequest
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           	psect	text45
  9937  005CF8                     __ptext45:
  9938                           	opt stack 0
  9939  005CF8                     _USBStdGetStatusHandler:
  9940                           	opt stack 26
  9941                           
  9942                           ;usb_device.c: 1831: CtrlTrfData[0] = 0;
  9943                           
  9944                           ; BSR set to: 5
  9945                           ;incstack = 0
  9946  005CF8  0E00               	movlw	0
  9947  005CFA  0105               	movlb	5	; () banked
  9948  005CFC  6F20               	movwf	32,b	;volatile
  9949                           
  9950                           ;usb_device.c: 1832: CtrlTrfData[1] = 0;
  9951  005CFE  0E00               	movlw	0
  9952  005D00  6F21               	movwf	33,b	;volatile
  9953                           
  9954                           ;usb_device.c: 1834: switch(SetupPkt.Recipient)
  9955  005D02  D02F               	goto	l360
  9956  005D04                     l361:
  9957                           
  9958                           ; BSR set to: 5
  9959                           ;usb_device.c: 1837: inPipes[0].info.bits.busy = 1;
  9960  005D04  8E53               	bsf	_inPipes+3,7,c
  9961                           
  9962                           ; BSR set to: 5
  9963                           ;usb_device.c: 1845: }
  9964                           ;usb_device.c: 1847: if(RemoteWakeup == TRUE)
  9965                           
  9966                           ; BSR set to: 5
  9967                           
  9968                           ; BSR set to: 5
  9969                           ;usb_device.c: 1843: {
  9970                           ;usb_device.c: 1844: CtrlTrfData[0]|=0x01;
  9971                           
  9972                           ;usb_device.c: 1842: if(0 == 1)
  9973  005D06  0100               	movlb	0	; () banked
  9974  005D08  05BB               	decf	_RemoteWakeup& (0+255),w,b
  9975  005D0A  A4D8               	btfss	status,2,c
  9976  005D0C  D035               	goto	l364
  9977                           
  9978                           ; BSR set to: 0
  9979                           ;usb_device.c: 1848: {
  9980                           ;usb_device.c: 1849: CtrlTrfData[0]|=0x02;
  9981  005D0E  0105               	movlb	5	; () banked
  9982  005D10  8320               	bsf	32,1,b	;volatile
  9983                           
  9984                           ; BSR set to: 5
  9985                           ;usb_device.c: 1850: }
  9986                           ;usb_device.c: 1851: break;
  9987  005D12  D032               	goto	l364
  9988  005D14                     l365:
  9989                           
  9990                           ; BSR set to: 5
  9991                           ;usb_device.c: 1853: inPipes[0].info.bits.busy = 1;
  9992  005D14  8E53               	bsf	_inPipes+3,7,c
  9993                           
  9994                           ;usb_device.c: 1854: break;
  9995  005D16  D030               	goto	l364
  9996  005D18                     l366:
  9997                           
  9998                           ; BSR set to: 5
  9999                           ;usb_device.c: 1856: inPipes[0].info.bits.busy = 1;
 10000  005D18  8E53               	bsf	_inPipes+3,7,c
 10001                           
 10002                           ;usb_device.c: 1860: {
 10003                           ;usb_device.c: 1861: BDT_ENTRY *p;
 10004                           ;usb_device.c: 1863: if(SetupPkt.EPDir == 0)
 10005  005D1A  BF04               	btfsc	4,7,b	;volatile
 10006  005D1C  D00A               	goto	l367
 10007                           
 10008                           ; BSR set to: 5
 10009                           ;usb_device.c: 1864: {
 10010                           ;usb_device.c: 1865: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 10011  005D1E  5104               	movf	4,w,b	;volatile
 10012  005D20  0B0F               	andlw	15
 10013  005D22  6E01               	movwf	??_USBStdGetStatusHandler& (0+255),c
 10014  005D24  5001               	movf	??_USBStdGetStatusHandler,w,c
 10015  005D26  0D02               	mullw	2
 10016  005D28  0E9F               	movlw	low _pBDTEntryOut
 10017  005D2A  24F3               	addwf	prodl,w,c
 10018  005D2C  6ED9               	movwf	fsr2l,c
 10019  005D2E  0E00               	movlw	high _pBDTEntryOut
 10020  005D30  D009               	goto	L16
 10021  005D32                     l367:
 10022                           
 10023                           ; BSR set to: 5
 10024                           ;usb_device.c: 1867: else
 10025                           ;usb_device.c: 1868: {
 10026                           ;usb_device.c: 1869: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 10027                           
 10028                           ; BSR set to: 5
 10029  005D32  5104               	movf	4,w,b	;volatile
 10030  005D34  0B0F               	andlw	15
 10031  005D36  6E01               	movwf	??_USBStdGetStatusHandler& (0+255),c
 10032  005D38  5001               	movf	??_USBStdGetStatusHandler,w,c
 10033  005D3A  0D02               	mullw	2
 10034  005D3C  0E48               	movlw	low _pBDTEntryIn
 10035  005D3E  24F3               	addwf	prodl,w,c
 10036  005D40  6ED9               	movwf	fsr2l,c
 10037  005D42  0E00               	movlw	high _pBDTEntryIn
 10038  005D44                     L16:
 10039  005D44  20F4               	addwfc	prodh,w,c
 10040  005D46  6EDA               	movwf	fsr2h,c
 10041  005D48  CFDE F002          	movff	postinc2,USBStdGetStatusHandler@p
 10042  005D4C  CFDD F003          	movff	postdec2,USBStdGetStatusHandler@p+1
 10043                           
 10044                           ; BSR set to: 5
 10045                           ;usb_device.c: 1870: }
 10046                           ;usb_device.c: 1872: if(p->STAT.Val & 0x04)
 10047                           
 10048                           ; BSR set to: 5
 10049  005D50  C002  FFD9         	movff	USBStdGetStatusHandler@p,fsr2l
 10050  005D54  C003  FFDA         	movff	USBStdGetStatusHandler@p+1,fsr2h
 10051  005D58  A4DF               	btfss	indf2,2,c
 10052  005D5A  D00E               	goto	l364
 10053                           
 10054                           ; BSR set to: 5
 10055                           ;usb_device.c: 1873: CtrlTrfData[0]=0x01;
 10056  005D5C  0E01               	movlw	1
 10057  005D5E  6F20               	movwf	32,b	;volatile
 10058                           
 10059                           ; BSR set to: 5
 10060                           ;usb_device.c: 1875: }
 10061                           ;usb_device.c: 1876: }
 10062                           
 10063                           ; BSR set to: 5
 10064                           ;usb_device.c: 1874: break;
 10065  005D60  D00B               	goto	l364
 10066  005D62                     l360:
 10067                           
 10068                           ; BSR set to: 5
 10069                           
 10070                           ; BSR set to: 5
 10071  005D62  5100               	movf	0,w,b	;volatile
 10072  005D64  0B1F               	andlw	31
 10073                           
 10074                           ; Switch size 1, requested type "space"
 10075                           ; Number of cases is 3, Range of values is 0 to 2
 10076                           ; switch strategies available:
 10077                           ; Name         Instructions Cycles
 10078                           ; simple_byte           10     6 (average)
 10079                           ;	Chosen strategy is simple_byte
 10080  005D66  0A00               	xorlw	0	; case 0
 10081  005D68  B4D8               	btfsc	status,2,c
 10082  005D6A  D7CC               	goto	l361
 10083  005D6C  0A01               	xorlw	1	; case 1
 10084  005D6E  B4D8               	btfsc	status,2,c
 10085  005D70  D7D1               	goto	l365
 10086  005D72  0A03               	xorlw	3	; case 2
 10087  005D74  B4D8               	btfsc	status,2,c
 10088  005D76  D7D0               	goto	l366
 10089  005D78                     l364:
 10090                           
 10091                           ;usb_device.c: 1878: if(inPipes[0].info.bits.busy == 1)
 10092  005D78  AE53               	btfss	_inPipes+3,7,c
 10093  005D7A  0012               	return	
 10094                           
 10095                           ;usb_device.c: 1879: {
 10096                           ;usb_device.c: 1880: inPipes[0].pSrc.bRam = (BYTE*)&CtrlTrfData;
 10097  005D7C  0E20               	movlw	32
 10098  005D7E  6E50               	movwf	_inPipes,c
 10099  005D80  0E05               	movlw	5
 10100  005D82  6E51               	movwf	_inPipes+1,c
 10101                           
 10102                           ;usb_device.c: 1881: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 10103  005D84  8053               	bsf	_inPipes+3,0,c
 10104                           
 10105                           ;usb_device.c: 1882: inPipes[0].wCount.v[0] = 2;
 10106  005D86  0E02               	movlw	2
 10107  005D88  6E54               	movwf	_inPipes+4,c
 10108  005D8A  0012               	return	
 10109  005D8C                     __end_of_USBStdGetStatusHandler:
 10110                           	opt stack 0
 10111                           tblptru	equ	0xFF8
 10112                           tblptrh	equ	0xFF7
 10113                           tblptrl	equ	0xFF6
 10114                           tablat	equ	0xFF5
 10115                           prodh	equ	0xFF4
 10116                           prodl	equ	0xFF3
 10117                           intcon2	equ	0xFF1
 10118                           postinc0	equ	0xFEE
 10119                           wreg	equ	0xFE8
 10120                           indf1	equ	0xFE7
 10121                           postinc1	equ	0xFE6
 10122                           fsr1h	equ	0xFE2
 10123                           fsr1l	equ	0xFE1
 10124                           indf2	equ	0xFDF
 10125                           postinc2	equ	0xFDE
 10126                           postdec2	equ	0xFDD
 10127                           fsr2h	equ	0xFDA
 10128                           fsr2l	equ	0xFD9
 10129                           status	equ	0xFD8
 10130                           
 10131 ;; *************** function _USBStdGetDscHandler *****************
 10132 ;; Defined at:
 10133 ;;		line 1767 in file "../USB Stack/usb_device.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;		None
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;		None
 10138 ;; Return value:  Size  Location     Type
 10139 ;;                  1    wreg      void 
 10140 ;; Registers used:
 10141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 10142 ;; Tracked objects:
 10143 ;;		On entry : 0/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
 10147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
 10148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
 10149 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0
 10150 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0
 10151 ;;Total ram usage:        2 bytes
 10152 ;; Hardware stack levels used:    1
 10153 ;; This function calls:
 10154 ;;		Nothing
 10155 ;; This function is called by:
 10156 ;;		_USBCheckStdRequest
 10157 ;; This function uses a non-reentrant model
 10158 ;;
 10159                           
 10160                           	psect	text46
 10161  006760                     __ptext46:
 10162                           	opt stack 0
 10163  006760                     _USBStdGetDscHandler:
 10164                           	opt stack 26
 10165                           
 10166                           ;usb_device.c: 1769: if(SetupPkt.bmRequestType == 0x80)
 10167                           
 10168                           ;incstack = 0
 10169  006760  0E80               	movlw	128
 10170  006762  0105               	movlb	5	; () banked
 10171  006764  1900               	xorwf	0,w,b	;volatile
 10172  006766  A4D8               	btfss	status,2,c
 10173  006768  0012               	return	
 10174                           
 10175                           ; BSR set to: 5
 10176                           ;usb_device.c: 1770: {
 10177                           ;usb_device.c: 1771: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
 10178  00676A  0EC0               	movlw	192
 10179  00676C  6E53               	movwf	_inPipes+3,c
 10180                           
 10181                           ;usb_device.c: 1773: switch(SetupPkt.bDescriptorType)
 10182  00676E  D062               	goto	l349
 10183  006770                     
 10184                           ; BSR set to: 5
 10185                           ;usb_device.c: 1779: inPipes[0].pSrc.bRom = (const BYTE*)&device_dsc;
 10186                           
 10187                           ; BSR set to: 5
 10188  006770  0EE8               	movlw	low _device_dsc
 10189  006772  6E50               	movwf	_inPipes,c
 10190  006774  0E7F               	movlw	high _device_dsc
 10191  006776  6E51               	movwf	_inPipes+1,c
 10192                           
 10193                           ; BSR set to: 5
 10194                           ;usb_device.c: 1781: inPipes[0].wCount.Val = sizeof(device_dsc);
 10195  006778  0E00               	movlw	0
 10196  00677A  6E55               	movwf	_inPipes+5,c
 10197  00677C  0E12               	movlw	18
 10198  00677E  6E54               	movwf	_inPipes+4,c
 10199                           
 10200                           ;usb_device.c: 1782: break;
 10201  006780  0012               	return	
 10202  006782                     
 10203                           ; BSR set to: 5
 10204                           ;usb_device.c: 1787: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 10205                           
 10206                           ; BSR set to: 5
 10207  006782  5102               	movf	2,w,b	;volatile
 10208  006784  0D02               	mullw	2
 10209  006786  0E10               	movlw	low _USB_CD_Ptr
 10210  006788  24F3               	addwf	prodl,w,c
 10211  00678A  6EF6               	movwf	tblptrl,c
 10212  00678C  0E7E               	movlw	high _USB_CD_Ptr
 10213  00678E  20F4               	addwfc	prodh,w,c
 10214  006790  6EF7               	movwf	tblptrh,c
 10215  006792                     	if	0	;There are less than 3 active tblptr bytes
 10216  006792                     	endif
 10217  006792  0009               	tblrd		*+
 10218  006794  CFF5 F050          	movff	tablat,_inPipes
 10219  006798  000A               	tblrd		*-
 10220  00679A  CFF5 F051          	movff	tablat,_inPipes+1
 10221                           
 10222                           ; BSR set to: 5
 10223                           ;usb_device.c: 1789: inPipes[0].wCount.Val = *(inPipes[0].pSrc.wRom+1);
 10224  00679E  0E02               	movlw	2
 10225  0067A0  2450               	addwf	_inPipes,w,c
 10226  0067A2  6E01               	movwf	??_USBStdGetDscHandler& (0+255),c
 10227  0067A4  0E00               	movlw	0
 10228  0067A6  2051               	addwfc	_inPipes+1,w,c
 10229  0067A8  6E02               	movwf	(??_USBStdGetDscHandler+1)& (0+255),c
 10230  0067AA  C001  FFF6         	movff	??_USBStdGetDscHandler,tblptrl
 10231  0067AE  C002  FFF7         	movff	??_USBStdGetDscHandler+1,tblptrh
 10232  0067B2  6AF8               	clrf	tblptru,c
 10233  0067B4  0E07               	movlw	(high __ramtop+-1)
 10234  0067B6  64F7               	cpfsgt	tblptrh,c
 10235  0067B8  D007               	bra	u3327
 10236  0067BA  0009               	tblrd		*+
 10237  0067BC  CFF5 F054          	movff	tablat,_inPipes+4
 10238  0067C0  0009               	tblrd		*+
 10239  0067C2  CFF5 F055          	movff	tablat,_inPipes+5
 10240  0067C6  D008               	bra	u3320
 10241  0067C8                     u3327:
 10242  0067C8  CFF6 FFE1          	movff	tblptrl,fsr1l
 10243  0067CC  CFF7 FFE2          	movff	tblptrh,fsr1h
 10244  0067D0  CFE6 F054          	movff	postinc1,_inPipes+4
 10245  0067D4  CFE6 F055          	movff	postinc1,_inPipes+5
 10246  0067D8                     u3320:
 10247                           
 10248                           ;usb_device.c: 1790: break;
 10249  0067D8  0012               	return	
 10250  0067DA                     
 10251                           ;usb_device.c: 1795: if(SetupPkt.bDscIndex<7)
 10252  0067DA  0E07               	movlw	7
 10253  0067DC  0105               	movlb	5	; () banked
 10254  0067DE  6102               	cpfslt	2,b	;volatile
 10255  0067E0  D023               	goto	l354
 10256                           
 10257                           ; BSR set to: 5
 10258                           ;usb_device.c: 1796: {
 10259                           ;usb_device.c: 1798: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 10260  0067E2  5102               	movf	2,w,b	;volatile
 10261  0067E4  0D02               	mullw	2
 10262  0067E6  0E04               	movlw	low _USB_SD_Ptr
 10263  0067E8  24F3               	addwf	prodl,w,c
 10264  0067EA  6EF6               	movwf	tblptrl,c
 10265  0067EC  0E7E               	movlw	high _USB_SD_Ptr
 10266  0067EE  20F4               	addwfc	prodh,w,c
 10267  0067F0  6EF7               	movwf	tblptrh,c
 10268  0067F2                     	if	0	;There are less than 3 active tblptr bytes
 10269  0067F2                     	endif
 10270  0067F2  0009               	tblrd		*+
 10271  0067F4  CFF5 F050          	movff	tablat,_inPipes
 10272  0067F8  000A               	tblrd		*-
 10273  0067FA  CFF5 F051          	movff	tablat,_inPipes+1
 10274                           
 10275                           ; BSR set to: 5
 10276                           ;usb_device.c: 1800: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
 10277  0067FE  C050  FFF6         	movff	_inPipes,tblptrl
 10278  006802  C051  FFF7         	movff	_inPipes+1,tblptrh
 10279  006806  6AF8               	clrf	tblptru,c
 10280  006808  0E07               	movlw	(high __ramtop+-1)
 10281  00680A  64F7               	cpfsgt	tblptrh,c
 10282  00680C  D003               	bra	u3347
 10283  00680E  0008               	tblrd		*
 10284  006810  50F5               	movf	tablat,w,c
 10285  006812  D005               	bra	u3340
 10286  006814                     u3347:
 10287  006814  CFF6 FFE1          	movff	tblptrl,fsr1l
 10288  006818  CFF7 FFE2          	movff	tblptrh,fsr1h
 10289  00681C  50E7               	movf	indf1,w,c
 10290  00681E                     u3340:
 10291  00681E  6E01               	movwf	??_USBStdGetDscHandler& (0+255),c
 10292  006820  5001               	movf	??_USBStdGetDscHandler,w,c
 10293  006822  6E54               	movwf	_inPipes+4,c
 10294  006824  6A55               	clrf	_inPipes+5,c
 10295                           
 10296                           ;usb_device.c: 1801: }
 10297  006826  0012               	return	
 10298  006828                     l354:
 10299                           
 10300                           ;usb_device.c: 1802: else
 10301                           ;usb_device.c: 1803: {
 10302                           ;usb_device.c: 1804: inPipes[0].info.Val = 0;
 10303  006828  0E00               	movlw	0
 10304  00682A  6E53               	movwf	_inPipes+3,c
 10305                           
 10306                           ;usb_device.c: 1805: }
 10307                           ;usb_device.c: 1806: break;
 10308  00682C  0012               	return	
 10309  00682E                     
 10310                           ;usb_device.c: 1808: inPipes[0].info.Val = 0;
 10311  00682E  0E00               	movlw	0
 10312  006830  6E53               	movwf	_inPipes+3,c
 10313                           
 10314                           ;usb_device.c: 1810: }
 10315                           
 10316                           ;usb_device.c: 1809: break;
 10317  006832  0012               	return	
 10318  006834                     l349:
 10319  006834  0105               	movlb	5	; () banked
 10320  006836  5103               	movf	3,w,b	;volatile
 10321                           
 10322                           ; Switch size 1, requested type "space"
 10323                           ; Number of cases is 3, Range of values is 1 to 3
 10324                           ; switch strategies available:
 10325                           ; Name         Instructions Cycles
 10326                           ; simple_byte           10     6 (average)
 10327                           ;	Chosen strategy is simple_byte
 10328  006838  0A01               	xorlw	1	; case 1
 10329  00683A  B4D8               	btfsc	status,2,c
 10330  00683C  D799               	goto	l350
 10331  00683E  0A03               	xorlw	3	; case 2
 10332  006840  B4D8               	btfsc	status,2,c
 10333  006842  D79F               	goto	l352
 10334  006844  0A01               	xorlw	1	; case 3
 10335  006846  B4D8               	btfsc	status,2,c
 10336  006848  D7C8               	goto	l353
 10337  00684A  D7F1               	goto	l356
 10338  00684C                     __end_of_USBStdGetDscHandler:
 10339                           	opt stack 0
 10340                           tblptru	equ	0xFF8
 10341                           tblptrh	equ	0xFF7
 10342                           tblptrl	equ	0xFF6
 10343                           tablat	equ	0xFF5
 10344                           prodh	equ	0xFF4
 10345                           prodl	equ	0xFF3
 10346                           intcon2	equ	0xFF1
 10347                           postinc0	equ	0xFEE
 10348                           wreg	equ	0xFE8
 10349                           indf1	equ	0xFE7
 10350                           postinc1	equ	0xFE6
 10351                           fsr1h	equ	0xFE2
 10352                           fsr1l	equ	0xFE1
 10353                           indf2	equ	0xFDF
 10354                           postinc2	equ	0xFDE
 10355                           postdec2	equ	0xFDD
 10356                           fsr2h	equ	0xFDA
 10357                           fsr2l	equ	0xFD9
 10358                           status	equ	0xFD8
 10359                           
 10360 ;; *************** function _USBStdFeatureReqHandler *****************
 10361 ;; Defined at:
 10362 ;;		line 1628 in file "../USB Stack/usb_device.c"
 10363 ;; Parameters:    Size  Location     Type
 10364 ;;		None
 10365 ;; Auto vars:     Size  Location     Type
 10366 ;;  p               2    3[COMRAM] PTR struct __BDT
 10367 ;;		 -> BDT(64), 
 10368 ;;  pUEP            2    1[COMRAM] PTR unsigned int 
 10369 ;;		 -> UEP0(1), 
 10370 ;; Return value:  Size  Location     Type
 10371 ;;                  1    wreg      void 
 10372 ;; Registers used:
 10373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10374 ;; Tracked objects:
 10375 ;;		On entry : 0/0
 10376 ;;		On exit  : 0/0
 10377 ;;		Unchanged: 0/0
 10378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
 10379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
 10380 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0
 10381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0
 10382 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0
 10383 ;;Total ram usage:        5 bytes
 10384 ;; Hardware stack levels used:    1
 10385 ;; This function calls:
 10386 ;;		Nothing
 10387 ;; This function is called by:
 10388 ;;		_USBCheckStdRequest
 10389 ;; This function uses a non-reentrant model
 10390 ;;
 10391                           
 10392                           	psect	text47
 10393  006B2A                     __ptext47:
 10394                           	opt stack 0
 10395  006B2A                     _USBStdFeatureReqHandler:
 10396                           	opt stack 26
 10397                           
 10398                           ;usb_device.c: 1630: BDT_ENTRY *p;
 10399                           ;usb_device.c: 1634: unsigned int* pUEP;
 10400                           ;usb_device.c: 1668: if((SetupPkt.bFeature == 1)&&
 10401                           ;usb_device.c: 1669: (SetupPkt.Recipient == (0x00)))
 10402                           
 10403                           ;incstack = 0
 10404  006B2A  0105               	movlb	5	; () banked
 10405  006B2C  0502               	decf	2,w,b	;volatile
 10406  006B2E  A4D8               	btfss	status,2,c
 10407  006B30  D00F               	goto	l337
 10408                           
 10409                           ; BSR set to: 5
 10410  006B32  5100               	movf	0,w,b	;volatile
 10411  006B34  0B1F               	andlw	31
 10412  006B36  0900               	iorlw	0
 10413  006B38  A4D8               	btfss	status,2,c
 10414  006B3A  D00A               	goto	l337
 10415                           
 10416                           ; BSR set to: 5
 10417                           ;usb_device.c: 1670: {
 10418                           ;usb_device.c: 1671: inPipes[0].info.bits.busy = 1;
 10419  006B3C  8E53               	bsf	_inPipes+3,7,c
 10420                           
 10421                           ; BSR set to: 5
 10422                           ;usb_device.c: 1672: if(SetupPkt.bRequest == 3)
 10423  006B3E  0E03               	movlw	3
 10424  006B40  1901               	xorwf	1,w,b	;volatile
 10425  006B42  A4D8               	btfss	status,2,c
 10426  006B44  D002               	goto	l336
 10427                           
 10428                           ; BSR set to: 5
 10429                           ;usb_device.c: 1673: RemoteWakeup = TRUE;
 10430  006B46  0E01               	movlw	1
 10431  006B48  D001               	goto	L17
 10432  006B4A                     l336:
 10433                           
 10434                           ;usb_device.c: 1674: else
 10435                           ;usb_device.c: 1675: RemoteWakeup = FALSE;
 10436                           
 10437                           ; BSR set to: 0
 10438  006B4A  0E00               	movlw	0
 10439  006B4C                     L17:
 10440  006B4C  0100               	movlb	0	; () banked
 10441  006B4E  6FBB               	movwf	_RemoteWakeup& (0+255),b
 10442  006B50                     l337:
 10443                           
 10444                           ;usb_device.c: 1676: }
 10445                           ;usb_device.c: 1678: if((SetupPkt.bFeature == 0)&&
 10446                           ;usb_device.c: 1679: (SetupPkt.Recipient == (0x02))&&
 10447                           ;usb_device.c: 1680: (SetupPkt.EPNum != 0))
 10448                           
 10449                           ; BSR set to: 0
 10450  006B50  0105               	movlb	5	; () banked
 10451  006B52  5102               	movf	2,w,b	;volatile
 10452  006B54  A4D8               	btfss	status,2,c
 10453  006B56  0012               	return	
 10454                           
 10455                           ; BSR set to: 5
 10456  006B58  5100               	movf	0,w,b	;volatile
 10457  006B5A  0B1F               	andlw	31
 10458  006B5C  0A02               	xorlw	2
 10459  006B5E  A4D8               	btfss	status,2,c
 10460  006B60  0012               	return	
 10461                           
 10462                           ; BSR set to: 5
 10463  006B62  5104               	movf	4,w,b	;volatile
 10464  006B64  0B0F               	andlw	15
 10465  006B66  0900               	iorlw	0
 10466  006B68  B4D8               	btfsc	status,2,c
 10467  006B6A  0012               	return	
 10468                           
 10469                           ; BSR set to: 5
 10470                           ;usb_device.c: 1681: {
 10471                           ;usb_device.c: 1682: inPipes[0].info.bits.busy = 1;
 10472  006B6C  8E53               	bsf	_inPipes+3,7,c
 10473                           
 10474                           ;usb_device.c: 1685: if(SetupPkt.EPDir == 0)
 10475  006B6E  BF04               	btfsc	4,7,b	;volatile
 10476  006B70  D00A               	goto	l339
 10477                           
 10478                           ; BSR set to: 5
 10479                           ;usb_device.c: 1686: {
 10480                           ;usb_device.c: 1687: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 10481  006B72  5104               	movf	4,w,b	;volatile
 10482  006B74  0B0F               	andlw	15
 10483  006B76  6E01               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 10484  006B78  5001               	movf	??_USBStdFeatureReqHandler,w,c
 10485  006B7A  0D02               	mullw	2
 10486  006B7C  0E9F               	movlw	low _pBDTEntryOut
 10487  006B7E  24F3               	addwf	prodl,w,c
 10488  006B80  6ED9               	movwf	fsr2l,c
 10489  006B82  0E00               	movlw	high _pBDTEntryOut
 10490  006B84  D009               	goto	L18
 10491  006B86                     l339:
 10492                           
 10493                           ; BSR set to: 5
 10494                           ;usb_device.c: 1689: else
 10495                           ;usb_device.c: 1690: {
 10496                           ;usb_device.c: 1691: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 10497                           
 10498                           ; BSR set to: 5
 10499  006B86  5104               	movf	4,w,b	;volatile
 10500  006B88  0B0F               	andlw	15
 10501  006B8A  6E01               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 10502  006B8C  5001               	movf	??_USBStdFeatureReqHandler,w,c
 10503  006B8E  0D02               	mullw	2
 10504  006B90  0E48               	movlw	low _pBDTEntryIn
 10505  006B92  24F3               	addwf	prodl,w,c
 10506  006B94  6ED9               	movwf	fsr2l,c
 10507  006B96  0E00               	movlw	high _pBDTEntryIn
 10508  006B98                     L18:
 10509  006B98  20F4               	addwfc	prodh,w,c
 10510  006B9A  6EDA               	movwf	fsr2h,c
 10511  006B9C  CFDE F004          	movff	postinc2,USBStdFeatureReqHandler@p
 10512  006BA0  CFDD F005          	movff	postdec2,USBStdFeatureReqHandler@p+1
 10513                           
 10514                           ; BSR set to: 5
 10515                           ;usb_device.c: 1692: }
 10516                           ;usb_device.c: 1695: if(SetupPkt.bRequest == 3)
 10517                           
 10518                           ; BSR set to: 5
 10519  006BA4  0E03               	movlw	3
 10520  006BA6  1901               	xorwf	1,w,b	;volatile
 10521  006BA8  A4D8               	btfss	status,2,c
 10522  006BAA  D007               	goto	l341
 10523                           
 10524                           ; BSR set to: 5
 10525                           ;usb_device.c: 1696: {
 10526                           ;usb_device.c: 1698: p->STAT.Val = 0x80|0x04;
 10527  006BAC  C004  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 10528  006BB0  C005  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 10529  006BB4  0E84               	movlw	132
 10530  006BB6  6EDF               	movwf	indf2,c
 10531                           
 10532                           ;usb_device.c: 1699: }
 10533  006BB8  0012               	return	
 10534  006BBA                     l341:
 10535                           
 10536                           ; BSR set to: 5
 10537                           ;usb_device.c: 1700: else
 10538                           ;usb_device.c: 1701: {
 10539                           ;usb_device.c: 1708: pUEP = (unsigned int*)(&UEP0+SetupPkt.EPNum);
 10540                           
 10541                           ; BSR set to: 5
 10542  006BBA  5104               	movf	4,w,b	;volatile
 10543  006BBC  0B0F               	andlw	15
 10544  006BBE  6E01               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 10545  006BC0  5001               	movf	??_USBStdFeatureReqHandler,w,c
 10546  006BC2  0D01               	mullw	1
 10547  006BC4  0E70               	movlw	112
 10548  006BC6  24F3               	addwf	prodl,w,c
 10549  006BC8  6E02               	movwf	USBStdFeatureReqHandler@pUEP,c
 10550  006BCA  0E0F               	movlw	15
 10551  006BCC  20F4               	addwfc	prodh,w,c
 10552  006BCE  6E03               	movwf	USBStdFeatureReqHandler@pUEP+1,c
 10553                           
 10554                           ; BSR set to: 5
 10555                           ;usb_device.c: 1712: *pUEP &= ~0x0001;
 10556  006BD0  C002  FFD9         	movff	USBStdFeatureReqHandler@pUEP,fsr2l
 10557  006BD4  C003  FFDA         	movff	USBStdFeatureReqHandler@pUEP+1,fsr2h
 10558  006BD8  0EFE               	movlw	254
 10559  006BDA  16DE               	andwf	postinc2,f,c
 10560  006BDC  0EFF               	movlw	255
 10561  006BDE  16DD               	andwf	postdec2,f,c
 10562                           
 10563                           ; BSR set to: 5
 10564                           ;usb_device.c: 1714: if(SetupPkt.EPDir == 1)
 10565  006BE0  AF04               	btfss	4,7,b	;volatile
 10566  006BE2  D00F               	goto	l343
 10567                           
 10568                           ; BSR set to: 5
 10569                           ;usb_device.c: 1715: {
 10570                           ;usb_device.c: 1720: p->STAT.Val = 0x00|0x00;
 10571  006BE4  C004  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 10572  006BE8  C005  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 10573  006BEC  0E00               	movlw	0
 10574  006BEE  6EDF               	movwf	indf2,c
 10575                           
 10576                           ; BSR set to: 5
 10577                           ;usb_device.c: 1722: ((BYTE_VAL*)&p)->Val ^= 0x0004;
 10578  006BF0  0E04               	movlw	4
 10579  006BF2  1A04               	xorwf	USBStdFeatureReqHandler@p,f,c
 10580                           
 10581                           ; BSR set to: 5
 10582                           ;usb_device.c: 1723: p->STAT.Val = 0x00|0x40;
 10583  006BF4  C004  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 10584  006BF8  C005  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 10585  006BFC  0E40               	movlw	64
 10586  006BFE  6EDF               	movwf	indf2,c
 10587                           
 10588                           ;usb_device.c: 1727: }
 10589  006C00  0012               	return	
 10590  006C02                     l343:
 10591                           
 10592                           ; BSR set to: 5
 10593                           ;usb_device.c: 1728: else
 10594                           ;usb_device.c: 1729: {
 10595                           ;usb_device.c: 1737: p->STAT.Val = 0x80|0x00|0x08;
 10596                           
 10597                           ; BSR set to: 5
 10598  006C02  C004  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 10599  006C06  C005  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 10600  006C0A  0E88               	movlw	136
 10601  006C0C  6EDF               	movwf	indf2,c
 10602                           
 10603                           ; BSR set to: 5
 10604                           ;usb_device.c: 1739: ((BYTE_VAL*)&p)->Val ^= 0x0004;
 10605  006C0E  0E04               	movlw	4
 10606  006C10  1A04               	xorwf	USBStdFeatureReqHandler@p,f,c
 10607                           
 10608                           ; BSR set to: 5
 10609                           ;usb_device.c: 1740: p->STAT.Val = 0x80|0x40|0x08;
 10610  006C12  C004  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 10611  006C16  C005  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 10612  006C1A  0EC8               	movlw	200
 10613  006C1C  6EDF               	movwf	indf2,c
 10614                           
 10615                           ; BSR set to: 5
 10616                           
 10617                           ; BSR set to: 5
 10618  006C1E  0012               	return	
 10619  006C20                     __end_of_USBStdFeatureReqHandler:
 10620                           	opt stack 0
 10621                           tblptru	equ	0xFF8
 10622                           tblptrh	equ	0xFF7
 10623                           tblptrl	equ	0xFF6
 10624                           tablat	equ	0xFF5
 10625                           prodh	equ	0xFF4
 10626                           prodl	equ	0xFF3
 10627                           intcon2	equ	0xFF1
 10628                           postinc0	equ	0xFEE
 10629                           wreg	equ	0xFE8
 10630                           indf1	equ	0xFE7
 10631                           postinc1	equ	0xFE6
 10632                           fsr1h	equ	0xFE2
 10633                           fsr1l	equ	0xFE1
 10634                           indf2	equ	0xFDF
 10635                           postinc2	equ	0xFDE
 10636                           postdec2	equ	0xFDD
 10637                           fsr2h	equ	0xFDA
 10638                           fsr2l	equ	0xFD9
 10639                           status	equ	0xFD8
 10640                           
 10641 ;; *************** function _USBCtrlTrfOutHandler *****************
 10642 ;; Defined at:
 10643 ;;		line 1395 in file "../USB Stack/usb_device.c"
 10644 ;; Parameters:    Size  Location     Type
 10645 ;;		None
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;		None
 10648 ;; Return value:  Size  Location     Type
 10649 ;;                  1    wreg      void 
 10650 ;; Registers used:
 10651 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10652 ;; Tracked objects:
 10653 ;;		On entry : 0/0
 10654 ;;		On exit  : 0/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
 10657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
 10658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0
 10659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
 10660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0
 10661 ;;Total ram usage:        0 bytes
 10662 ;; Hardware stack levels used:    1
 10663 ;; Hardware stack levels required when called:    1
 10664 ;; This function calls:
 10665 ;;		_USBCtrlTrfRxService
 10666 ;;		_USBPrepareForNextSetupTrf
 10667 ;; This function is called by:
 10668 ;;		_USBCtrlEPService
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           	psect	text48
 10673  005854                     __ptext48:
 10674                           	opt stack 0
 10675  005854                     _USBCtrlTrfOutHandler:
 10676                           	opt stack 27
 10677                           
 10678                           ;usb_device.c: 1397: if(controlTransferState == 2)
 10679                           
 10680                           ; BSR set to: 5
 10681                           ;incstack = 0
 10682  005854  0E02               	movlw	2
 10683  005856  185A               	xorwf	_controlTransferState,w,c
 10684  005858  A4D8               	btfss	status,2,c
 10685  00585A  D003               	goto	l293
 10686                           
 10687                           ;usb_device.c: 1398: {
 10688                           ;usb_device.c: 1399: USBCtrlTrfRxService();
 10689  00585C  EC1A  F035         	call	_USBCtrlTrfRxService	;wreg free
 10690                           
 10691                           ;usb_device.c: 1400: }
 10692  005860  0012               	return	
 10693  005862                     l293:
 10694                           
 10695                           ;usb_device.c: 1401: else
 10696                           ;usb_device.c: 1402: {
 10697                           ;usb_device.c: 1408: USBPrepareForNextSetupTrf();
 10698  005862  EC7F  F02B         	call	_USBPrepareForNextSetupTrf	;wreg free
 10699                           
 10700                           ;usb_device.c: 1409: if(BothEP0OutUOWNsSet == FALSE)
 10701  005866  0100               	movlb	0	; () banked
 10702  005868  51BA               	movf	_BothEP0OutUOWNsSet& (0+255),w,b
 10703  00586A  A4D8               	btfss	status,2,c
 10704  00586C  D019               	goto	l295
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;usb_device.c: 1410: {
 10708                           ;usb_device.c: 1411: pBDTEntryEP0OutNext->CNT = 8;
 10709  00586E  EE20 F001          	lfsr	2,1
 10710  005872  5056               	movf	_pBDTEntryEP0OutNext,w,c
 10711  005874  26D9               	addwf	fsr2l,f,c
 10712  005876  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
 10713  005878  22DA               	addwfc	fsr2h,f,c
 10714  00587A  0E08               	movlw	8
 10715  00587C  6EDF               	movwf	indf2,c
 10716                           
 10717                           ;usb_device.c: 1412: pBDTEntryEP0OutNext->ADR = (BYTE*)&SetupPkt;
 10718  00587E  EE20 F002          	lfsr	2,2
 10719  005882  5056               	movf	_pBDTEntryEP0OutNext,w,c
 10720  005884  26D9               	addwf	fsr2l,f,c
 10721  005886  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
 10722  005888  22DA               	addwfc	fsr2h,f,c
 10723  00588A  0E00               	movlw	0
 10724  00588C  6EDE               	movwf	postinc2,c
 10725  00588E  0E05               	movlw	5
 10726  005890  6EDD               	movwf	postdec2,c
 10727                           
 10728                           ; BSR set to: 0
 10729                           ;usb_device.c: 1413: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|0x08|0x04;
 10730  005892  C056  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 10731  005896  C057  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 10732  00589A  0E8C               	movlw	140
 10733  00589C  6EDF               	movwf	indf2,c
 10734                           
 10735                           ;usb_device.c: 1414: }
 10736  00589E  0012               	return	
 10737  0058A0                     l295:
 10738                           
 10739                           ; BSR set to: 0
 10740                           ;usb_device.c: 1415: else
 10741                           ;usb_device.c: 1416: {
 10742                           ;usb_device.c: 1417: BothEP0OutUOWNsSet = FALSE;
 10743                           
 10744                           ; BSR set to: 0
 10745  0058A0  0E00               	movlw	0
 10746  0058A2  6FBA               	movwf	_BothEP0OutUOWNsSet& (0+255),b
 10747                           
 10748                           ; BSR set to: 0
 10749  0058A4  0012               	return	
 10750  0058A6                     __end_of_USBCtrlTrfOutHandler:
 10751                           	opt stack 0
 10752                           tblptru	equ	0xFF8
 10753                           tblptrh	equ	0xFF7
 10754                           tblptrl	equ	0xFF6
 10755                           tablat	equ	0xFF5
 10756                           prodh	equ	0xFF4
 10757                           prodl	equ	0xFF3
 10758                           intcon2	equ	0xFF1
 10759                           postinc0	equ	0xFEE
 10760                           wreg	equ	0xFE8
 10761                           indf1	equ	0xFE7
 10762                           postinc1	equ	0xFE6
 10763                           fsr1h	equ	0xFE2
 10764                           fsr1l	equ	0xFE1
 10765                           indf2	equ	0xFDF
 10766                           postinc2	equ	0xFDE
 10767                           postdec2	equ	0xFDD
 10768                           fsr2h	equ	0xFDA
 10769                           fsr2l	equ	0xFD9
 10770                           status	equ	0xFD8
 10771                           
 10772 ;; *************** function _USBCtrlTrfRxService *****************
 10773 ;; Defined at:
 10774 ;;		line 2156 in file "../USB Stack/usb_device.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;		None
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;  byteToRead      1    3[COMRAM] unsigned char 
 10779 ;;  i               1    2[COMRAM] unsigned char 
 10780 ;; Return value:  Size  Location     Type
 10781 ;;                  1    wreg      void 
 10782 ;; Registers used:
 10783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10784 ;; Tracked objects:
 10785 ;;		On entry : 0/0
 10786 ;;		On exit  : 0/0
 10787 ;;		Unchanged: 0/0
 10788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
 10789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
 10790 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0
 10791 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0
 10792 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0
 10793 ;;Total ram usage:        4 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; This function calls:
 10796 ;;		Nothing
 10797 ;; This function is called by:
 10798 ;;		_USBCtrlTrfOutHandler
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           	psect	text49
 10803  006A34                     __ptext49:
 10804                           	opt stack 0
 10805  006A34                     _USBCtrlTrfRxService:
 10806                           	opt stack 27
 10807                           
 10808                           ;usb_device.c: 2158: BYTE byteToRead;
 10809                           ;usb_device.c: 2159: BYTE i;
 10810                           ;usb_device.c: 2161: byteToRead = pBDTEntryEP0OutCurrent->CNT;
 10811                           
 10812                           ;incstack = 0
 10813  006A34  EE20 F001          	lfsr	2,1
 10814  006A38  5058               	movf	_pBDTEntryEP0OutCurrent,w,c
 10815  006A3A  26D9               	addwf	fsr2l,f,c
 10816  006A3C  5059               	movf	_pBDTEntryEP0OutCurrent+1,w,c
 10817  006A3E  22DA               	addwfc	fsr2h,f,c
 10818  006A40  50DF               	movf	indf2,w,c
 10819  006A42  6E04               	movwf	USBCtrlTrfRxService@byteToRead,c
 10820                           
 10821                           ;usb_device.c: 2166: if(byteToRead > outPipes[0].wCount.Val)
 10822  006A44  5004               	movf	USBCtrlTrfRxService@byteToRead,w,c
 10823  006A46  0100               	movlb	0	; () banked
 10824  006A48  5D9B               	subwf	(_outPipes+4)& (0+255),w,b
 10825  006A4A  0E00               	movlw	0
 10826  006A4C  599C               	subwfb	(_outPipes+5)& (0+255),w,b
 10827  006A4E  B0D8               	btfsc	status,0,c
 10828  006A50  D003               	goto	l401
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;usb_device.c: 2167: {
 10832                           ;usb_device.c: 2168: byteToRead = outPipes[0].wCount.Val;
 10833  006A52  C09B  F004         	movff	_outPipes+4,USBCtrlTrfRxService@byteToRead
 10834                           
 10835                           ;usb_device.c: 2169: }
 10836  006A56  D00D               	goto	l402
 10837  006A58                     l401:
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;usb_device.c: 2170: else
 10841                           ;usb_device.c: 2171: {
 10842                           ;usb_device.c: 2172: outPipes[0].wCount.Val = outPipes[0].wCount.Val - byteToRead;
 10843                           
 10844                           ; BSR set to: 0
 10845  006A58  5004               	movf	USBCtrlTrfRxService@byteToRead,w,c
 10846  006A5A  6E01               	movwf	??_USBCtrlTrfRxService& (0+255),c
 10847  006A5C  6A02               	clrf	(??_USBCtrlTrfRxService+1)& (0+255),c
 10848  006A5E  1E01               	comf	??_USBCtrlTrfRxService,f,c
 10849  006A60  1E02               	comf	??_USBCtrlTrfRxService+1,f,c
 10850  006A62  4A01               	infsnz	??_USBCtrlTrfRxService,f,c
 10851  006A64  2A02               	incf	??_USBCtrlTrfRxService+1,f,c
 10852  006A66  519B               	movf	(_outPipes+4)& (0+255),w,b
 10853  006A68  2401               	addwf	??_USBCtrlTrfRxService,w,c
 10854  006A6A  6F9B               	movwf	(_outPipes+4)& (0+255),b
 10855  006A6C  519C               	movf	(_outPipes+5)& (0+255),w,b
 10856  006A6E  2002               	addwfc	??_USBCtrlTrfRxService+1,w,c
 10857  006A70  6F9C               	movwf	(_outPipes+5)& (0+255),b
 10858  006A72                     l402:
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;usb_device.c: 2173: }
 10862                           ;usb_device.c: 2175: for(i=0;i<byteToRead;i++)
 10863                           
 10864                           ; BSR set to: 0
 10865  006A72  0E00               	movlw	0
 10866  006A74  6E03               	movwf	USBCtrlTrfRxService@i,c
 10867  006A76  D011               	goto	l403
 10868  006A78                     
 10869                           ; BSR set to: 0
 10870                           ;usb_device.c: 2176: {
 10871                           ;usb_device.c: 2177: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
 10872                           
 10873                           ; BSR set to: 0
 10874  006A78  5003               	movf	USBCtrlTrfRxService@i,w,c
 10875  006A7A  0D01               	mullw	1
 10876  006A7C  0E20               	movlw	32
 10877  006A7E  24F3               	addwf	prodl,w,c
 10878  006A80  6ED9               	movwf	fsr2l,c
 10879  006A82  0E05               	movlw	5
 10880  006A84  20F4               	addwfc	prodh,w,c
 10881  006A86  6EDA               	movwf	fsr2h,c
 10882  006A88  C097  FFE1         	movff	_outPipes,fsr1l
 10883  006A8C  C098  FFE2         	movff	_outPipes+1,fsr1h
 10884  006A90  CFDF FFE7          	movff	indf2,indf1
 10885                           
 10886                           ; BSR set to: 0
 10887  006A94  4B97               	infsnz	_outPipes& (0+255),f,b
 10888  006A96  2B98               	incf	(_outPipes+1)& (0+255),f,b
 10889                           
 10890                           ; BSR set to: 0
 10891  006A98  2A03               	incf	USBCtrlTrfRxService@i,f,c
 10892  006A9A                     l403:
 10893                           
 10894                           ; BSR set to: 0
 10895                           
 10896                           ; BSR set to: 0
 10897  006A9A  5004               	movf	USBCtrlTrfRxService@byteToRead,w,c
 10898  006A9C  5C03               	subwf	USBCtrlTrfRxService@i,w,c
 10899  006A9E  A0D8               	btfss	status,0,c
 10900  006AA0  D7EB               	goto	l404
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;usb_device.c: 2178: }
 10904                           ;usb_device.c: 2181: if(outPipes[0].wCount.Val > 0)
 10905                           
 10906                           ; BSR set to: 0
 10907  006AA2  519B               	movf	(_outPipes+4)& (0+255),w,b
 10908  006AA4  119C               	iorwf	(_outPipes+5)& (0+255),w,b
 10909  006AA6  B4D8               	btfsc	status,2,c
 10910  006AA8  D026               	goto	l406
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;usb_device.c: 2182: {
 10914                           ;usb_device.c: 2188: pBDTEntryEP0OutNext->CNT = 8;
 10915  006AAA  EE20 F001          	lfsr	2,1
 10916  006AAE  5056               	movf	_pBDTEntryEP0OutNext,w,c
 10917  006AB0  26D9               	addwf	fsr2l,f,c
 10918  006AB2  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
 10919  006AB4  22DA               	addwfc	fsr2h,f,c
 10920  006AB6  0E08               	movlw	8
 10921  006AB8  6EDF               	movwf	indf2,c
 10922                           
 10923                           ;usb_device.c: 2189: pBDTEntryEP0OutNext->ADR = (BYTE*)&CtrlTrfData;
 10924  006ABA  EE20 F002          	lfsr	2,2
 10925  006ABE  5056               	movf	_pBDTEntryEP0OutNext,w,c
 10926  006AC0  26D9               	addwf	fsr2l,f,c
 10927  006AC2  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
 10928  006AC4  22DA               	addwfc	fsr2h,f,c
 10929  006AC6  0E20               	movlw	32
 10930  006AC8  6EDE               	movwf	postinc2,c
 10931  006ACA  0E05               	movlw	5
 10932  006ACC  6EDD               	movwf	postdec2,c
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;usb_device.c: 2190: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 10936  006ACE  C058  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 10937  006AD2  C059  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 10938  006AD6  BCDF               	btfsc	indf2,6,c
 10939  006AD8  D007               	goto	l407
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;usb_device.c: 2191: {
 10943                           ;usb_device.c: 2192: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|0x08;
 10944  006ADA  C056  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 10945  006ADE  C057  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 10946  006AE2  0EC8               	movlw	200
 10947  006AE4  6EDF               	movwf	indf2,c
 10948                           
 10949                           ;usb_device.c: 2193: }
 10950  006AE6  0012               	return	
 10951  006AE8                     l407:
 10952                           
 10953                           ; BSR set to: 0
 10954                           ;usb_device.c: 2194: else
 10955                           ;usb_device.c: 2195: {
 10956                           ;usb_device.c: 2196: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|0x08;
 10957                           
 10958                           ; BSR set to: 0
 10959  006AE8  C056  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 10960  006AEC  C057  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 10961  006AF0  0E88               	movlw	136
 10962  006AF2  6EDF               	movwf	indf2,c
 10963                           
 10964                           ; BSR set to: 0
 10965                           ;usb_device.c: 2197: }
 10966                           ;usb_device.c: 2198: }
 10967  006AF4  0012               	return	
 10968  006AF6                     l406:
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;usb_device.c: 2199: else
 10972                           ;usb_device.c: 2200: {
 10973                           ;usb_device.c: 2201: pBDTEntryEP0OutNext->CNT = 8;
 10974                           
 10975                           ; BSR set to: 0
 10976  006AF6  EE20 F001          	lfsr	2,1
 10977  006AFA  5056               	movf	_pBDTEntryEP0OutNext,w,c
 10978  006AFC  26D9               	addwf	fsr2l,f,c
 10979  006AFE  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
 10980  006B00  22DA               	addwfc	fsr2h,f,c
 10981  006B02  0E08               	movlw	8
 10982  006B04  6EDF               	movwf	indf2,c
 10983                           
 10984                           ;usb_device.c: 2202: pBDTEntryEP0OutNext->ADR = (BYTE*)&SetupPkt;
 10985  006B06  EE20 F002          	lfsr	2,2
 10986  006B0A  5056               	movf	_pBDTEntryEP0OutNext,w,c
 10987  006B0C  26D9               	addwf	fsr2l,f,c
 10988  006B0E  5057               	movf	_pBDTEntryEP0OutNext+1,w,c
 10989  006B10  22DA               	addwfc	fsr2h,f,c
 10990  006B12  0E00               	movlw	0
 10991  006B14  6EDE               	movwf	postinc2,c
 10992  006B16  0E05               	movlw	5
 10993  006B18  6EDD               	movwf	postdec2,c
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;usb_device.c: 2206: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
 10997  006B1A  C056  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 10998  006B1E  C057  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 10999  006B22  0E84               	movlw	132
 11000  006B24  6EDF               	movwf	indf2,c
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;usb_device.c: 2211: }
 11004                           ;usb_device.c: 2212: outPipes[0].info.bits.busy = 0;
 11005                           
 11006                           ; BSR set to: 0
 11007  006B26  9F9A               	bcf	(_outPipes+3)& (0+255),7,b
 11008  006B28  0012               	return	
 11009  006B2A                     __end_of_USBCtrlTrfRxService:
 11010                           	opt stack 0
 11011                           tblptru	equ	0xFF8
 11012                           tblptrh	equ	0xFF7
 11013                           tblptrl	equ	0xFF6
 11014                           tablat	equ	0xFF5
 11015                           prodh	equ	0xFF4
 11016                           prodl	equ	0xFF3
 11017                           intcon2	equ	0xFF1
 11018                           postinc0	equ	0xFEE
 11019                           wreg	equ	0xFE8
 11020                           indf1	equ	0xFE7
 11021                           postinc1	equ	0xFE6
 11022                           fsr1h	equ	0xFE2
 11023                           fsr1l	equ	0xFE1
 11024                           indf2	equ	0xFDF
 11025                           postinc2	equ	0xFDE
 11026                           postdec2	equ	0xFDD
 11027                           fsr2h	equ	0xFDA
 11028                           fsr2l	equ	0xFD9
 11029                           status	equ	0xFD8
 11030                           
 11031 ;; *************** function _USBCtrlTrfInHandler *****************
 11032 ;; Defined at:
 11033 ;;		line 1445 in file "../USB Stack/usb_device.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;		None
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;  lastDTS         1    4[COMRAM] unsigned char 
 11038 ;; Return value:  Size  Location     Type
 11039 ;;                  1    wreg      void 
 11040 ;; Registers used:
 11041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
 11047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
 11048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0
 11049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
 11050 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0
 11051 ;;Total ram usage:        1 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    1
 11054 ;; This function calls:
 11055 ;;		_USBCtrlTrfTxService
 11056 ;;		_USBPrepareForNextSetupTrf
 11057 ;; This function is called by:
 11058 ;;		_USBCtrlEPService
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           	psect	text50
 11063  005AC2                     __ptext50:
 11064                           	opt stack 0
 11065  005AC2                     _USBCtrlTrfInHandler:
 11066                           	opt stack 27
 11067                           
 11068                           ;usb_device.c: 1447: BYTE lastDTS;
 11069                           ;usb_device.c: 1449: lastDTS = pBDTEntryIn[0]->STAT.DTS;
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;incstack = 0
 11073  005AC2  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
 11074  005AC6  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 11075  005ACA  0E00               	movlw	0
 11076  005ACC  BCDF               	btfsc	indf2,6,c
 11077  005ACE  0E01               	movlw	1
 11078  005AD0  6E05               	movwf	USBCtrlTrfInHandler@lastDTS,c
 11079                           
 11080                           ;usb_device.c: 1452: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
 11081  005AD2  0E04               	movlw	4
 11082  005AD4  1A48               	xorwf	_pBDTEntryIn,f,c
 11083                           
 11084                           ;usb_device.c: 1455: if(USBDeviceState == ADR_PENDING_STATE)
 11085  005AD6  0E08               	movlw	8
 11086  005AD8  185C               	xorwf	_USBDeviceState,w,c
 11087  005ADA  A4D8               	btfss	status,2,c
 11088  005ADC  D009               	goto	l302
 11089                           
 11090                           ;usb_device.c: 1456: {
 11091                           ;usb_device.c: 1457: UADDR = SetupPkt.bDevADR.Val;
 11092  005ADE  C502 FF6E          	movff	1282,3950	;volatile
 11093                           
 11094                           ;usb_device.c: 1458: if(UADDR > 0)
 11095  005AE2  506E               	movf	3950,w,c	;volatile
 11096  005AE4  B4D8               	btfsc	status,2,c
 11097  005AE6  D002               	goto	l301
 11098                           
 11099                           ;usb_device.c: 1459: {
 11100                           ;usb_device.c: 1460: USBDeviceState=ADDRESS_STATE;
 11101  005AE8  0E10               	movlw	16
 11102  005AEA  D001               	goto	L19
 11103  005AEC                     l301:
 11104                           
 11105                           ;usb_device.c: 1462: else
 11106                           ;usb_device.c: 1463: {
 11107                           ;usb_device.c: 1464: USBDeviceState=DEFAULT_STATE;
 11108  005AEC  0E04               	movlw	4
 11109  005AEE                     L19:
 11110  005AEE  6E5C               	movwf	_USBDeviceState,c
 11111  005AF0                     l302:
 11112                           
 11113                           ;usb_device.c: 1465: }
 11114                           ;usb_device.c: 1466: }
 11115                           ;usb_device.c: 1469: if(controlTransferState == 1)
 11116  005AF0  045A               	decf	_controlTransferState,w,c
 11117  005AF2  A4D8               	btfss	status,2,c
 11118  005AF4  D028               	goto	l303
 11119                           
 11120                           ;usb_device.c: 1470: {
 11121                           ;usb_device.c: 1471: pBDTEntryIn[0]->ADR = (BYTE *)CtrlTrfData;
 11122  005AF6  EE20 F002          	lfsr	2,2
 11123  005AFA  5048               	movf	_pBDTEntryIn,w,c
 11124  005AFC  26D9               	addwf	fsr2l,f,c
 11125  005AFE  5049               	movf	_pBDTEntryIn+1,w,c
 11126  005B00  22DA               	addwfc	fsr2h,f,c
 11127  005B02  0E20               	movlw	32
 11128  005B04  6EDE               	movwf	postinc2,c
 11129  005B06  0E05               	movlw	5
 11130  005B08  6EDD               	movwf	postdec2,c
 11131                           
 11132                           ;usb_device.c: 1472: USBCtrlTrfTxService();
 11133  005B0A  EC10  F036         	call	_USBCtrlTrfTxService	;wreg free
 11134                           
 11135                           ;usb_device.c: 1475: if(shortPacketStatus == 2)
 11136  005B0E  0E02               	movlw	2
 11137  005B10  185B               	xorwf	_shortPacketStatus,w,c
 11138  005B12  A4D8               	btfss	status,2,c
 11139  005B14  D007               	goto	l304
 11140                           
 11141                           ;usb_device.c: 1476: {
 11142                           ;usb_device.c: 1479: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
 11143  005B16  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
 11144  005B1A  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 11145  005B1E  0E84               	movlw	132
 11146  005B20  6EDF               	movwf	indf2,c
 11147                           
 11148                           ;usb_device.c: 1480: }
 11149  005B22  0012               	return	
 11150  005B24                     l304:
 11151                           
 11152                           ;usb_device.c: 1481: else
 11153                           ;usb_device.c: 1482: {
 11154                           ;usb_device.c: 1483: if(lastDTS == 0)
 11155  005B24  5005               	movf	USBCtrlTrfInHandler@lastDTS,w,c
 11156  005B26  A4D8               	btfss	status,2,c
 11157  005B28  D007               	goto	l306
 11158                           
 11159                           ;usb_device.c: 1484: {
 11160                           ;usb_device.c: 1485: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|0x08;
 11161  005B2A  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
 11162  005B2E  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 11163  005B32  0EC8               	movlw	200
 11164  005B34  6EDF               	movwf	indf2,c
 11165                           
 11166                           ;usb_device.c: 1486: }
 11167  005B36  0012               	return	
 11168  005B38                     l306:
 11169                           
 11170                           ;usb_device.c: 1487: else
 11171                           ;usb_device.c: 1488: {
 11172                           ;usb_device.c: 1489: pBDTEntryIn[0]->STAT.Val = 0x80|0x00|0x08;
 11173  005B38  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
 11174  005B3C  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 11175  005B40  0E88               	movlw	136
 11176  005B42  6EDF               	movwf	indf2,c
 11177                           
 11178                           ;usb_device.c: 1490: }
 11179                           ;usb_device.c: 1491: }
 11180                           ;usb_device.c: 1492: }
 11181  005B44  0012               	return	
 11182  005B46                     l303:
 11183                           
 11184                           ;usb_device.c: 1493: else
 11185                           ;usb_device.c: 1494: {
 11186                           ;usb_device.c: 1495: USBPrepareForNextSetupTrf();
 11187  005B46  EC7F  F02B         	call	_USBPrepareForNextSetupTrf	;wreg free
 11188  005B4A  0012               	return	
 11189  005B4C                     __end_of_USBCtrlTrfInHandler:
 11190                           	opt stack 0
 11191                           tblptru	equ	0xFF8
 11192                           tblptrh	equ	0xFF7
 11193                           tblptrl	equ	0xFF6
 11194                           tablat	equ	0xFF5
 11195                           prodh	equ	0xFF4
 11196                           prodl	equ	0xFF3
 11197                           intcon2	equ	0xFF1
 11198                           postinc0	equ	0xFEE
 11199                           wreg	equ	0xFE8
 11200                           indf1	equ	0xFE7
 11201                           postinc1	equ	0xFE6
 11202                           fsr1h	equ	0xFE2
 11203                           fsr1l	equ	0xFE1
 11204                           indf2	equ	0xFDF
 11205                           postinc2	equ	0xFDE
 11206                           postdec2	equ	0xFDD
 11207                           fsr2h	equ	0xFDA
 11208                           fsr2l	equ	0xFD9
 11209                           status	equ	0xFD8
 11210                           
 11211 ;; *************** function _USBPrepareForNextSetupTrf *****************
 11212 ;; Defined at:
 11213 ;;		line 1517 in file "../USB Stack/usb_device.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;		None
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;  p               2    0[COMRAM] PTR struct __BDT
 11218 ;;		 -> RAM(2047), 
 11219 ;; Return value:  Size  Location     Type
 11220 ;;                  1    wreg      void 
 11221 ;; Registers used:
 11222 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11223 ;; Tracked objects:
 11224 ;;		On entry : 0/0
 11225 ;;		On exit  : 0/0
 11226 ;;		Unchanged: 0/0
 11227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
 11228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
 11229 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0
 11230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0
 11231 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0
 11232 ;;Total ram usage:        2 bytes
 11233 ;; Hardware stack levels used:    1
 11234 ;; This function calls:
 11235 ;;		Nothing
 11236 ;; This function is called by:
 11237 ;;		_USBCtrlTrfOutHandler
 11238 ;;		_USBCtrlTrfInHandler
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           	psect	text51
 11243  0056FE                     __ptext51:
 11244                           	opt stack 0
 11245  0056FE                     _USBPrepareForNextSetupTrf:
 11246                           	opt stack 27
 11247                           
 11248                           ;usb_device.c: 1519: controlTransferState = 0;
 11249                           
 11250                           ;incstack = 0
 11251  0056FE  0E00               	movlw	0
 11252  005700  6E5A               	movwf	_controlTransferState,c
 11253                           
 11254                           ;usb_device.c: 1526: pBDTEntryIn[0]->STAT.Val = 0x00;
 11255  005702  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
 11256  005706  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 11257  00570A  0E00               	movlw	0
 11258  00570C  6EDF               	movwf	indf2,c
 11259                           
 11260                           ;usb_device.c: 1527: {
 11261                           ;usb_device.c: 1528: BDT_ENTRY* p;
 11262                           ;usb_device.c: 1530: p = (BDT_ENTRY*)(((unsigned int)pBDTEntryIn[0])^0x0004);
 11263  00570E  0E04               	movlw	4
 11264  005710  1848               	xorwf	_pBDTEntryIn,w,c
 11265  005712  6E01               	movwf	USBPrepareForNextSetupTrf@p,c
 11266  005714  5049               	movf	_pBDTEntryIn+1,w,c
 11267  005716  6E02               	movwf	USBPrepareForNextSetupTrf@p+1,c
 11268                           
 11269                           ;usb_device.c: 1531: p->STAT.Val = 0x00;
 11270  005718  C001  FFD9         	movff	USBPrepareForNextSetupTrf@p,fsr2l
 11271  00571C  C002  FFDA         	movff	USBPrepareForNextSetupTrf@p+1,fsr2h
 11272  005720  0E00               	movlw	0
 11273  005722  6EDF               	movwf	indf2,c
 11274                           
 11275                           ;usb_device.c: 1532: }
 11276                           ;usb_device.c: 1537: if(outPipes[0].info.bits.busy == 1)
 11277  005724  0100               	movlb	0	; () banked
 11278  005726  AF9A               	btfss	(_outPipes+3)& (0+255),7,b
 11279  005728  0012               	return	
 11280                           
 11281                           ; BSR set to: 0
 11282                           ;usb_device.c: 1542: }
 11283                           ;usb_device.c: 1543: outPipes[0].info.bits.busy = 0;
 11284                           
 11285                           ; BSR set to: 0
 11286  00572A  9F9A               	bcf	(_outPipes+3)& (0+255),7,b
 11287  00572C  0012               	return	
 11288  00572E                     __end_of_USBPrepareForNextSetupTrf:
 11289                           	opt stack 0
 11290                           tblptru	equ	0xFF8
 11291                           tblptrh	equ	0xFF7
 11292                           tblptrl	equ	0xFF6
 11293                           tablat	equ	0xFF5
 11294                           prodh	equ	0xFF4
 11295                           prodl	equ	0xFF3
 11296                           intcon2	equ	0xFF1
 11297                           postinc0	equ	0xFEE
 11298                           wreg	equ	0xFE8
 11299                           indf1	equ	0xFE7
 11300                           postinc1	equ	0xFE6
 11301                           fsr1h	equ	0xFE2
 11302                           fsr1l	equ	0xFE1
 11303                           indf2	equ	0xFDF
 11304                           postinc2	equ	0xFDE
 11305                           postdec2	equ	0xFDD
 11306                           fsr2h	equ	0xFDA
 11307                           fsr2l	equ	0xFD9
 11308                           status	equ	0xFD8
 11309                           
 11310 ;; *************** function _USBCtrlTrfTxService *****************
 11311 ;; Defined at:
 11312 ;;		line 2061 in file "../USB Stack/usb_device.c"
 11313 ;; Parameters:    Size  Location     Type
 11314 ;;		None
 11315 ;; Auto vars:     Size  Location     Type
 11316 ;;  byteToSend      2    2[COMRAM] struct .
 11317 ;; Return value:  Size  Location     Type
 11318 ;;                  1    wreg      void 
 11319 ;; Registers used:
 11320 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11321 ;; Tracked objects:
 11322 ;;		On entry : 0/0
 11323 ;;		On exit  : 0/0
 11324 ;;		Unchanged: 0/0
 11325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4 BANK5hl  BANK5l  BANK6h BANK6lh BANK6ll   BANK7
 11326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0
 11327 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0
 11328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0
 11329 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0
 11330 ;;Total ram usage:        4 bytes
 11331 ;; Hardware stack levels used:    1
 11332 ;; This function calls:
 11333 ;;		Nothing
 11334 ;; This function is called by:
 11335 ;;		_USBCtrlTrfInHandler
 11336 ;;		_USBCtrlEPServiceComplete
 11337 ;; This function uses a non-reentrant model
 11338 ;;
 11339                           
 11340                           	psect	text52
 11341  006C20                     __ptext52:
 11342                           	opt stack 0
 11343  006C20                     _USBCtrlTrfTxService:
 11344                           	opt stack 26
 11345                           
 11346                           ;usb_device.c: 2063: WORD_VAL byteToSend;
 11347                           ;usb_device.c: 2068: if(inPipes[0].wCount.Val < 8)
 11348                           
 11349                           ; BSR set to: 0
 11350                           ;incstack = 0
 11351  006C20  5055               	movf	_inPipes+5,w,c
 11352  006C22  E113               	bnz	l3650
 11353  006C24  0E08               	movlw	8
 11354  006C26  5C54               	subwf	_inPipes+4,w,c
 11355  006C28  B0D8               	btfsc	status,0,c
 11356  006C2A  D00F               	goto	l385
 11357                           
 11358                           ;usb_device.c: 2069: {
 11359                           ;usb_device.c: 2070: byteToSend.Val = inPipes[0].wCount.Val;
 11360  006C2C  C054  F003         	movff	_inPipes+4,USBCtrlTrfTxService@byteToSend
 11361  006C30  C055  F004         	movff	_inPipes+5,USBCtrlTrfTxService@byteToSend+1
 11362                           
 11363                           ;usb_device.c: 2073: if(shortPacketStatus == 0)
 11364  006C34  505B               	movf	_shortPacketStatus,w,c
 11365  006C36  A4D8               	btfss	status,2,c
 11366  006C38  D002               	goto	l386
 11367                           
 11368                           ;usb_device.c: 2074: {
 11369                           ;usb_device.c: 2075: shortPacketStatus = 1;
 11370  006C3A  0E01               	movlw	1
 11371  006C3C  D004               	goto	L20
 11372  006C3E                     l386:
 11373                           
 11374                           ;usb_device.c: 2077: else if(shortPacketStatus == 1)
 11375  006C3E  045B               	decf	_shortPacketStatus,w,c
 11376  006C40  A4D8               	btfss	status,2,c
 11377  006C42  D007               	goto	l389
 11378                           
 11379                           ;usb_device.c: 2078: {
 11380                           ;usb_device.c: 2079: shortPacketStatus = 2;
 11381  006C44  0E02               	movlw	2
 11382  006C46                     L20:
 11383  006C46  6E5B               	movwf	_shortPacketStatus,c
 11384                           
 11385                           ;usb_device.c: 2080: }
 11386                           ;usb_device.c: 2082: }
 11387  006C48  D004               	goto	l389
 11388  006C4A                     l385:
 11389  006C4A                     l3650:
 11390                           
 11391                           ;usb_device.c: 2083: else
 11392                           ;usb_device.c: 2084: {
 11393                           ;usb_device.c: 2085: byteToSend.Val = 8;
 11394  006C4A  0E00               	movlw	0
 11395  006C4C  6E04               	movwf	USBCtrlTrfTxService@byteToSend+1,c
 11396  006C4E  0E08               	movlw	8
 11397  006C50  6E03               	movwf	USBCtrlTrfTxService@byteToSend,c
 11398  006C52                     l389:
 11399                           
 11400                           ;usb_device.c: 2086: }
 11401                           ;usb_device.c: 2092: pBDTEntryIn[0]->STAT.BC9 = 0;
 11402  006C52  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
 11403  006C56  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 11404  006C5A  92DF               	bcf	indf2,1,c
 11405                           
 11406                           ;usb_device.c: 2093: pBDTEntryIn[0]->STAT.BC8 = 0;
 11407  006C5C  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
 11408  006C60  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 11409  006C64  90DF               	bcf	indf2,0,c
 11410                           
 11411                           ;usb_device.c: 2097: pBDTEntryIn[0]->STAT.Val |= byteToSend.byte.HB;
 11412  006C66  C048  FFD9         	movff	_pBDTEntryIn,fsr2l
 11413  006C6A  C049  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 11414  006C6E  5004               	movf	USBCtrlTrfTxService@byteToSend+1,w,c
 11415  006C70  12DF               	iorwf	indf2,f,c
 11416                           
 11417                           ;usb_device.c: 2098: pBDTEntryIn[0]->CNT = byteToSend.byte.LB;
 11418  006C72  EE20 F001          	lfsr	2,1
 11419  006C76  5048               	movf	_pBDTEntryIn,w,c
 11420  006C78  26D9               	addwf	fsr2l,f,c
 11421  006C7A  5049               	movf	_pBDTEntryIn+1,w,c
 11422  006C7C  22DA               	addwfc	fsr2h,f,c
 11423  006C7E  C003  FFDF         	movff	USBCtrlTrfTxService@byteToSend,indf2
 11424                           
 11425                           ;usb_device.c: 2108: inPipes[0].wCount.Val = inPipes[0].wCount.Val - byteToSend.Val;
 11426  006C82  C003  F001         	movff	USBCtrlTrfTxService@byteToSend,??_USBCtrlTrfTxService
 11427  006C86  C004  F002         	movff	USBCtrlTrfTxService@byteToSend+1,??_USBCtrlTrfTxService+1
 11428  006C8A  1E01               	comf	??_USBCtrlTrfTxService,f,c
 11429  006C8C  1E02               	comf	??_USBCtrlTrfTxService+1,f,c
 11430  006C8E  4A01               	infsnz	??_USBCtrlTrfTxService,f,c
 11431  006C90  2A02               	incf	??_USBCtrlTrfTxService+1,f,c
 11432  006C92  5054               	movf	_inPipes+4,w,c
 11433  006C94  2401               	addwf	??_USBCtrlTrfTxService,w,c
 11434  006C96  6E54               	movwf	_inPipes+4,c
 11435  006C98  5055               	movf	_inPipes+5,w,c
 11436  006C9A  2002               	addwfc	??_USBCtrlTrfTxService+1,w,c
 11437  006C9C  6E55               	movwf	_inPipes+5,c
 11438                           
 11439                           ;usb_device.c: 2110: pDst = ( BYTE*)CtrlTrfData;
 11440  006C9E  0E20               	movlw	32
 11441  006CA0  0100               	movlb	0	; () banked
 11442  006CA2  6FB7               	movwf	_pDst& (0+255),b
 11443  006CA4  0E05               	movlw	5
 11444  006CA6  6FB8               	movwf	(_pDst+1)& (0+255),b
 11445                           
 11446                           ; BSR set to: 0
 11447                           ;usb_device.c: 2112: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 11448  006CA8  A053               	btfss	_inPipes+3,0,c
 11449  006CAA  D01E               	goto	l391
 11450  006CAC  D03F               	goto	l395
 11451  006CAE                     
 11452                           ; BSR set to: 0
 11453                           ;usb_device.c: 2115: {
 11454                           ;usb_device.c: 2116: *pDst++ = *inPipes[0].pSrc.bRom++;
 11455                           
 11456                           ; BSR set to: 0
 11457  006CAE  C050  FFF6         	movff	_inPipes,tblptrl
 11458  006CB2  C051  FFF7         	movff	_inPipes+1,tblptrh
 11459  006CB6  6AF8               	clrf	tblptru,c
 11460  006CB8  C0B7  FFD9         	movff	_pDst,fsr2l
 11461  006CBC  C0B8  FFDA         	movff	_pDst+1,fsr2h
 11462  006CC0  0E07               	movlw	(high __ramtop+-1)
 11463  006CC2  64F7               	cpfsgt	tblptrh,c
 11464  006CC4  D003               	bra	u3277
 11465  006CC6  0008               	tblrd		*
 11466  006CC8  50F5               	movf	tablat,w,c
 11467  006CCA  D005               	bra	u3270
 11468  006CCC                     u3277:
 11469  006CCC  CFF6 FFE1          	movff	tblptrl,fsr1l
 11470  006CD0  CFF7 FFE2          	movff	tblptrh,fsr1h
 11471  006CD4  50E7               	movf	indf1,w,c
 11472  006CD6                     u3270:
 11473  006CD6  6EDF               	movwf	indf2,c
 11474  006CD8  4A50               	infsnz	_inPipes,f,c
 11475  006CDA  2A51               	incf	_inPipes+1,f,c
 11476  006CDC  0100               	movlb	0	; () banked
 11477  006CDE  4BB7               	infsnz	_pDst& (0+255),f,b
 11478  006CE0  2BB8               	incf	(_pDst+1)& (0+255),f,b
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;usb_device.c: 2117: byteToSend.Val--;
 11482  006CE2  0603               	decf	USBCtrlTrfTxService@byteToSend,f,c
 11483  006CE4  A0D8               	btfss	status,0,c
 11484  006CE6  0604               	decf	USBCtrlTrfTxService@byteToSend+1,f,c
 11485  006CE8                     l391:
 11486                           
 11487                           ; BSR set to: 0
 11488                           
 11489                           ; BSR set to: 0
 11490  006CE8  5003               	movf	USBCtrlTrfTxService@byteToSend,w,c
 11491  006CEA  1004               	iorwf	USBCtrlTrfTxService@byteToSend+1,w,c
 11492  006CEC  B4D8               	btfsc	status,2,c
 11493  006CEE  0012               	return	
 11494  006CF0  D7DE               	goto	l392
 11495  006CF2                     
 11496                           ; BSR set to: 0
 11497                           ;usb_device.c: 2123: {
 11498                           ;usb_device.c: 2124: *pDst++ = *inPipes[0].pSrc.bRam++;
 11499                           
 11500                           ; BSR set to: 0
 11501  006CF2  C050  FFF6         	movff	_inPipes,tblptrl
 11502  006CF6  C051  FFF7         	movff	_inPipes+1,tblptrh
 11503  006CFA  6AF8               	clrf	tblptru,c
 11504  006CFC  C0B7  FFD9         	movff	_pDst,fsr2l
 11505  006D00  C0B8  FFDA         	movff	_pDst+1,fsr2h
 11506  006D04  0E07               	movlw	(high __ramtop+-1)
 11507  006D06  64F7               	cpfsgt	tblptrh,c
 11508  006D08  D003               	bra	u3297
 11509  006D0A  0008               	tblrd		*
 11510  006D0C  50F5               	movf	tablat,w,c
 11511  006D0E  D005               	bra	u3290
 11512  006D10                     u3297:
 11513  006D10  CFF6 FFE1          	movff	tblptrl,fsr1l
 11514  006D14  CFF7 FFE2          	movff	tblptrh,fsr1h
 11515  006D18  50E7               	movf	indf1,w,c
 11516  006D1A                     u3290:
 11517  006D1A  6EDF               	movwf	indf2,c
 11518  006D1C  4A50               	infsnz	_inPipes,f,c
 11519  006D1E  2A51               	incf	_inPipes+1,f,c
 11520  006D20  0100               	movlb	0	; () banked
 11521  006D22  4BB7               	infsnz	_pDst& (0+255),f,b
 11522  006D24  2BB8               	incf	(_pDst+1)& (0+255),f,b
 11523                           
 11524                           ; BSR set to: 0
 11525                           ;usb_device.c: 2125: byteToSend.Val--;
 11526  006D26  0603               	decf	USBCtrlTrfTxService@byteToSend,f,c
 11527  006D28  A0D8               	btfss	status,0,c
 11528  006D2A  0604               	decf	USBCtrlTrfTxService@byteToSend+1,f,c
 11529  006D2C                     l395:
 11530                           
 11531                           ; BSR set to: 0
 11532                           
 11533                           ; BSR set to: 0
 11534  006D2C  5003               	movf	USBCtrlTrfTxService@byteToSend,w,c
 11535  006D2E  1004               	iorwf	USBCtrlTrfTxService@byteToSend+1,w,c
 11536  006D30  B4D8               	btfsc	status,2,c
 11537  006D32  0012               	return	
 11538  006D34  D7DE               	goto	l396
 11539  006D36                     __end_of_USBCtrlTrfTxService:
 11540                           	opt stack 0
 11541                           tblptru	equ	0xFF8
 11542                           tblptrh	equ	0xFF7
 11543                           tblptrl	equ	0xFF6
 11544                           tablat	equ	0xFF5
 11545                           prodh	equ	0xFF4
 11546                           prodl	equ	0xFF3
 11547                           intcon2	equ	0xFF1
 11548                           postinc0	equ	0xFEE
 11549                           wreg	equ	0xFE8
 11550                           indf1	equ	0xFE7
 11551                           postinc1	equ	0xFE6
 11552                           fsr1h	equ	0xFE2
 11553                           fsr1l	equ	0xFE1
 11554                           indf2	equ	0xFDF
 11555                           postinc2	equ	0xFDE
 11556                           postdec2	equ	0xFDD
 11557                           fsr2h	equ	0xFDA
 11558                           fsr2l	equ	0xFD9
 11559                           status	equ	0xFD8
 11560                           tblptru	equ	0xFF8
 11561                           tblptrh	equ	0xFF7
 11562                           tblptrl	equ	0xFF6
 11563                           tablat	equ	0xFF5
 11564                           prodh	equ	0xFF4
 11565                           prodl	equ	0xFF3
 11566                           intcon2	equ	0xFF1
 11567                           postinc0	equ	0xFEE
 11568                           wreg	equ	0xFE8
 11569                           indf1	equ	0xFE7
 11570                           postinc1	equ	0xFE6
 11571                           fsr1h	equ	0xFE2
 11572                           fsr1l	equ	0xFE1
 11573                           indf2	equ	0xFDF
 11574                           postinc2	equ	0xFDE
 11575                           postdec2	equ	0xFDD
 11576                           fsr2h	equ	0xFDA
 11577                           fsr2l	equ	0xFD9
 11578                           status	equ	0xFD8
 11579                           
 11580                           	psect	rparam
 11581  0000                     tblptru	equ	0xFF8
 11582                           tblptrh	equ	0xFF7
 11583                           tblptrl	equ	0xFF6
 11584                           tablat	equ	0xFF5
 11585                           prodh	equ	0xFF4
 11586                           prodl	equ	0xFF3
 11587                           intcon2	equ	0xFF1
 11588                           postinc0	equ	0xFEE
 11589                           wreg	equ	0xFE8
 11590                           indf1	equ	0xFE7
 11591                           postinc1	equ	0xFE6
 11592                           fsr1h	equ	0xFE2
 11593                           fsr1l	equ	0xFE1
 11594                           indf2	equ	0xFDF
 11595                           postinc2	equ	0xFDE
 11596                           postdec2	equ	0xFDD
 11597                           fsr2h	equ	0xFDA
 11598                           fsr2l	equ	0xFD9
 11599                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    571
    Data        0
    BSS         317
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     71      95
    BANK0           160      0      98
    BANK1           256      0     195
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           176      0       0
    BANK5hl           8      0       0
    BANK5l           24      0       0
    BANK6h          125      0       0
    BANK6lh          29      0       0
    BANK6ll          38      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_USBTransferOnePacket.ADR	PTR unsigned char  size(2) Largest target is 8
		 -> hid_report_in_k1(BIGRAMhhhh[8]), hid_report_out_k1(BIGRAMhhhll[1]), joystick_input_j2(BIGRAMhhhll[7]), joystick_input_j1(ABS[7]), 
		 -> CtrlTrfData(BIGRAMhl[8]), SetupPkt(BIGRAMll[8]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 1
		 -> USTATcopy(COMRAM[1]), NULL(NULL[0]), USBActiveConfiguration(COMRAM[1]), 

    memset@p1	PTR void  size(2) Largest target is 1
		 -> USBAlternateInterface(COMRAM[1]), UEP1(SFR[1]), 

    memset@p	PTR unsigned char  size(2) Largest target is 1
		 -> USBAlternateInterface(COMRAM[1]), UEP1(SFR[1]), 

    lastINTransmission_k1	PTR void  size(2) Largest target is 80
		 -> NULL(NULL[0]), BDT(BIGRAMll[64]), 

    lastOUTTransmission_k1	PTR void  size(2) Largest target is 80
		 -> NULL(NULL[0]), BDT(BIGRAMll[64]), 

    lastTransmission_j2	PTR void  size(2) Largest target is 80
		 -> NULL(NULL[0]), BDT(BIGRAMll[64]), 

    lastTransmission_j1	PTR void  size(2) Largest target is 80
		 -> NULL(NULL[0]), BDT(BIGRAMll[64]), 

    sp__USBTransferOnePacket.ADR	PTR unsigned char  size(2) Largest target is 8
		 -> hid_report_in_k1(BIGRAMhhhh[8]), hid_report_out_k1(BIGRAMhhhll[1]), joystick_input_j2(BIGRAMhhhll[7]), joystick_input_j1(ABS[7]), 
		 -> CtrlTrfData(BIGRAMhl[8]), SetupPkt(BIGRAMll[8]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 80
		 -> BDT(BIGRAMll[64]), 

    USBTransferOnePacket@handle.ADR	PTR unsigned char  size(2) Largest target is 8
		 -> hid_report_in_k1(BIGRAMhhhh[8]), hid_report_out_k1(BIGRAMhhhll[1]), joystick_input_j2(BIGRAMhhhll[7]), joystick_input_j1(ABS[7]), 
		 -> CtrlTrfData(BIGRAMhl[8]), SetupPkt(BIGRAMll[8]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 8
		 -> hid_report_in_k1(BIGRAMhhhh[8]), hid_report_out_k1(BIGRAMhhhll[1]), joystick_input_j2(BIGRAMhhhll[7]), joystick_input_j1(ABS[7]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 80
		 -> BDT(BIGRAMll[64]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR[1]), 

    pBDTEntryOut.ADR	PTR unsigned char  size(2) Largest target is 8
		 -> hid_report_in_k1(BIGRAMhhhh[8]), hid_report_out_k1(BIGRAMhhhll[1]), joystick_input_j2(BIGRAMhhhll[7]), joystick_input_j1(ABS[7]), 
		 -> CtrlTrfData(BIGRAMhl[8]), SetupPkt(BIGRAMll[8]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(2) Largest target is 80
		 -> BDT(BIGRAMll[64]), 

    pDst	PTR unsigned char  size(2) Largest target is 8
		 -> CtrlTrfData(BIGRAMhl[8]), NULL(NULL[0]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 80
		 -> BDT(BIGRAMll[64]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned int  size(2) Largest target is 1
		 -> UEP0(SFR[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[4] size(2) Largest target is 80
		 -> BDT(BIGRAMll[64]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 80
		 -> BDT(BIGRAMll[64]), 

    USBPrepareForNextSetupTrf@p	PTR struct __BDT size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    pBDTEntryIn.ADR	PTR unsigned char  size(2) Largest target is 8
		 -> hid_report_in_k1(BIGRAMhhhh[8]), hid_report_out_k1(BIGRAMhhhll[1]), joystick_input_j2(BIGRAMhhhll[7]), joystick_input_j1(ABS[7]), 
		 -> CtrlTrfData(BIGRAMhl[8]), SetupPkt(BIGRAMll[8]), 

    pBDTEntryEP0OutCurrent.ADR	PTR unsigned char  size(2) Largest target is 8
		 -> hid_report_in_k1(BIGRAMhhhh[8]), hid_report_out_k1(BIGRAMhhhll[1]), joystick_input_j2(BIGRAMhhhll[7]), joystick_input_j1(ABS[7]), 
		 -> CtrlTrfData(BIGRAMhl[8]), SetupPkt(BIGRAMll[8]), 

    pBDTEntryEP0OutNext.ADR	PTR unsigned char  size(2) Largest target is 8
		 -> hid_report_in_k1(BIGRAMhhhh[8]), hid_report_out_k1(BIGRAMhhhll[1]), joystick_input_j2(BIGRAMhhhll[7]), joystick_input_j1(ABS[7]), 
		 -> CtrlTrfData(BIGRAMhl[8]), SetupPkt(BIGRAMll[8]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 80
		 -> NULL(NULL[0]), BDT(BIGRAMll[64]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(2) Largest target is 80
		 -> NULL(NULL[0]), BDT(BIGRAMll[64]), 

    S799$ADR	PTR unsigned char  size(2) Largest target is 8
		 -> hid_report_in_k1(BIGRAMhhhh[8]), hid_report_out_k1(BIGRAMhhhll[1]), joystick_input_j2(BIGRAMhhhll[7]), joystick_input_j1(ABS[7]), 
		 -> CtrlTrfData(BIGRAMhl[8]), SetupPkt(BIGRAMll[8]), 

    BDT.ADR	PTR unsigned char  size(2) Largest target is 8
		 -> hid_report_in_k1(BIGRAMhhhh[8]), hid_report_out_k1(BIGRAMhhhll[1]), joystick_input_j2(BIGRAMhhhll[7]), joystick_input_j1(ABS[7]), 
		 -> CtrlTrfData(BIGRAMhl[8]), SetupPkt(BIGRAMll[8]), 

    pBDTEntryIn	PTR volatile struct __BDT[4] size(2) Largest target is 80
		 -> BDT(BIGRAMll[64]), 

    S860$pFunc	PTR FTN()void  size(2) Largest target is 0

    outPipes.pFunc	PTR FTN()void  size(2) Largest target is 0

    S850$wRam	PTR unsigned short  size(2) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned short  size(2) Largest target is 0

    S850$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 1
		 -> USBAlternateInterface(COMRAM[1]), UEP1(SFR[1]), 

    USB_SD_Ptr	const PTR const unsigned char [6] size(2) Largest target is 36
		 -> sd005(CODE[26]), sd004(CODE[36]), sd003(CODE[36]), sd002(CODE[34]), 
		 -> sd001(CODE[22]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 105
		 -> configDescriptor1(CODE[105]), 

    S319$wRom	PTR const unsigned short  size(2) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned short  size(2) Largest target is 0

    S319$wRam	PTR unsigned short  size(2) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned short  size(2) Largest target is 0

    S319$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(2) Largest target is 0

    S319$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_readJoystickState
    _readJoystickState->_readADC
    _readADC->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _processKeyboard->_USBTransferOnePacket
    _processJoystick_j2->_USBTransferOnePacket
    _processJoystick_j1->_USBTransferOnePacket
    _initialise->_initialiseJoysticks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBDeviceInit->_memset
    _USBCtrlTrfSetupHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPServiceComplete->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCBInitEP->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5hl

    None.

Critical Paths under _main in BANK5l

    None.

Critical Paths under _main in BANK6h

    None.

Critical Paths under _main in BANK6lh

    None.

Critical Paths under _main in BANK6ll

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   52953
                      _USBDeviceInit
                     _USBDeviceTasks
                   _debounceKeyboard
                         _initialise
                   _keyboardBlocking
                 _processJoystick_j1
                 _processJoystick_j2
                    _processKeyboard
                  _readJoystickState
                  _readKeyboardState
 ---------------------------------------------------------------------------------
 (1) _readKeyboardState                                    4     4      0     563
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _readJoystickState                                    3     3      0   17022
                                             68 COMRAM     3     3      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                             14    12      2   15854
                                             54 COMRAM    14    12      2
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     341
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     134
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3729
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3683
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4395
                                             42 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3075
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2895
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _processKeyboard                                     22    22      0    1861
                                              7 COMRAM    22    22      0
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (1) _processJoystick_j2                                   3     3      0    1380
                                              7 COMRAM     3     3      0
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (1) _processJoystick_j1                                   5     5      0    1380
                                              7 COMRAM     3     3      0
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (1) _keyboardBlocking                                     7     7      0     340
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0     246
                _initialiseJoysticks
                 _initialiseKeyboard
 ---------------------------------------------------------------------------------
 (2) _initialiseKeyboard                                   1     1      0     112
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initialiseJoysticks                                  6     6      0     134
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _debounceKeyboard                                     3     3      0     332
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _USBDeviceTasks                                       2     2      0   28864
                                             22 COMRAM     2     2      0
                   _USBCtrlEPService
                      _USBDeviceInit
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (2) _USBWakeFromSuspend                                   0     0      0    4382
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (2) _USBSuspend                                           0     0      0    4382
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (2) _USBStallHandler                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        1     1      0     965
                                              8 COMRAM     1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (2) _USBCtrlEPService                                     3     3      0   14707
                                             19 COMRAM     3     3      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfSetupHandler                               0     0      0   14319
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (4) _USBCtrlEPServiceComplete                             0     0      0     115
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (4) _USBCheckStdRequest                                   0     0      0    9822
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (5) _USBStdSetCfgHandler                                  0     0      0    5279
    _USER_USB_CALLBACK_EVENT_HANDLER
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     897
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _USER_USB_CALLBACK_EVENT_HANDLER                      8     2      6    4382
                                             11 COMRAM     8     2      6
                 _USBCBCheckOtherReq
                  _USBCBErrorHandler
                        _USBCBInitEP
              _USBCBStdSetDscHandler
                       _USBCBSuspend
               _USBCBWakeFromSuspend
                  _USBCB_SOF_Handler
 ---------------------------------------------------------------------------------
 (3) _USBCB_SOF_Handler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _USBCBWakeFromSuspend                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _USBCBSuspend                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _USBCBStdSetDscHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _USBCBInitEP                                          0     0      0    2224
                  _USBEnableEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                 7     3      4    1356
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _USBEnableEndpoint                                    4     3      1     868
                                              7 COMRAM     4     3      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (5) _USBConfigureEndpoint                                 7     6      1     446
                                              0 COMRAM     7     6      1
 ---------------------------------------------------------------------------------
 (3) _USBCBErrorHandler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _USBCBCheckOtherReq                                   2     2      0       0
                                              0 COMRAM     2     2      0
              _USBCheckHIDRequest_j1
              _USBCheckHIDRequest_j2
              _USBCheckHIDRequest_k1
 ---------------------------------------------------------------------------------
 (4) _USBCheckHIDRequest_k1                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _USBCheckHIDRequest_j2                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _USBCheckHIDRequest_j1                                0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _USBStdGetStatusHandler                               3     3      0      24
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _USBStdGetDscHandler                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _USBStdFeatureReqHandler                              5     5      0     137
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfOutHandler                                 0     0      0     137
                _USBCtrlTrfRxService
          _USBPrepareForNextSetupTrf
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfRxService                                  4     4      0     114
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfInHandler                                  1     1      0     161
                                              4 COMRAM     1     1      0
                _USBCtrlTrfTxService
          _USBPrepareForNextSetupTrf
 ---------------------------------------------------------------------------------
 (4) _USBPrepareForNextSetupTrf                            2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _USBCtrlTrfTxService                                  4     4      0     115
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USBDeviceInit
     _memset
   _USBDeviceTasks
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         _USBPrepareForNextSetupTrf
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
         _USBPrepareForNextSetupTrf
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBCheckOtherReq
                 _USBCheckHIDRequest_j1
                 _USBCheckHIDRequest_j2
                 _USBCheckHIDRequest_k1
               _USBCBErrorHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
               _USBCBStdSetDscHandler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
             _memset
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCBCheckOtherReq
               _USBCheckHIDRequest_j1
               _USBCheckHIDRequest_j2
               _USBCheckHIDRequest_k1
             _USBCBErrorHandler
             _USBCBInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               _USBTransferOnePacket
             _USBCBStdSetDscHandler
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCB_SOF_Handler
         _USBCtrlEPServiceComplete
           _USBCtrlTrfTxService
         _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCBCheckOtherReq
             _USBCheckHIDRequest_j1
             _USBCheckHIDRequest_j2
             _USBCheckHIDRequest_k1
           _USBCBErrorHandler
           _USBCBInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             _USBTransferOnePacket
           _USBCBStdSetDscHandler
           _USBCBSuspend
           _USBCBWakeFromSuspend
           _USBCB_SOF_Handler
     _USBDeviceInit
       _memset
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBCheckOtherReq
           _USBCheckHIDRequest_j1
           _USBCheckHIDRequest_j2
           _USBCheckHIDRequest_k1
         _USBCBErrorHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
         _USBCBStdSetDscHandler
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBCheckOtherReq
           _USBCheckHIDRequest_j1
           _USBCheckHIDRequest_j2
           _USBCheckHIDRequest_k1
         _USBCBErrorHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
         _USBCBStdSetDscHandler
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
     _USER_USB_CALLBACK_EVENT_HANDLER
       _USBCBCheckOtherReq
         _USBCheckHIDRequest_j1
         _USBCheckHIDRequest_j2
         _USBCheckHIDRequest_k1
       _USBCBErrorHandler
       _USBCBInitEP
         _USBEnableEndpoint
           _USBConfigureEndpoint
         _USBTransferOnePacket
       _USBCBStdSetDscHandler
       _USBCBSuspend
       _USBCBWakeFromSuspend
       _USBCB_SOF_Handler
   _debounceKeyboard
   _initialise
     _initialiseJoysticks
     _initialiseKeyboard
   _keyboardBlocking
   _processJoystick_j1
     _USBTransferOnePacket
   _processJoystick_j2
     _USBTransferOnePacket
   _processKeyboard
     _USBTransferOnePacket
   _readJoystickState
     _readADC
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___fttol
   _readKeyboardState

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMll           3FF      0       0      33        0.0%
BIGRAMhhhh         17D      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      25        0.0%
BANK7              100      0       0      26        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C3       7       76.2%
BIGRAMlh            B0      0       0      32        0.0%
BITBANK4            B0      0       0      12        0.0%
BANK4               B0      0       0      13        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      62       5       61.3%
BANK6h              7D      0       0      22        0.0%
BITBANK6h           7D      0       0      19        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     47      5F       1      100.0%
BIGRAMhhhll         26      0       0      29        0.0%
BITBANK6ll          26      0       0      21        0.0%
BANK6ll             26      0       0      24        0.0%
BIGRAMhhhlh         1D      0       0      28        0.0%
BANK6lh             1D      0       0      23        0.0%
BITBANK6lh          1D      0       0      20        0.0%
BIGRAMhl            18      0       0      31        0.0%
BITBANK5l           18      0       0      15        0.0%
BANK5l              18      0       0      17        0.0%
BIGRAMhhl            8      0       0      30        0.0%
BANK5hl              8      0       0      16        0.0%
BITBANK5hl           8      0       0      14        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     184      18        0.0%
DATA                 0      0     184       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 16 16:00:46 2019

                              _USB_SD_Ptr 7E04                                        l21 617E  
                                      l22 6146                                        l24 6192  
                                      l33 61A0                                        l25 6162  
                                      l34 61B6                                        l35 61C0  
                                      l27 617A                                        l36 61D6  
                                      l60 6270                                        l29 61E0  
                                      l61 6240                                        l70 6294  
                                      l71 629E                                        l63 6258  
                                      l72 62B4                                        l65 62BE  
                                      l57 625C                                        l58 6224  
                                      l69 627E                          readADC@ADCnumber 003F  
                           _USBDeviceInit 5C66                              ___ftadd@exp1 0036  
                            ___ftadd@exp2 0035      USER_USB_CALLBACK_EVENT_HANDLER@event 000C  
    USER_USB_CALLBACK_EVENT_HANDLER@pdata 000E                              ___ftadd@sign 0034  
                                     l301 5AEC                                       l302 5AF0  
                                     l303 5B46                                       l231 5CAA  
                                     l304 5B24                                       l320 6062  
                                     l401 6A58                                       l233 5CCE  
                                     l241 6D5C                                       l306 5B38  
                                     l402 6A72                                       l330 60C8  
                                     l322 606A                                       l234 5CCC  
                                     l250 6DBA                                       l242 6D54  
                                     l403 6A9A                                       l323 6070  
                                     l251 6DDE                                       l243 6D52  
                                     l404 6A78                                       l324 6076  
                                     l252 6DE8                                       l341 6BBA  
                                     l325 6088                                       l261 6E5E  
                                     l253 6E0C                                       l406 6AF6  
                                     l350 6770               __end_of_USBStdGetDscHandler 684C  
                                     l414 59AA                                       l326 608E  
                                     l254 6E16                                       l246 6D74  
                                     l407 6AE8                                       l343 6C02  
                                     l319 60E6                                       l247 6D80  
                                     l336 6B4A                                       l352 6782  
                                     l360 5D62                                       l424 57C8  
                                     l328 6094                                       l264 5760  
                                     l272 569E                                       l256 6E26  
                                     l248 6D88                                       l337 6B50  
                                     l353 67DA                                       l361 5D04  
                                     l329 60B0                                       l281 600E  
                                     l265 575E                                       l273 569C  
                                     l249 6DAE                                       l354 6828  
                                     l434 5DA2                                       l339 6B86  
                                     l419 5BA4                                       l259 6E42  
                                     l356 682E                                       l364 5D78  
                                     l436 5E0A                                       l380 74A4  
                                     l612 63DE                                       l700 7272  
                                     l620 7766                                       l293 5862  
                                     l349 6834                                       l365 5D14  
                                     l366 5D18                                       l374 7484  
                                     l278 6042                                       l630 78EE  
                                     l622 77B4                                       l391 6CE8  
                                     l295 58A0                                       l367 5D32  
                                     l471 639E                                       l463 633C  
                                     l375 7446                                       l279 603C  
                                     l623 77CE                                       l392 6CAE  
                                     l464 6304                                       l704 73E2  
                                     l640 7A9E                                       l632 794C  
                                     l560 5A1A                                       l385 6C4A  
                                     l289 58BE                                       l705 7390  
                                     l641 7AE6                                       l633 7966  
                                     l625 781C                                       l617 7742  
                                     l386 6C3E                                       l466 6350  
                                     l650 7C7C                                       l634 79AE  
                                     l626 7836                                       l395 6D2C  
                                     l475 635E                                       l467 6320  
                                     l379 7538                                       l651 7C96  
                                     l643 7B44                                       l627 7876  
                                     l619 7758                                       l396 6CF2  
                                     l476 6374                                       l900 6F4C  
                                     l644 7B5E                                       l636 7A0C  
                                     l389 6C52                                       l477 637E  
                                     l469 6338                                       l901 6F66  
                                     l653 7CF4                                       l637 7A26  
                                     l629 78D4                                       l478 6394  
                                     l902 6FAA                                       l670 6618  
                                     l910 7018                                       l654 7D0E  
                                     l646 7BBC                                       l558 5A04  
                                     l751 57EC                                       l671 6626  
                                     l655 7D56                                       l647 7BD6  
                                     l639 7A84                                       l559 5A16  
                                     l752 57DA                                       l672 6632  
                                     l920 7084                                       l912 7020  
                                     l656 7D8A                                       l648 7C1E  
                                     l665 65B6                                       l681 669E  
                                     l921 70B6                                       l913 7036  
                                     l754 57E0                                       l674 664C  
                                     l690 6734                                       l914 70C6  
                                     l658 7DBC                                       l850 711E  
                                     l755 57E6                                       l843 5904  
                                     l675 6658                                       l667 65BE  
                                     l691 6740                                       l683 66A6  
                                     l851 7120                                       l780 5A62  
                                     l668 6600                                       l684 66E8  
                                     l916 7068                                       l860 7162  
                                     l852 712A                                       _BDT 000400  
                                     l773 5A72                                       l781 5A68  
                                     l669 660C                                       l685 66F4  
                                     l861 7164                                       l853 712C  
                                     l782 5A6E                                       l774 5A44  
                                     l686 6700                                       l918 7076  
                                     l870 71BE                                       l862 7170  
                                     l854 7138                                       l687 670E  
                                     l695 7278                                       l871 71CE  
                                     l863 7172                                       l855 713A  
                                     l776 5A4A                                       l688 671A  
                                     l696 7266                                       l872 71DE  
                                     l864 717E                                       l856 7146  
                                     l848 7114                                       l777 5A50  
                                     l697 7292                                       l873 71EE  
                                     l865 7180                                       l857 7148  
                                     l778 5A56                                       l698 726A  
                                     l874 71FE                                       l866 7192  
                                     l858 7154                                       l779 5A5C  
                                     l883 5EE2                                       l699 726E  
                                     l875 720E                                       l859 7156  
                                     l876 7232                                       l868 71A0  
                                     l885 5EF2                                       l869 71AE  
                                     l894 6E72                                       l878 725A  
                                     l887 5F32                                       l897 6ED2  
                                     l889 5F48                                       l898 6EEC  
                                     _RB0 007C08                                       _RB1 007C09  
                                     _RC0 007C10                                       _RA4 007C04  
                                     _RB2 007C0A                                       _RC1 007C11  
                                     _RA5 007C05                                       _RB3 007C0B  
                                     _RB4 007C0C                                       _RC2 007C12  
                                     _RB5 007C0D                                       _RB6 007C0E  
                                     _RB7 007C0F                                       _SE0 007B6D  
                                     _UIE 000F69                                       _UIR 000F68  
                              _USBSuspend 5632                                       prod 000FF3  
                                     wreg 000FE8                            _USBDeviceTasks 6D36  
                          _USBDeviceState 005C                    ??_USBCBWakeFromSuspend 0001  
                   ??_USBCtrlTrfRxService 0001               __size_of_initialiseKeyboard 0068  
                USBEnableEndpoint@options 0008                              __CFG_LVP$OFF 000000  
              __end_of_processJoystick_j1 6678                __end_of_processJoystick_j2 6760  
                            ___ftdiv@cntr 0016                              ___ftdiv@sign 001B  
                            __CFG_WDT$OFF 000000                                      l1201 64D2  
                                    l1210 5C36                                      l1203 64FA  
                                    l1140 5E84                                      l1204 6538  
                                    l1220 68DE                                      l1141 5E6E  
                                    l1205 655E                                      l1118 5778  
                                    l1222 68F6                                      l1143 5EAC  
                                    l1223 6906                                      l1144 5EA2  
                                    l1216 6874                                      l1240 69D2  
                                    l1137 5E50                                      l1209 5C06  
                                    l1138 5E46                                      l1218 689C  
                                    l1219 68CE                                      l1227 566C  
                                    l1172 7606                                      l1245 6A06  
                                    l1237 696C                                      l1350 56BE  
                                    l1182 7662                                      l1246 69FA  
                                    l1351 56AE                                      l1191 76A0  
                                    l1183 7658                                      l1239 69E2  
                                    l1192 7696                                      l1168 75DC  
                                    l1248 6A22                                      l1177 766C  
                                    l1194 76C4                                      l1195 76E0  
                                    l1196 7710                                      l4300 5CA2  
                                    l5020 70B6                USBConfigureEndpoint@handle 0006  
                                    l3442 623A                                      l4410 58FC  
                                    l3338 5C62                                      l3380 615C  
                                    l3540 631A                                      l3604 56AE  
                                    l4406 6496                                      l5160 5A8A  
                                    l4360 6006                                      l3650 6C4A  
                                    l5162 5AB8                                      l4370 6036  
                                    l4540 6E1E                                      l4380 63CE  
                                    l4710 710C                                      l4706 7DBC  
                                    l4564 773A                                      l4814 5EEA  
                                    l4750 718A                                      l4832 5F40  
                                    l4808 5EDA                                      l4852 6E6A  
                                    l4696 7D8A                                      l4976 6FC6  
                                    l4986 6FF2                                      u4021 685C  
                                    u3320 67D8                                      u4041 6884  
                                    u4131 6950                                      u3340 681E  
                                    u4220 5CC6                                      u3270 6CD6  
                                    u4150 698A                                      u3327 67C8  
                                    u4320 6496                                      u3290 6D1A  
                                    u3610 5E38                                      u5050 7D30  
                                    u3347 6814                                      u4155 6982  
                                    u4340 594C                                      u5300 724A  
                                    u3277 6CCC                                      u4190 6A0C  
                                    u5310 724E                                      u4600 6E62  
                                    u5400 5F88                                      u3800 75CE  
                                    u5080 7D5A                                      u3297 6D10  
                                    u4290 6036                                      u3650 5EB6  
                                    u3900 7674                                      u5068 7D32  
                                    u3830 75F8                                      u5520 65AC  
                                    u3761 759A                                      u5370 5F36  
                                    u3930 76A8                                      u3771 75AE  
                                    u3860 7636                                      u4708 7852  
                                    u5630 6694                                      u5528 65AE  
                                    u4690 7850                                      u3971 64BA  
                                    u5740 6FF2                                      u4780 7988  
                                    u5638 6696                                      u4870 7AC0  
                                    u3991 64E2                     ??_USBCtrlTrfTxService 0001  
                                    u5840 70C6                                      u5760 700E  
                                    u4960 7BF8                                      u4798 798A  
                                    u5927 7182                                      _UCFG 000F6F  
                                    u5768 7010                                      u4888 7AC2  
                                    u5937 7752                                      u4978 7BFA  
                                    u5947 7762                                      _UEP0 000F70  
                                    _RBPU 007F8F                                      _UEP1 000F71  
                                    _UEIE 000F6B                                      _UEIR 000F6A  
                                    _UCON 000F6D        __size_of_USBPrepareForNextSetupTrf 0030  
                                    _pDst 00B7                                      _main 59CC  
                            ___ftpack@arg 0001                              ___ftpack@exp 0004  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 0000                        _USBCBCheckOtherReq 57D8  
              __end_of_USBCheckStdRequest 612A                    ??_USBCtrlTrfOutHandler 0005  
                            ___ftmul@cntr 0029                              ___param_bank 000000  
                            ___ftmul@sign 002A                 ??_USBStdFeatureReqHandler 0001  
                ??_USBStdGetStatusHandler 0001                              ___fttol@exp1 000F  
                            ___fttol@lval 000B                            ?_USBDeviceInit 0001  
                     ?_USBCBCheckOtherReq 0001                             __CFG_PLLDIV$5 000000  
                      processKeyboard@key 001C                                     ?_main 0001  
                         __end_of___ftadd 7736         __size_of_USBCtrlEPServiceComplete 01A2  
                         __end_of___ftdiv 6590                           __end_of___ftneg 567A  
                         __end_of___ftmul 6940                    __end_of_USBDeviceTasks 6E66  
                         __end_of___fttol 6A34                 ?_USBCtrlEPServiceComplete 0001  
                                   _UADDR 000F6E                                     _PORTA 000F80  
                                   _PORTB 000F81                                     _PORTC 000F82  
                                   _PORTD 000F83                                     _PORTE 000F84  
                           __CFG_USBDIV$2 000000                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                                   _USTAT 000F6C                                     _sd000 7FFA  
                                   _sd001 7FD2                                     _sd002 7F96  
                                   _sd003 7F72                                     _sd004 7F4E  
                                   _sd005 7FB8                               readADC@calc 0042  
                         __end_of_readADC 73E8                             ___awtoft@sign 000C  
            __size_of_initialiseJoysticks 00E4                             ___ftpack@sign 0005  
                    ??_USBCBCheckOtherReq 0001                                     tablat 000FF5  
                   _USBCheckHIDRequest_j1 612A                     _USBCheckHIDRequest_j2 6208  
                   _USBCheckHIDRequest_k1 62E6                                     status 000FD8  
                        _hid_report_in_j1 000570                          _hid_report_in_j2 0005F0  
                        _hid_report_in_k1 00067B              __size_of_USBStdSetCfgHandler 006C  
                         __initialization 56D0                              __end_of_main 5A42  
                       _readKeyboardState 7108                        ?_readKeyboardState 0001  
               __size_of_USBCtrlEPService 00C6                                    ??_main 0048  
                           ___fttol@sign1 000A                             __activetblptr 000002  
                         ?_USBDeviceTasks 0001                               ?_USBSuspend 0001  
                     ??_readKeyboardState 0001                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                        __end_of___awtoft 579C                          __end_of___ftpack 5ED6  
                                  _GODONE 007E11                                    _PKTDIS 007B6C  
                                  _RESUME 007B6A                                    _TRISA4 007C94  
                                  _TRISA5 007C95                                    _TRISD0 007CA8  
                                  _TRISD1 007CA9                                    _TRISD2 007CAA  
                                  _TRISD3 007CAB                                    _TRISD4 007CAC  
                                  _TRISD5 007CAD                                    _TRISD6 007CAE  
                                  _TRISD7 007CAF                                    _SUSPND 007B69  
                          __CFG_VREGEN$ON 000000                      __end_of_hid_rpt01_j1 7F0F  
                    __end_of_hid_rpt01_j2 7EC5                      __end_of_hid_rpt01_k1 7F4E  
                       _shortPacketStatus 005B                 __end_of_readKeyboardState 7262  
          USBConfigureEndpoint@workaround 0004                           USBDeviceTasks@i 0018  
             USBStdFeatureReqHandler@pUEP 0002                  USBTransferOnePacket@data 0002  
              USBCtrlTrfInHandler@lastDTS 0005                           ??_USBDeviceInit 0009  
                                  ___ftge 5BD6                         ?_debounceKeyboard 0001  
                               ??___ftadd 0031                                 ??___ftdiv 0013  
                               ??___ftneg 0004                                 ??___ftmul 0022  
                               ??___fttol 0005                              ?_USBCBInitEP 0001  
                                  _buffer 008F                         _USBEnableEndpoint 579C  
         __size_of_USBStdGetStatusHandler 0094                 __size_of_keyboardBlocking 00B6  
        debounceKeyboard@currentKeyNumber 0003                                    _keymap 7DC3  
                                  _memset 56A4                        ??_debounceKeyboard 0001  
                      _active_protocol_j1 00C0                        _active_protocol_j2 00BE  
                      _active_protocol_k1 00BC                                    clear_0 56D6  
                                  clear_1 56E2                                    clear_2 56EE  
                      ?_USBEnableEndpoint 0008                     _USBCBStdSetDscHandler 5620  
                   ___ftmul@f3_as_product 0026                                 ??_readADC 0039  
           __size_of_USBTransferOnePacket 009C                              __mediumconst 7DC2  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                          readADC@adcResult 0040  
                     ??_USBEnableEndpoint 0009                       _lastTransmission_j1 00B1  
                     _lastTransmission_j2 00AF                        _USBInMaxPacketSize 00A7  
                             _CtrlTrfData 000520                    ?_USBCheckHIDRequest_j1 0001  
                  ?_USBCheckHIDRequest_j2 0001                    ?_USBCheckHIDRequest_k1 0001  
                    _controlTransferState 005A                                __accesstop 0060  
                 __end_of__initialization 56F4                           __CFG_PBADEN$OFF 000000  
                              ___ftadd@f1 002B                                ___ftadd@f2 002E  
                       _hid_report_out_j1 000530                         _hid_report_out_j2 0005B0  
                       _hid_report_out_k1 00067A                                ___ftge@ff1 0001  
                              ___ftge@ff2 0004                  __size_of_processKeyboard 015A  
                           ___rparam_used 000001                                ___ftdiv@f1 000D  
                              ___ftdiv@f2 0010                                ___ftdiv@f3 0017  
                __size_of_USBStallHandler 0036                                ___ftneg@f1 0001  
                              ___awtoft@c 0009                       __size_of_USBSuspend 0024  
                              ___ftmul@f1 001C                                ___ftmul@f2 001F  
                              ___fttol@f1 0001                            __pcstackCOMRAM 0001  
               __end_of_USBEnableEndpoint 57D8                             __end_of_sd000 7FFE  
                           __end_of_sd001 7FE8                             __end_of_sd002 7FB8  
                           __end_of_sd003 7F96                             __end_of_sd004 7F72  
                           __end_of_sd005 7FD2                         _USBCB_SOF_Handler 5626  
           __size_of_USBConfigureEndpoint 008A               __end_of_USBCtrlTrfInHandler 5B4C  
                      ?_USBCB_SOF_Handler 0001                       ??_USBCB_SOF_Handler 0001  
                ??_USBCtrlTrfSetupHandler 0014                    readKeyboardState@input 0002  
                  _USBStdGetStatusHandler 5CF8                                __pbssBANK0 0060  
                              __pbssBANK1 0100               __size_of_USBWakeFromSuspend 002A  
                             _pBDTEntryIn 0048          __end_of_USBCtrlEPServiceComplete 758A  
                      _processJoystick_j1 6590                        _processJoystick_j2 6678  
               __end_of_USBCB_SOF_Handler 5628                          _rawKeyboardState 0182  
              __size_of_readKeyboardState 015A                      USBCtrlTrfRxService@i 0003  
                                 ?___ftge 0001                       _initialiseJoysticks 63C6  
                                 ?_memset 0001                    ?_USBCBStdSetDscHandler 0001  
                     ?_processJoystick_j1 0001                       ?_processJoystick_j2 0001  
                              _device_dsc 7FE8                                 ?___awtoft 0009  
                               ?___ftpack 0001                          _USBCtrlEPService 5F8C  
             __end_of_USBCtrlTrfRxService 6B2A                        _USBCheckStdRequest 6052  
                       _configDescriptor1 7E12                __end_of_initialiseKeyboard 5960  
                 initialiseJoysticks@loop 0005               __end_of_USBCtrlTrfTxService 6D36  
                     _USBStdSetCfgHandler 5960                      ?_initialiseJoysticks 0001  
                     ?_USBCheckStdRequest 0001              __size_of_USBStdGetDscHandler 00EC  
                                 _UIEbits 000F69             __size_of_USBCBWakeFromSuspend 0002  
                                 _UIRbits 000F68                      ??_processJoystick_j1 0008  
                    ??_processJoystick_j2 0008                                   __Hparam 0000  
                    ?_USBStdSetCfgHandler 0001                                   __Lparam 0000  
              __size_of_USBEnableEndpoint 003C                      ??_USBCheckStdRequest 0014  
                         __size_of___ftge 0090             __size_of_USBCtrlTrfOutHandler 0052  
                                 ___ftadd 758A                                   ___ftdiv 64AA  
                                 ___ftneg 5656                          ??_USBDeviceTasks 0017  
                                 ___ftmul 684C                         ??_processKeyboard 0008  
                                 ___fttol 6940                         ??_USBStallHandler 0001  
                        _keyboardBlocking 5ED6                                   __pcinit 56D0  
                              ??___awtoft 000C                                ??___ftpack 0006  
                         __size_of_memset 002C                 __end_of_configDescriptor1 7E7B  
                                 __ramtop 0800                                _initialise 5628  
                    __size_of_USBCBInitEP 003E                                   __ptext0 59CC  
                                 __ptext1 7108                                   __ptext2 7736  
                                 __ptext3 7262                                   __ptext4 6940  
                                 __ptext5 5656                                   __ptext6 684C  
                                 __ptext7 5BD6                                   __ptext8 64AA  
                                 __ptext9 758A                                   _inPipes 0050  
                                 _readADC 7262                              ??_USBSuspend 0014  
                       _USBCBErrorHandler 561E                              _hid_rpt01_j1 7EC5  
                            _hid_rpt01_j2 7E7B                              _hid_rpt01_k1 7F0F  
                   ??_initialiseJoysticks 0001                        ?_USBCBErrorHandler 0001  
                           ?_USBCBSuspend 0001                        __end_of_USB_CD_Ptr 7E12  
         __size_of_USBCtrlTrfSetupHandler 0052                      end_of_initialization 56F4  
             __size_of_USBCBCheckOtherReq 003E                        __end_of_USB_SD_Ptr 7E10  
                     _pBDTEntryEP0OutNext 0056                              _idle_rate_j1 00C1  
                            _idle_rate_j2 00BF                              _idle_rate_k1 00BD  
                     ??_USBCBErrorHandler 0001                                   memset@c 0003  
                                 memset@n 0005                                   memset@p 0007  
                           __Lmediumconst 7DC2                  ?_USBStdFeatureReqHandler 0001  
              ?_USBPrepareForNextSetupTrf 0001                     ??_USBStdSetCfgHandler 0014  
              __size_of_USBCB_SOF_Handler 0002                        __end_of_USBSuspend 5656  
                                 postdec2 000FDD                     _lastINTransmission_k1 00B5  
                                 postinc0 000FEE                                   postinc1 000FE6  
                                 postinc2 000FDE                  _USBCtrlEPServiceComplete 73E8  
                      USBEnableEndpoint@p 0009                 __end_of_USBCBErrorHandler 5620  
                               _USBInData 007E                   ??_USBCheckHIDRequest_j1 0001  
                 ??_USBCheckHIDRequest_j2 0001                   ??_USBCheckHIDRequest_k1 0001  
                          ??_USBCBSuspend 0001                        _BothEP0OutUOWNsSet 00BA  
               __size_of_debounceKeyboard 0148                 USBConfigureEndpoint@EPNum 0005  
     USER_USB_CALLBACK_EVENT_HANDLER@size 0010                                 _USTATcopy 005D  
                            _readADC$4124 0039                              _readADC$4125 003C  
            __end_of_USBTransferOnePacket 5E28                               ___ftdiv@exp 001A  
       __end_of_USBPrepareForNextSetupTrf 572E                               ___ftmul@exp 0025  
                  _USBCtrlTrfSetupHandler 58A6                     __end_of_USBDeviceInit 5CF8  
                          __end_of___ftge 5C66                               ?_initialise 0001  
                          __end_of_keymap 7E04                            __end_of_memset 56D0  
                     start_initialization 56D0                   ?_USBStdGetStatusHandler 0001  
           USBCtrlTrfRxService@byteToRead 0004                              _Keyboard_out 00B9  
            __end_of_USBConfigureEndpoint 5BD6           __end_of_USBStdFeatureReqHandler 6C20  
                       _readJoystickState 7736                  __end_of_USBCtrlEPService 6052  
                      ?_readJoystickState 0001                   _processJoystick_j1$3064 0009  
                 _processJoystick_j2$3124 0009                            USBDeviceInit@i 0009  
                  _pBDTEntryEP0OutCurrent 0058                   USBTransferOnePacket@dir 0001  
                               _OutBuffer 0087                   USBTransferOnePacket@len 0004  
                 ??_USBCBStdSetDscHandler 0001                                  ??___ftge 0007  
                     ??_readJoystickState 0045                       _USBStdGetDscHandler 6760  
                 readKeyboardState@column 0004                                  ??_memset 0007  
                   initialiseKeyboard@key 0001                __size_of_USBCBErrorHandler 0002  
              USBPrepareForNextSetupTrf@p 0001                    _USBActiveConfiguration 005F  
          __end_of_USBStdGetStatusHandler 5D8C                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                               __pbssCOMRAM 0048  
            __size_of_USBCtrlTrfInHandler 008A                      ?_USBStdGetDscHandler 0001  
               __end_of_readJoystickState 7DC2                  __end_of_keyboardBlocking 5F8C  
              __end_of_USBWakeFromSuspend 56A4                           _processKeyboard 6FAE  
                         _USBStallHandler 572E                       __size_of_initialise 000A  
                      _initialiseKeyboard 58F8                              _pBDTEntryOut 009F  
                    __end_of_USBCBSuspend 5624                       ?_initialiseKeyboard 0001  
                           __pmediumconst 7DC2              __end_of_USBCBWakeFromSuspend 5626  
                                ?___ftadd 002B                                  ?___ftdiv 000D  
                                ?___ftneg 0001                                  ?___ftmul 001C  
                                ?___fttol 0001                USBCBSendResume@delay_count 00AD  
                                ?_readADC 0037                      _USBTransferOnePacket 5D8C  
                 processKeyboard@keyArray 000A          keyboardBlocking@adjacentRowCount 0004  
                        _debounceKeyboard 6E66              __end_of_USBCtrlTrfOutHandler 58A6  
                    ??_initialiseKeyboard 0001                     ??_USBStdGetDscHandler 0001  
                 processKeyboard@modifier 0018              __size_of_USBCtrlTrfRxService 00F6  
           USBConfigureEndpoint@direction 0001               processKeyboard@keysDetected 001A  
             __size_of_processJoystick_j1 00E8               __size_of_processJoystick_j2 00E8  
            __size_of_USBCtrlTrfTxService 0116                ??_USBCtrlEPServiceComplete 0005  
             ??_USBPrepareForNextSetupTrf 0001                                  _PIR2bits 000FA1  
               USBCtrlEPService@setup_cnt 0016                                  _UEP0bits 000F70  
                           ??_USBCBInitEP 000C               __size_of_USBCheckStdRequest 00D8  
                                _UCONbits 000F6D                      _USBConfigureEndpoint 5B4C  
        __size_of_USBStdFeatureReqHandler 00F6               __end_of_initialiseJoysticks 64AA  
                   ?_USBTransferOnePacket 0001                     readJoystickState@port 0047  
        keyboardBlocking@currentKeyNumber 0006                    _lastOUTTransmission_k1 00B3  
                            _RemoteWakeup 00BB                __end_of_USBCBCheckOtherReq 5816  
                 __end_of_processKeyboard 7108                   __end_of_USBStallHandler 5764  
          __size_of_USBCheckHIDRequest_j1 00DE            __size_of_USBCheckHIDRequest_j2 00DE  
          __size_of_USBCheckHIDRequest_k1 00E0                __size_of_readJoystickState 068C  
           __end_of_USBCheckHIDRequest_j1 6208             __end_of_USBCheckHIDRequest_j2 62E6  
           __end_of_USBCheckHIDRequest_k1 63C6               __end_of_USBStdSetCfgHandler 59CC  
                      __end_of_device_dsc 7FFA                   ?_USBCtrlTrfSetupHandler 0001  
                 USBStdGetStatusHandler@p 0002                                  __Hrparam 0000  
                                __Lrparam 0000                    USBTransferOnePacket@ep 0005  
                                _SetupPkt 000500                     ?_USBConfigureEndpoint 0001  
                        __size_of___ftadd 01AC                          __size_of___ftdiv 00E6  
                        __size_of___ftneg 0024                          __size_of___ftmul 00F4  
                        __size_of___fttol 00F4                              ??_initialise 0007  
                                ___awtoft 5764                                  ___ftpack 5E28  
               _USBPrepareForNextSetupTrf 56FE                       __end_of_USBCBInitEP 5854  
                    readKeyboardState@row 0003                          __size_of_readADC 0186  
                 __size_of_USBDeviceTasks 0130                                  __ptext10 5764  
                                __ptext11 5E28                                  __ptext20 6D36  
                                __ptext12 6FAE                                  __ptext21 567A  
                                __ptext13 6678                                  __ptext30 56A4  
                                __ptext22 5632                                  __ptext14 6590  
                                __ptext31 5A42                                  __ptext23 572E  
                                __ptext15 5ED6                                  __ptext40 561E  
                                __ptext32 5626                                  __ptext24 5C66  
                                __ptext16 5628                                  __ptext41 57D8  
                                __ptext33 5624                                  __ptext25 5F8C  
                                __ptext17 58F8                                  __ptext50 5AC2  
                                __ptext42 62E6                                  __ptext34 5622  
                                __ptext26 58A6                                  __ptext18 63C6  
                                __ptext51 56FE                                  __ptext43 6208  
                                __ptext35 5620                                  __ptext27 73E8  
                                __ptext19 6E66                                  __ptext52 6C20  
                                __ptext44 612A                                  __ptext36 5816  
                                __ptext28 6052                                  __ptext45 5CF8  
                                __ptext37 5D8C                                  __ptext29 5960  
                                __ptext46 6760                                  __ptext38 579C  
                                __ptext47 6B2A                                  __ptext39 5B4C  
                                __ptext48 5854                                  __ptext49 6A34  
                    _USBCBWakeFromSuspend 5624                                  _keyboard 0100  
          __end_of_USBCtrlTrfSetupHandler 58F8                             __size_of_main 0076  
                       ?_USBCtrlEPService 0001                     __size_of_USBCBSuspend 0002  
                      __end_of_initialise 5632                       keyboardBlocking@row 0005  
                  keyboardBlocking@column 0007                        ??_USBCtrlEPService 0014  
                    _processKeyboard$3496 0016                       _USBCtrlTrfInHandler 5AC2  
                                _joystick 0060                                  _outPipes 0097  
                    _USBCtrlTrfOutHandler 5854            __size_of_USBCBStdSetDscHandler 0002  
           __end_of_USBCBStdSetDscHandler 5622                    ??_USBTransferOnePacket 0005  
                    ?_USBCtrlTrfInHandler 0001             USBCtrlTrfTxService@byteToSend 0003  
                                memset@p1 0001                          ?_processKeyboard 0001  
                            _USBCBSuspend 5622                          ?_USBStallHandler 0001  
                USBStdFeatureReqHandler@p 0004                     ?_USBCBWakeFromSuspend 0001  
                       ?_keyboardBlocking 0001                    __size_of_USBDeviceInit 0092  
 __end_of_USER_USB_CALLBACK_EVENT_HANDLER 5AC2  __size_of_USER_USB_CALLBACK_EVENT_HANDLER 0080  
       ??_USER_USB_CALLBACK_EVENT_HANDLER 0012          ?_USER_USB_CALLBACK_EVENT_HANDLER 000C  
         _USER_USB_CALLBACK_EVENT_HANDLER 5A42                        ??_keyboardBlocking 0001  
                __end_of_debounceKeyboard 6FAE                    ??_USBConfigureEndpoint 0002  
                   ?_USBCtrlTrfOutHandler 0001                       _USBCtrlTrfRxService 6A34  
                             _USBCBInitEP 5816                        _USBWakeFromSuspend 567A  
                 _USBStdFeatureReqHandler 6B2A                       _USBCtrlTrfTxService 6C20  
                     ?_USBWakeFromSuspend 0001                     ??_USBCtrlTrfInHandler 0005  
                   _USBAlternateInterface 005E                       USBEnableEndpoint@ep 000B  
                    ?_USBCtrlTrfRxService 0001                        __CFG_FOSC$HSPLL_HS 000000  
                    ?_USBCtrlTrfTxService 0001         readKeyboardState@currentKeyNumber 0001  
                    ??_USBWakeFromSuspend 0014                USBTransferOnePacket@handle 0006  
                       _joystick_input_j1 000613                         _joystick_input_j2 000656  
                              _USB_CD_Ptr 7E10  
